
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  080090a0  080090a0  000190a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092b4  080092b4  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092bc  080092bc  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092bc  080092bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092c0  080092c0  000192c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  080092c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001da4  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f04  20001f04  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fc47  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036ae  00000000  00000000  0002fe1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000de0  00000000  00000000  000334c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a4c  00000000  00000000  000342a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002228d  00000000  00000000  00034cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012be9  00000000  00000000  00056f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bb56a  00000000  00000000  00069b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e10  00000000  00000000  001250d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00128ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009088 	.word	0x08009088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	08009088 	.word	0x08009088

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000570:	f3bf 8f4f 	dsb	sy
}
 8000574:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__NVIC_SystemReset+0x24>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800057e:	4904      	ldr	r1, [pc, #16]	; (8000590 <__NVIC_SystemReset+0x24>)
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <__NVIC_SystemReset+0x28>)
 8000582:	4313      	orrs	r3, r2
 8000584:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000586:	f3bf 8f4f 	dsb	sy
}
 800058a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <__NVIC_SystemReset+0x20>
 8000590:	e000ed00 	.word	0xe000ed00
 8000594:	05fa0004 	.word	0x05fa0004

08000598 <bootFunction>:
#include "usbd_core.h"

extern CRC_HandleTypeDef hcrc;
extern USBD_HandleTypeDef hUsbDeviceFS;

void bootFunction(void){
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	b090      	sub	sp, #64	; 0x40
 800059c:	af00      	add	r7, sp, #0
	printf("Bootloader running\r\n");
 800059e:	4873      	ldr	r0, [pc, #460]	; (800076c <bootFunction+0x1d4>)
 80005a0:	f007 ff0a 	bl	80083b8 <puts>

	app_info_t *app1 = (const app_info_t*)(INFO_BASE);
 80005a4:	4b72      	ldr	r3, [pc, #456]	; (8000770 <bootFunction+0x1d8>)
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
	app_info_t *app2 = (const app_info_t*)(INFO_BASE+sizeof(app_info_t));
 80005a8:	4b72      	ldr	r3, [pc, #456]	; (8000774 <bootFunction+0x1dc>)
 80005aa:	623b      	str	r3, [r7, #32]

	if(app2->version > app1->version && ((*(uint32_t*)(BACKUP_BASE+4)) & 0xFF000000) == 0x08000000 && (*(uint32_t*)(BACKUP_BASE)) == 0x20020000){
 80005ac:	6a3b      	ldr	r3, [r7, #32]
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	f240 80a0 	bls.w	80006fa <bootFunction+0x162>
 80005ba:	4b6f      	ldr	r3, [pc, #444]	; (8000778 <bootFunction+0x1e0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005c6:	f040 8098 	bne.w	80006fa <bootFunction+0x162>
 80005ca:	4b6c      	ldr	r3, [pc, #432]	; (800077c <bootFunction+0x1e4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a6c      	ldr	r2, [pc, #432]	; (8000780 <bootFunction+0x1e8>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	f040 8092 	bne.w	80006fa <bootFunction+0x162>
		printf("found update\r\n");
 80005d6:	486b      	ldr	r0, [pc, #428]	; (8000784 <bootFunction+0x1ec>)
 80005d8:	f007 feee 	bl	80083b8 <puts>
//		if(app2->crc != crc_value){
//			printf("BACKUP crc fail.\r\n");
//			return;
//		}

		uint32_t *app_address = (uint32_t*)APP_BASE;
 80005dc:	4b6a      	ldr	r3, [pc, #424]	; (8000788 <bootFunction+0x1f0>)
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t *backup_address = (uint32_t*)BACKUP_BASE;
 80005e0:	4b66      	ldr	r3, [pc, #408]	; (800077c <bootFunction+0x1e4>)
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
		uint8_t prog_success = HAL_OK;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//erase
		EraseFlash(FLASH_SECTOR_4, 3);
 80005ea:	2103      	movs	r1, #3
 80005ec:	2004      	movs	r0, #4
 80005ee:	f000 f8e3 	bl	80007b8 <EraseFlash>
		printf("flash erased\r\n");
 80005f2:	4866      	ldr	r0, [pc, #408]	; (800078c <bootFunction+0x1f4>)
 80005f4:	f007 fee0 	bl	80083b8 <puts>
		//update

		HAL_FLASH_Unlock();
 80005f8:	f000 ff56 	bl	80014a8 <HAL_FLASH_Unlock>
		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP|FLASH_FLAG_OPERR|FLASH_FLAG_WRPERR|
 80005fc:	4b64      	ldr	r3, [pc, #400]	; (8000790 <bootFunction+0x1f8>)
 80005fe:	22f3      	movs	r2, #243	; 0xf3
 8000600:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000602:	b672      	cpsid	i
}
 8000604:	bf00      	nop
				FLASH_FLAG_PGAERR|FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);
		__disable_irq();
		for(int i=0; i<(app2->size)/4; i++){
 8000606:	2300      	movs	r3, #0
 8000608:	633b      	str	r3, [r7, #48]	; 0x30
 800060a:	e025      	b.n	8000658 <bootFunction+0xc0>
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)app_address, *backup_address)==HAL_OK){
 800060c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800060e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	461c      	mov	r4, r3
 8000616:	4615      	mov	r5, r2
 8000618:	4622      	mov	r2, r4
 800061a:	462b      	mov	r3, r5
 800061c:	2002      	movs	r0, #2
 800061e:	f000 feef 	bl	8001400 <HAL_FLASH_Program>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d110      	bne.n	800064a <bootFunction+0xb2>
				if(*app_address!=*backup_address){
 8000628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d003      	beq.n	800063c <bootFunction+0xa4>
					prog_success = HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 800063a:	e013      	b.n	8000664 <bootFunction+0xcc>
				}
				app_address++;
 800063c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800063e:	3304      	adds	r3, #4
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c
				backup_address++;
 8000642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000644:	3304      	adds	r3, #4
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
 8000648:	e003      	b.n	8000652 <bootFunction+0xba>
			}
			else{
				prog_success = HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8000650:	e008      	b.n	8000664 <bootFunction+0xcc>
		for(int i=0; i<(app2->size)/4; i++){
 8000652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000654:	3301      	adds	r3, #1
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	089a      	lsrs	r2, r3, #2
 800065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000660:	429a      	cmp	r2, r3
 8000662:	d8d3      	bhi.n	800060c <bootFunction+0x74>
  __ASM volatile ("cpsie i" : : : "memory");
 8000664:	b662      	cpsie	i
}
 8000666:	bf00      	nop
			}
		}
		__enable_irq();
		HAL_FLASH_Lock();
 8000668:	f000 ff40 	bl	80014ec <HAL_FLASH_Lock>
		if(prog_success == HAL_OK){
 800066c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000670:	2b00      	cmp	r3, #0
 8000672:	d110      	bne.n	8000696 <bootFunction+0xfe>
			printf("program success\r\n");
 8000674:	4847      	ldr	r0, [pc, #284]	; (8000794 <bootFunction+0x1fc>)
 8000676:	f007 fe9f 	bl	80083b8 <puts>
		}
		else{
			printf("program failed\r\n");
			return;
		}
		HAL_Delay(1000);
 800067a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067e:	f000 fcd1 	bl	8001024 <HAL_Delay>

		uint32_t App_Address = APP_BASE;
 8000682:	4b41      	ldr	r3, [pc, #260]	; (8000788 <bootFunction+0x1f0>)
 8000684:	61fb      	str	r3, [r7, #28]
		uint32_t App_Size = app2->size;
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	61bb      	str	r3, [r7, #24]
		uint32_t app_crc = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i=0; i<App_Size; i+= CRC_CHUNK_SIZE){
 8000690:	2300      	movs	r3, #0
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
 8000694:	e01d      	b.n	80006d2 <bootFunction+0x13a>
			printf("program failed\r\n");
 8000696:	4840      	ldr	r0, [pc, #256]	; (8000798 <bootFunction+0x200>)
 8000698:	f007 fe8e 	bl	80083b8 <puts>
			return;
 800069c:	e062      	b.n	8000764 <bootFunction+0x1cc>
			uint32_t chunk_len = (i+CRC_CHUNK_SIZE>App_Size)?App_Size-i:CRC_CHUNK_SIZE;
 800069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006a4:	69ba      	ldr	r2, [r7, #24]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d203      	bcs.n	80006b2 <bootFunction+0x11a>
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	e001      	b.n	80006b6 <bootFunction+0x11e>
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	617b      	str	r3, [r7, #20]
			app_crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*)(App_Address+i), chunk_len);
 80006b8:	69fa      	ldr	r2, [r7, #28]
 80006ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006bc:	4413      	add	r3, r2
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4836      	ldr	r0, [pc, #216]	; (800079c <bootFunction+0x204>)
 80006c4:	f000 fe71 	bl	80013aa <HAL_CRC_Accumulate>
 80006c8:	62f8      	str	r0, [r7, #44]	; 0x2c
		for(uint32_t i=0; i<App_Size; i+= CRC_CHUNK_SIZE){
 80006ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3e1      	bcc.n	800069e <bootFunction+0x106>
		}
		printf("crc done, value=%d\r\n", (int)app_crc);
 80006da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006dc:	4619      	mov	r1, r3
 80006de:	4830      	ldr	r0, [pc, #192]	; (80007a0 <bootFunction+0x208>)
 80006e0:	f007 fe04 	bl	80082ec <iprintf>

		if(func_write_app_info()!=HAL_OK){
 80006e4:	f000 f89a 	bl	800081c <func_write_app_info>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d139      	bne.n	8000762 <bootFunction+0x1ca>
			return;
		}

		HAL_Delay(2000);
 80006ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f2:	f000 fc97 	bl	8001024 <HAL_Delay>
		NVIC_SystemReset();
 80006f6:	f7ff ff39 	bl	800056c <__NVIC_SystemReset>
	}
	else if(((*(uint32_t*)(APP_BASE+4)) & 0xFF000000) == 0x08000000 && (*(uint32_t*)(APP_BASE)) == 0x20020000){
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <bootFunction+0x20c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000706:	d128      	bne.n	800075a <bootFunction+0x1c2>
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <bootFunction+0x1f0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <bootFunction+0x1e8>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d123      	bne.n	800075a <bootFunction+0x1c2>
		printf("start loading application\r\n");
 8000712:	4825      	ldr	r0, [pc, #148]	; (80007a8 <bootFunction+0x210>)
 8000714:	f007 fe50 	bl	80083b8 <puts>
//		if(app1->crc != crc_value){
//			printf("APP crc fail.\r\n");
//			return;
//		}
		//jump to app;
		uint32_t app_msp = *(__IO uint32_t*)(APP_BASE);
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <bootFunction+0x1f0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	613b      	str	r3, [r7, #16]
		uint32_t JumpAddress = *(__IO uint32_t*)(APP_BASE+4);
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <bootFunction+0x20c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	60fb      	str	r3, [r7, #12]
		pFunction JumpToApplication = (pFunction)JumpAddress;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	60bb      	str	r3, [r7, #8]
		HAL_CRC_DeInit(&hcrc);
 8000728:	481c      	ldr	r0, [pc, #112]	; (800079c <bootFunction+0x204>)
 800072a:	f000 fe0e 	bl	800134a <HAL_CRC_DeInit>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 800072e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000732:	481e      	ldr	r0, [pc, #120]	; (80007ac <bootFunction+0x214>)
 8000734:	f001 fad8 	bl	8001ce8 <HAL_GPIO_DeInit>
		USBD_DeInit(&hUsbDeviceFS);
 8000738:	481d      	ldr	r0, [pc, #116]	; (80007b0 <bootFunction+0x218>)
 800073a:	f005 fcb1 	bl	80060a0 <USBD_DeInit>
		HAL_SuspendTick();
 800073e:	f000 fc95 	bl	800106c <HAL_SuspendTick>
		HAL_DeInit();
 8000742:	f000 fbeb 	bl	8000f1c <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 8000746:	b672      	cpsid	i
}
 8000748:	bf00      	nop
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f383 8808 	msr	MSP, r3
}
 8000754:	bf00      	nop
		__disable_irq();
		__set_MSP(app_msp);
		JumpToApplication();
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	4798      	blx	r3
	}
	printf("no image found\r\n");
 800075a:	4816      	ldr	r0, [pc, #88]	; (80007b4 <bootFunction+0x21c>)
 800075c:	f007 fe2c 	bl	80083b8 <puts>
 8000760:	e000      	b.n	8000764 <bootFunction+0x1cc>
			return;
 8000762:	bf00      	nop
}
 8000764:	3740      	adds	r7, #64	; 0x40
 8000766:	46bd      	mov	sp, r7
 8000768:	bdb0      	pop	{r4, r5, r7, pc}
 800076a:	bf00      	nop
 800076c:	080090a0 	.word	0x080090a0
 8000770:	0800c000 	.word	0x0800c000
 8000774:	0800c00c 	.word	0x0800c00c
 8000778:	08060004 	.word	0x08060004
 800077c:	08060000 	.word	0x08060000
 8000780:	20020000 	.word	0x20020000
 8000784:	080090b4 	.word	0x080090b4
 8000788:	08010000 	.word	0x08010000
 800078c:	080090c4 	.word	0x080090c4
 8000790:	40023c00 	.word	0x40023c00
 8000794:	080090d4 	.word	0x080090d4
 8000798:	080090e8 	.word	0x080090e8
 800079c:	2000017c 	.word	0x2000017c
 80007a0:	080090f8 	.word	0x080090f8
 80007a4:	08010004 	.word	0x08010004
 80007a8:	08009110 	.word	0x08009110
 80007ac:	40020000 	.word	0x40020000
 80007b0:	200001b0 	.word	0x200001b0
 80007b4:	0800912c 	.word	0x0800912c

080007b8 <EraseFlash>:

HAL_StatusTypeDef EraseFlash(uint32_t start_sector, uint32_t sector_number){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Sector = start_sector;//FLASH_SECTOR_4
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = sector_number;//3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 80007d6:	f000 fe67 	bl	80014a8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP|FLASH_FLAG_OPERR|FLASH_FLAG_WRPERR|
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <EraseFlash+0x60>)
 80007dc:	22f3      	movs	r2, #243	; 0xf3
 80007de:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
			FLASH_FLAG_PGAERR|FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);
	__disable_irq();
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError)!=HAL_OK){
 80007e4:	f107 0208 	add.w	r2, r7, #8
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 ffbc 	bl	800176c <HAL_FLASHEx_Erase>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d005      	beq.n	8000806 <EraseFlash+0x4e>
  __ASM volatile ("cpsie i" : : : "memory");
 80007fa:	b662      	cpsie	i
}
 80007fc:	bf00      	nop
		__enable_irq();
		HAL_FLASH_Lock();
 80007fe:	f000 fe75 	bl	80014ec <HAL_FLASH_Lock>
		return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e004      	b.n	8000810 <EraseFlash+0x58>
  __ASM volatile ("cpsie i" : : : "memory");
 8000806:	b662      	cpsie	i
}
 8000808:	bf00      	nop
	}
	__enable_irq();
	HAL_FLASH_Lock();
 800080a:	f000 fe6f 	bl	80014ec <HAL_FLASH_Lock>
	return HAL_OK;
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023c00 	.word	0x40023c00

0800081c <func_write_app_info>:

HAL_StatusTypeDef func_write_app_info(void){
 800081c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000820:	b08e      	sub	sp, #56	; 0x38
 8000822:	af00      	add	r7, sp, #0
	app_info_t* info_backup = (app_info_t*)(INFO_BASE+sizeof(app_info_t));
 8000824:	4b61      	ldr	r3, [pc, #388]	; (80009ac <func_write_app_info+0x190>)
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
	printf("backup crc=%d, size=%d, version=%d\r\n", (int)info_backup->crc, (int)info_backup->size, (int)info_backup->version);
 8000828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	4619      	mov	r1, r3
 800082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	461a      	mov	r2, r3
 8000834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	485d      	ldr	r0, [pc, #372]	; (80009b0 <func_write_app_info+0x194>)
 800083a:	f007 fd57 	bl	80082ec <iprintf>
	app_info_t* info_app = (app_info_t*)(INFO_BASE);
 800083e:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <func_write_app_info+0x198>)
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
	printf("app crc=%d, size=%d, version=%d\r\n", (int)info_app->crc, (int)info_app->size, (int)info_app->version);
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	4619      	mov	r1, r3
 8000848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	461a      	mov	r2, r3
 800084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4859      	ldr	r0, [pc, #356]	; (80009b8 <func_write_app_info+0x19c>)
 8000854:	f007 fd4a 	bl	80082ec <iprintf>

	app_info_t info1;
	info1.version = info_backup->version;
 8000858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	603b      	str	r3, [r7, #0]
	info1.size = info_backup->size;
 800085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	607b      	str	r3, [r7, #4]
	info1.crc = info_backup->crc;
 8000864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	60bb      	str	r3, [r7, #8]

	if(EraseFlash(FLASH_SECTOR_3, 1)!=HAL_OK){
 800086a:	2101      	movs	r1, #1
 800086c:	2003      	movs	r0, #3
 800086e:	f7ff ffa3 	bl	80007b8 <EraseFlash>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <func_write_app_info+0x62>
		printf("erase INFO failed\r\n");
 8000878:	4850      	ldr	r0, [pc, #320]	; (80009bc <func_write_app_info+0x1a0>)
 800087a:	f007 fd9d 	bl	80083b8 <puts>
	}
	printf("erase INFO success\r\n");
 800087e:	4850      	ldr	r0, [pc, #320]	; (80009c0 <func_write_app_info+0x1a4>)
 8000880:	f007 fd9a 	bl	80083b8 <puts>

	app_info_t* info_backup1 = (app_info_t*)(INFO_BASE+sizeof(app_info_t));
 8000884:	4b49      	ldr	r3, [pc, #292]	; (80009ac <func_write_app_info+0x190>)
 8000886:	623b      	str	r3, [r7, #32]
	printf("backup crc=%d, size=%d, version=%d\r\n", (int)info_backup1->crc, (int)info_backup1->size, (int)info_backup1->version);
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	4619      	mov	r1, r3
 800088e:	6a3b      	ldr	r3, [r7, #32]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	461a      	mov	r2, r3
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4845      	ldr	r0, [pc, #276]	; (80009b0 <func_write_app_info+0x194>)
 800089a:	f007 fd27 	bl	80082ec <iprintf>
	app_info_t* info_app1 = (app_info_t*)(INFO_BASE);
 800089e:	4b45      	ldr	r3, [pc, #276]	; (80009b4 <func_write_app_info+0x198>)
 80008a0:	61fb      	str	r3, [r7, #28]
	printf("app crc=%d, size=%d, version=%d\r\n", (int)info_app1->crc, (int)info_app1->size, (int)info_app1->version);
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	4619      	mov	r1, r3
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	461a      	mov	r2, r3
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4841      	ldr	r0, [pc, #260]	; (80009b8 <func_write_app_info+0x19c>)
 80008b4:	f007 fd1a 	bl	80082ec <iprintf>

	// write info
	uint32_t* data_ptr = (uint32_t*)&info1;
 80008b8:	463b      	mov	r3, r7
 80008ba:	61bb      	str	r3, [r7, #24]
	printf("start write to flash\r\n");
 80008bc:	4841      	ldr	r0, [pc, #260]	; (80009c4 <func_write_app_info+0x1a8>)
 80008be:	f007 fd7b 	bl	80083b8 <puts>
	uint8_t prog_success = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_FLASH_Unlock();
 80008c8:	f000 fdee 	bl	80014a8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP|FLASH_FLAG_OPERR|FLASH_FLAG_WRPERR|
 80008cc:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <func_write_app_info+0x1ac>)
 80008ce:	22f3      	movs	r2, #243	; 0xf3
 80008d0:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80008d2:	b672      	cpsid	i
}
 80008d4:	bf00      	nop
			FLASH_FLAG_PGAERR|FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);
	__disable_irq();
	for(uint32_t i = 0; i<sizeof(app_info_t)/sizeof(uint32_t); i++){
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
 80008da:	e01e      	b.n	800091a <func_write_app_info+0xfe>
		uint32_t data = data_ptr[i];
 80008dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4413      	add	r3, r2
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	617b      	str	r3, [r7, #20]
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, INFO_BASE+i*4, data)!=HAL_OK){
 80008e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008ea:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80008ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80008f2:	0099      	lsls	r1, r3, #2
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2200      	movs	r2, #0
 80008f8:	4698      	mov	r8, r3
 80008fa:	4691      	mov	r9, r2
 80008fc:	4642      	mov	r2, r8
 80008fe:	464b      	mov	r3, r9
 8000900:	2002      	movs	r0, #2
 8000902:	f000 fd7d 	bl	8001400 <HAL_FLASH_Program>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d003      	beq.n	8000914 <func_write_app_info+0xf8>
			prog_success = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 8000912:	e005      	b.n	8000920 <func_write_app_info+0x104>
	for(uint32_t i = 0; i<sizeof(app_info_t)/sizeof(uint32_t); i++){
 8000914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000916:	3301      	adds	r3, #1
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
 800091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800091c:	2b02      	cmp	r3, #2
 800091e:	d9dd      	bls.n	80008dc <func_write_app_info+0xc0>
		}
	}
	for(uint32_t i = 0; i<sizeof(app_info_t)/sizeof(uint32_t); i++){
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000924:	e01c      	b.n	8000960 <func_write_app_info+0x144>
		uint32_t data = data_ptr[i];
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	4413      	add	r3, r2
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	613b      	str	r3, [r7, #16]
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, INFO_BASE+sizeof(app_info_t)+i*4, data)!=HAL_OK){
 8000932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <func_write_app_info+0x1b0>)
 8000936:	4413      	add	r3, r2
 8000938:	0099      	lsls	r1, r3, #2
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	2200      	movs	r2, #0
 800093e:	461c      	mov	r4, r3
 8000940:	4615      	mov	r5, r2
 8000942:	4622      	mov	r2, r4
 8000944:	462b      	mov	r3, r5
 8000946:	2002      	movs	r0, #2
 8000948:	f000 fd5a 	bl	8001400 <HAL_FLASH_Program>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d003      	beq.n	800095a <func_write_app_info+0x13e>
			prog_success = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 8000958:	e005      	b.n	8000966 <func_write_app_info+0x14a>
	for(uint32_t i = 0; i<sizeof(app_info_t)/sizeof(uint32_t); i++){
 800095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095c:	3301      	adds	r3, #1
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000962:	2b02      	cmp	r3, #2
 8000964:	d9df      	bls.n	8000926 <func_write_app_info+0x10a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000966:	b662      	cpsie	i
}
 8000968:	bf00      	nop
		}
	}
	__enable_irq();
	HAL_FLASH_Lock();
 800096a:	f000 fdbf 	bl	80014ec <HAL_FLASH_Lock>
	if(prog_success != 0){
 800096e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000972:	2b00      	cmp	r3, #0
 8000974:	d004      	beq.n	8000980 <func_write_app_info+0x164>
		printf("program to INFO failed\r\n");
 8000976:	4816      	ldr	r0, [pc, #88]	; (80009d0 <func_write_app_info+0x1b4>)
 8000978:	f007 fd1e 	bl	80083b8 <puts>
		return HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	e010      	b.n	80009a2 <func_write_app_info+0x186>
	}

	printf("write to flash done\r\n");
 8000980:	4814      	ldr	r0, [pc, #80]	; (80009d4 <func_write_app_info+0x1b8>)
 8000982:	f007 fd19 	bl	80083b8 <puts>
	app_info_t* info11 = (app_info_t*)(INFO_BASE);
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <func_write_app_info+0x198>)
 8000988:	60fb      	str	r3, [r7, #12]
	printf("new crc=%d, size=%d, version=%d\r\n", (int)info11->crc, (int)info11->size, (int)info11->version);
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	4619      	mov	r1, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	461a      	mov	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	480f      	ldr	r0, [pc, #60]	; (80009d8 <func_write_app_info+0x1bc>)
 800099c:	f007 fca6 	bl	80082ec <iprintf>
	return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3738      	adds	r7, #56	; 0x38
 80009a6:	46bd      	mov	sp, r7
 80009a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80009ac:	0800c00c 	.word	0x0800c00c
 80009b0:	0800913c 	.word	0x0800913c
 80009b4:	0800c000 	.word	0x0800c000
 80009b8:	08009164 	.word	0x08009164
 80009bc:	08009188 	.word	0x08009188
 80009c0:	0800919c 	.word	0x0800919c
 80009c4:	080091b0 	.word	0x080091b0
 80009c8:	40023c00 	.word	0x40023c00
 80009cc:	02003003 	.word	0x02003003
 80009d0:	080091c8 	.word	0x080091c8
 80009d4:	080091e0 	.word	0x080091e0
 80009d8:	080091f8 	.word	0x080091f8

080009dc <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char * ptr, int len){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t *)ptr, len);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	68b8      	ldr	r0, [r7, #8]
 80009f0:	f006 ff1a 	bl	8007828 <CDC_Transmit_FS>
	return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f000 fa68 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f832 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f000 f8b0 	bl	8000b70 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000a10:	f006 fe38 	bl	8007684 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000a14:	f000 f898 	bl	8000b48 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_FLASH_Unlock();
//  EraseFlash(FLASH_SECTOR_3, 9);
//  HAL_FLASH_Lock();
  HAL_Delay(2000);
 8000a18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a1c:	f000 fb02 	bl	8001024 <HAL_Delay>
  bootFunction();
 8000a20:	f7ff fdba 	bl	8000598 <bootFunction>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("%d, %d\r\n", (*(uint32_t*)(APP_BASE+4)), (*(uint32_t*)(APP_BASE)));
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <main+0x58>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <main+0x5c>)
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <main+0x60>)
 8000a30:	f007 fc5c 	bl	80082ec <iprintf>
	  printf("%d, %d\r\n", (*(uint32_t*)(BACKUP_BASE+4)), (*(uint32_t*)(BACKUP_BASE)));
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <main+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <main+0x68>)
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4808      	ldr	r0, [pc, #32]	; (8000a60 <main+0x60>)
 8000a40:	f007 fc54 	bl	80082ec <iprintf>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <main+0x6c>)
 8000a4a:	f001 fa62 	bl	8001f12 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a52:	f000 fae7 	bl	8001024 <HAL_Delay>
	  printf("%d, %d\r\n", (*(uint32_t*)(APP_BASE+4)), (*(uint32_t*)(APP_BASE)));
 8000a56:	e7e5      	b.n	8000a24 <main+0x24>
 8000a58:	08010004 	.word	0x08010004
 8000a5c:	08010000 	.word	0x08010000
 8000a60:	0800921c 	.word	0x0800921c
 8000a64:	08060004 	.word	0x08060004
 8000a68:	08060000 	.word	0x08060000
 8000a6c:	40020000 	.word	0x40020000

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fd7a 	bl	8008578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <SystemClock_Config+0xd4>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ada:	2310      	movs	r3, #16
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000ae8:	2306      	movs	r3, #6
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000aec:	2348      	movs	r3, #72	; 0x48
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000af4:	2303      	movs	r3, #3
 8000af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 fcfb 	bl	80034f8 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b08:	f000 f884 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 ff5e 	bl	80039e8 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b32:	f000 f86f 	bl	8000c14 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_CRC_Init+0x20>)
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <MX_CRC_Init+0x24>)
 8000b50:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_CRC_Init+0x20>)
 8000b54:	f000 fbdd 	bl	8001312 <HAL_CRC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b5e:	f000 f859 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000017c 	.word	0x2000017c
 8000b6c:	40023000 	.word	0x40023000

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_GPIO_Init+0x9c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <MX_GPIO_Init+0x9c>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_GPIO_Init+0x9c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_GPIO_Init+0x9c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <MX_GPIO_Init+0x9c>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_GPIO_Init+0x9c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_GPIO_Init+0x9c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <MX_GPIO_Init+0x9c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_GPIO_Init+0x9c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <MX_GPIO_Init+0xa0>)
 8000be2:	f001 f97d 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_GPIO_Init+0xa0>)
 8000c00:	f000 fed6 	bl	80019b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_CRC_MspInit+0x3c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d10d      	bne.n	8000c9e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_CRC_MspInit+0x40>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <HAL_CRC_MspInit+0x40>)
 8000c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <HAL_CRC_MspInit+0x40>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023000 	.word	0x40023000
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_CRC_MspDeInit+0x2c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d105      	bne.n	8000cd2 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <HAL_CRC_MspDeInit+0x30>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_CRC_MspDeInit+0x30>)
 8000ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023000 	.word	0x40023000
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f956 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <OTG_FS_IRQHandler+0x10>)
 8000d42:	f001 faac 	bl	800229e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000168c 	.word	0x2000168c

08000d50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e00a      	b.n	8000d78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d62:	f3af 8000 	nop.w
 8000d66:	4601      	mov	r1, r0
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf0      	blt.n	8000d62 <_read+0x12>
  }

  return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db2:	605a      	str	r2, [r3, #4]
  return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_isatty>:

int _isatty(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f007 fbf6 	bl	8008614 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000184 	.word	0x20000184
 8000e5c:	20001f08 	.word	0x20001f08

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eae:	f7ff ffd7 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f007 fbb5 	bl	8008620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fda3 	bl	8000a00 <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000ec8:	080092c4 	.word	0x080092c4
  ldr r2, =_sbss
 8000ecc:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000ed0:	20001f04 	.word	0x20001f04

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f9b7 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	200f      	movs	r0, #15
 8000f08:	f000 f83c 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fe88 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_DeInit+0x54>)
 8000f22:	f04f 32ff 	mov.w	r2, #4294967295
 8000f26:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_DeInit+0x54>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_DeInit+0x54>)
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_DeInit+0x54>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_DeInit+0x54>)
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f42:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_DeInit+0x54>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_DeInit+0x54>)
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_DeInit+0x54>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_DeInit+0x54>)
 8000f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_DeInit+0x54>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f66:	f000 f805 	bl	8000f74 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f9a9 	bl	80012fa <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 f963 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	20000188 	.word	0x20000188

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000188 	.word	0x20000188

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008

0800106c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_SuspendTick+0x1c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_SuspendTick+0x1c>)
 8001076:	f023 0302 	bic.w	r3, r3, #2
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <__NVIC_SetPriorityGrouping>:
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_DisableIRQ>:
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db12      	blt.n	8001164 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	490a      	ldr	r1, [pc, #40]	; (8001170 <__NVIC_DisableIRQ+0x44>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	3320      	adds	r3, #32
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001158:	f3bf 8f4f 	dsb	sy
}
 800115c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800115e:	f3bf 8f6f 	isb	sy
}
 8001162:	bf00      	nop
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff05 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff1a 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5d 	bl	8001174 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff0d 	bl	80010f0 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff1d 	bl	800112c <__NVIC_DisableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff94 	bl	8001230 <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e00e      	b.n	8001342 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	795b      	ldrb	r3, [r3, #5]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fc9b 	bl	8000c70 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e022      	b.n	80013a2 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	795b      	ldrb	r3, [r3, #5]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d101      	bne.n	800136a <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8001366:	2302      	movs	r3, #2
 8001368:	e01b      	b.n	80013a2 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2202      	movs	r2, #2
 800136e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fc90 	bl	8000cb4 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2202      	movs	r2, #2
 80013be:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e00a      	b.n	80013dc <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	441a      	add	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3f0      	bcc.n	80013c6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2201      	movs	r2, #1
 80013f0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80013f2:	693b      	ldr	r3, [r7, #16]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <HAL_FLASH_Program+0xa0>)
 8001414:	7e1b      	ldrb	r3, [r3, #24]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_FLASH_Program+0x1e>
 800141a:	2302      	movs	r3, #2
 800141c:	e03b      	b.n	8001496 <HAL_FLASH_Program+0x96>
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_FLASH_Program+0xa0>)
 8001420:	2201      	movs	r2, #1
 8001422:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001428:	f000 f870 	bl	800150c <FLASH_WaitForLastOperation>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d12b      	bne.n	800148e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800143c:	783b      	ldrb	r3, [r7, #0]
 800143e:	4619      	mov	r1, r3
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f000 f91b 	bl	800167c <FLASH_Program_Byte>
 8001446:	e016      	b.n	8001476 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d105      	bne.n	800145a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800144e:	883b      	ldrh	r3, [r7, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f000 f8ee 	bl	8001634 <FLASH_Program_HalfWord>
 8001458:	e00d      	b.n	8001476 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d105      	bne.n	800146c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	68b8      	ldr	r0, [r7, #8]
 8001466:	f000 f8c3 	bl	80015f0 <FLASH_Program_Word>
 800146a:	e004      	b.n	8001476 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800146c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001470:	68b8      	ldr	r0, [r7, #8]
 8001472:	f000 f88b 	bl	800158c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001476:	f24c 3050 	movw	r0, #50000	; 0xc350
 800147a:	f000 f847 	bl	800150c <FLASH_WaitForLastOperation>
 800147e:	4603      	mov	r3, r0
 8001480:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_FLASH_Program+0xa4>)
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_FLASH_Program+0xa4>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_FLASH_Program+0xa0>)
 8001490:	2200      	movs	r2, #0
 8001492:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001494:	7dfb      	ldrb	r3, [r7, #23]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000018c 	.word	0x2000018c
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_FLASH_Unlock+0x38>)
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	da0b      	bge.n	80014d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_FLASH_Unlock+0x38>)
 80014bc:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_FLASH_Unlock+0x3c>)
 80014be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <HAL_FLASH_Unlock+0x38>)
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_FLASH_Unlock+0x40>)
 80014c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_FLASH_Unlock+0x38>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da01      	bge.n	80014d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80014d2:	79fb      	ldrb	r3, [r7, #7]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	45670123 	.word	0x45670123
 80014e8:	cdef89ab 	.word	0xcdef89ab

080014ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_FLASH_Lock+0x1c>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_FLASH_Lock+0x1c>)
 80014f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40023c00 	.word	0x40023c00

0800150c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <FLASH_WaitForLastOperation+0x78>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800151e:	f7ff fd75 	bl	800100c <HAL_GetTick>
 8001522:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001524:	e010      	b.n	8001548 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d00c      	beq.n	8001548 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <FLASH_WaitForLastOperation+0x38>
 8001534:	f7ff fd6a 	bl	800100c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	d201      	bcs.n	8001548 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e019      	b.n	800157c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <FLASH_WaitForLastOperation+0x7c>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e8      	bne.n	8001526 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <FLASH_WaitForLastOperation+0x7c>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <FLASH_WaitForLastOperation+0x7c>)
 8001562:	2201      	movs	r2, #1
 8001564:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <FLASH_WaitForLastOperation+0x7c>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001572:	f000 f8a5 	bl	80016c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
  
}  
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000018c 	.word	0x2000018c
 8001588:	40023c00 	.word	0x40023c00

0800158c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <FLASH_Program_DoubleWord+0x60>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a13      	ldr	r2, [pc, #76]	; (80015ec <FLASH_Program_DoubleWord+0x60>)
 800159e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <FLASH_Program_DoubleWord+0x60>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	4a10      	ldr	r2, [pc, #64]	; (80015ec <FLASH_Program_DoubleWord+0x60>)
 80015aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <FLASH_Program_DoubleWord+0x60>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <FLASH_Program_DoubleWord+0x60>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80015c2:	f3bf 8f6f 	isb	sy
}
 80015c6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80015c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	000a      	movs	r2, r1
 80015d6:	2300      	movs	r3, #0
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	3104      	adds	r1, #4
 80015dc:	4613      	mov	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40023c00 	.word	0x40023c00

080015f0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <FLASH_Program_Word+0x40>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <FLASH_Program_Word+0x40>)
 8001600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001604:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <FLASH_Program_Word+0x40>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <FLASH_Program_Word+0x40>)
 800160c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001610:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <FLASH_Program_Word+0x40>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <FLASH_Program_Word+0x40>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40023c00 	.word	0x40023c00

08001634 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <FLASH_Program_HalfWord+0x44>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <FLASH_Program_HalfWord+0x44>)
 8001646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800164a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <FLASH_Program_HalfWord+0x44>)
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	4a09      	ldr	r2, [pc, #36]	; (8001678 <FLASH_Program_HalfWord+0x44>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <FLASH_Program_HalfWord+0x44>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <FLASH_Program_HalfWord+0x44>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	801a      	strh	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <FLASH_Program_Byte+0x40>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <FLASH_Program_Byte+0x40>)
 800168e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001692:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <FLASH_Program_Byte+0x40>)
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <FLASH_Program_Byte+0x40>)
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <FLASH_Program_Byte+0x40>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <FLASH_Program_Byte+0x40>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	701a      	strb	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023c00 	.word	0x40023c00

080016c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	4a23      	ldr	r2, [pc, #140]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 80016da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 80016de:	2210      	movs	r2, #16
 80016e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 80016f8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 80016fc:	2220      	movs	r2, #32
 80016fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 8001716:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 8001734:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f043 0320 	orr.w	r3, r3, #32
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <FLASH_SetErrorCode+0xa8>)
 8001752:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <FLASH_SetErrorCode+0xa4>)
 8001756:	2202      	movs	r2, #2
 8001758:	60da      	str	r2, [r3, #12]
  }
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40023c00 	.word	0x40023c00
 8001768:	2000018c 	.word	0x2000018c

0800176c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800177e:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_FLASHEx_Erase+0xd8>)
 8001780:	7e1b      	ldrb	r3, [r3, #24]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_FLASHEx_Erase+0x1e>
 8001786:	2302      	movs	r3, #2
 8001788:	e058      	b.n	800183c <HAL_FLASHEx_Erase+0xd0>
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_FLASHEx_Erase+0xd8>)
 800178c:	2201      	movs	r2, #1
 800178e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001790:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001794:	f7ff feba 	bl	800150c <FLASH_WaitForLastOperation>
 8001798:	4603      	mov	r3, r0
 800179a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d148      	bne.n	8001834 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d115      	bne.n	80017de <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4619      	mov	r1, r3
 80017be:	4610      	mov	r0, r2
 80017c0:	f000 f844 	bl	800184c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017c8:	f7ff fea0 	bl	800150c <FLASH_WaitForLastOperation>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_FLASHEx_Erase+0xdc>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <HAL_FLASHEx_Erase+0xdc>)
 80017d6:	f023 0304 	bic.w	r3, r3, #4
 80017da:	6113      	str	r3, [r2, #16]
 80017dc:	e028      	b.n	8001830 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	e01c      	b.n	8001820 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4619      	mov	r1, r3
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f000 f850 	bl	8001894 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017f8:	f7ff fe88 	bl	800150c <FLASH_WaitForLastOperation>
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_FLASHEx_Erase+0xdc>)
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_FLASHEx_Erase+0xdc>)
 8001806:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800180a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	601a      	str	r2, [r3, #0]
          break;
 8001818:	e00a      	b.n	8001830 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3301      	adds	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4413      	add	r3, r2
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3da      	bcc.n	80017e6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001830:	f000 f878 	bl	8001924 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_FLASHEx_Erase+0xd8>)
 8001836:	2200      	movs	r2, #0
 8001838:	761a      	strb	r2, [r3, #24]

  return status;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000018c 	.word	0x2000018c
 8001848:	40023c00 	.word	0x40023c00

0800184c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <FLASH_MassErase+0x44>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <FLASH_MassErase+0x44>)
 800185e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001862:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <FLASH_MassErase+0x44>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	4a09      	ldr	r2, [pc, #36]	; (8001890 <FLASH_MassErase+0x44>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <FLASH_MassErase+0x44>)
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	4313      	orrs	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <FLASH_MassErase+0x44>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6113      	str	r3, [r2, #16]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00

08001894 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e010      	b.n	80018d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d103      	bne.n	80018be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80018b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e009      	b.n	80018d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d103      	bne.n	80018cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80018c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e002      	b.n	80018d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80018cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 80018d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	490f      	ldr	r1, [pc, #60]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 80018f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4313      	orrs	r3, r2
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <FLASH_Erase_Sector+0x8c>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001912:	6113      	str	r3, [r2, #16]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40023c00 	.word	0x40023c00

08001924 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <FLASH_FlushCaches+0x88>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001930:	2b00      	cmp	r3, #0
 8001932:	d017      	beq.n	8001964 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <FLASH_FlushCaches+0x88>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <FLASH_FlushCaches+0x88>)
 800193a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800193e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <FLASH_FlushCaches+0x88>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <FLASH_FlushCaches+0x88>)
 8001946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <FLASH_FlushCaches+0x88>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <FLASH_FlushCaches+0x88>)
 8001952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001956:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <FLASH_FlushCaches+0x88>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a13      	ldr	r2, [pc, #76]	; (80019ac <FLASH_FlushCaches+0x88>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <FLASH_FlushCaches+0x88>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d017      	beq.n	80019a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <FLASH_FlushCaches+0x88>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <FLASH_FlushCaches+0x88>)
 8001976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800197a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <FLASH_FlushCaches+0x88>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <FLASH_FlushCaches+0x88>)
 8001982:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <FLASH_FlushCaches+0x88>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <FLASH_FlushCaches+0x88>)
 800198e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001992:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <FLASH_FlushCaches+0x88>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <FLASH_FlushCaches+0x88>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199e:	6013      	str	r3, [r2, #0]
  }
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e16b      	b.n	8001ca4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 815a 	bne.w	8001c9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80b4 	beq.w	8001c9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b60      	ldr	r3, [pc, #384]	; (8001cbc <HAL_GPIO_Init+0x30c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a5f      	ldr	r2, [pc, #380]	; (8001cbc <HAL_GPIO_Init+0x30c>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <HAL_GPIO_Init+0x30c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b52:	4a5b      	ldr	r2, [pc, #364]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_GPIO_Init+0x314>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02b      	beq.n	8001bd6 <HAL_GPIO_Init+0x226>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_GPIO_Init+0x318>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d025      	beq.n	8001bd2 <HAL_GPIO_Init+0x222>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_GPIO_Init+0x31c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x21e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4f      	ldr	r2, [pc, #316]	; (8001cd0 <HAL_GPIO_Init+0x320>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x21a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4e      	ldr	r2, [pc, #312]	; (8001cd4 <HAL_GPIO_Init+0x324>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x216>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4d      	ldr	r2, [pc, #308]	; (8001cd8 <HAL_GPIO_Init+0x328>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x212>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4c      	ldr	r2, [pc, #304]	; (8001cdc <HAL_GPIO_Init+0x32c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_GPIO_Init+0x330>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x20a>
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	e00e      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bba:	2308      	movs	r3, #8
 8001bbc:	e00c      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	e00a      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	e008      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_GPIO_Init+0x228>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f002 0203 	and.w	r2, r2, #3
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4093      	lsls	r3, r2
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be8:	4935      	ldr	r1, [pc, #212]	; (8001cc0 <HAL_GPIO_Init+0x310>)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1a:	4a32      	ldr	r2, [pc, #200]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c20:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_GPIO_Init+0x334>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b0f      	cmp	r3, #15
 8001ca8:	f67f ae90 	bls.w	80019cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40013800 	.word	0x40013800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	40021c00 	.word	0x40021c00
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e0cd      	b.n	8001ea0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d04:	2201      	movs	r2, #1
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	f040 80bd 	bne.w	8001e9a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001d20:	4a65      	ldr	r2, [pc, #404]	; (8001eb8 <HAL_GPIO_DeInit+0x1d0>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a5d      	ldr	r2, [pc, #372]	; (8001ebc <HAL_GPIO_DeInit+0x1d4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02b      	beq.n	8001da2 <HAL_GPIO_DeInit+0xba>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a5c      	ldr	r2, [pc, #368]	; (8001ec0 <HAL_GPIO_DeInit+0x1d8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d025      	beq.n	8001d9e <HAL_GPIO_DeInit+0xb6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a5b      	ldr	r2, [pc, #364]	; (8001ec4 <HAL_GPIO_DeInit+0x1dc>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01f      	beq.n	8001d9a <HAL_GPIO_DeInit+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a5a      	ldr	r2, [pc, #360]	; (8001ec8 <HAL_GPIO_DeInit+0x1e0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_DeInit+0xae>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a59      	ldr	r2, [pc, #356]	; (8001ecc <HAL_GPIO_DeInit+0x1e4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_DeInit+0xaa>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a58      	ldr	r2, [pc, #352]	; (8001ed0 <HAL_GPIO_DeInit+0x1e8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_DeInit+0xa6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a57      	ldr	r2, [pc, #348]	; (8001ed4 <HAL_GPIO_DeInit+0x1ec>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_DeInit+0xa2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <HAL_GPIO_DeInit+0x1f0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_DeInit+0x9e>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e00e      	b.n	8001da4 <HAL_GPIO_DeInit+0xbc>
 8001d86:	2308      	movs	r3, #8
 8001d88:	e00c      	b.n	8001da4 <HAL_GPIO_DeInit+0xbc>
 8001d8a:	2306      	movs	r3, #6
 8001d8c:	e00a      	b.n	8001da4 <HAL_GPIO_DeInit+0xbc>
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_DeInit+0xbc>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_DeInit+0xbc>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_DeInit+0xbc>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_DeInit+0xbc>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_DeInit+0xbc>
 8001da2:	2300      	movs	r3, #0
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d132      	bne.n	8001e1a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001db4:	4b49      	ldr	r3, [pc, #292]	; (8001edc <HAL_GPIO_DeInit+0x1f4>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4947      	ldr	r1, [pc, #284]	; (8001edc <HAL_GPIO_DeInit+0x1f4>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001dc2:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_GPIO_DeInit+0x1f4>)
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4944      	ldr	r1, [pc, #272]	; (8001edc <HAL_GPIO_DeInit+0x1f4>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001dd0:	4b42      	ldr	r3, [pc, #264]	; (8001edc <HAL_GPIO_DeInit+0x1f4>)
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	4940      	ldr	r1, [pc, #256]	; (8001edc <HAL_GPIO_DeInit+0x1f4>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001dde:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_GPIO_DeInit+0x1f4>)
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	493d      	ldr	r1, [pc, #244]	; (8001edc <HAL_GPIO_DeInit+0x1f4>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	220f      	movs	r2, #15
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001dfc:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <HAL_GPIO_DeInit+0x1d0>)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	482a      	ldr	r0, [pc, #168]	; (8001eb8 <HAL_GPIO_DeInit+0x1d0>)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	400a      	ands	r2, r1
 8001e14:	3302      	adds	r3, #2
 8001e16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2103      	movs	r1, #3
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	08da      	lsrs	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3208      	adds	r2, #8
 8001e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	08d2      	lsrs	r2, r2, #3
 8001e50:	4019      	ands	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2103      	movs	r1, #3
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	2101      	movs	r1, #1
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2103      	movs	r1, #3
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	401a      	ands	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	f67f af2e 	bls.w	8001d04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	371c      	adds	r7, #28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40013800 	.word	0x40013800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020c00 	.word	0x40020c00
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40021400 	.word	0x40021400
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	40021c00 	.word	0x40021c00
 8001edc:	40013c00 	.word	0x40013c00

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001efc:	e003      	b.n	8001f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	041a      	lsls	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f24:	887a      	ldrh	r2, [r7, #2]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	041a      	lsls	r2, r3, #16
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	400b      	ands	r3, r1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f48:	b08f      	sub	sp, #60	; 0x3c
 8001f4a:	af0a      	add	r7, sp, #40	; 0x28
 8001f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e10f      	b.n	8002178 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f005 fda0 	bl	8007ab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 fff3 	bl	8003f82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	687e      	ldr	r6, [r7, #4]
 8001fa4:	466d      	mov	r5, sp
 8001fa6:	f106 0410 	add.w	r4, r6, #16
 8001faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fba:	1d33      	adds	r3, r6, #4
 8001fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f001 feca 	bl	8003d58 <USB_CoreInit>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0d0      	b.n	8002178 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 ffe1 	bl	8003fa4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e04a      	b.n	800207e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	333d      	adds	r3, #61	; 0x3d
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	333c      	adds	r3, #60	; 0x3c
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	b298      	uxth	r0, r3
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3344      	adds	r3, #68	; 0x44
 8002024:	4602      	mov	r2, r0
 8002026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3340      	adds	r3, #64	; 0x40
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3348      	adds	r3, #72	; 0x48
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	334c      	adds	r3, #76	; 0x4c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3354      	adds	r3, #84	; 0x54
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	3301      	adds	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d3af      	bcc.n	8001fe8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e044      	b.n	8002118 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	3301      	adds	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3b5      	bcc.n	800208e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	687e      	ldr	r6, [r7, #4]
 800212a:	466d      	mov	r5, sp
 800212c:	f106 0410 	add.w	r4, r6, #16
 8002130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002140:	1d33      	adds	r3, r6, #4
 8002142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002144:	6838      	ldr	r0, [r7, #0]
 8002146:	f001 ff79 	bl	800403c <USB_DevInit>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e00d      	b.n	8002178 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f003 f917 	bl	80053a4 <USB_DevDisconnect>

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002180 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e015      	b.n	80021be <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2203      	movs	r2, #3
 8002196:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 f86a 	bl	8005278 <USB_StopDevice>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e007      	b.n	80021be <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f005 fcd6 	bl	8007b60 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_PCD_Start+0x1c>
 80021de:	2302      	movs	r3, #2
 80021e0:	e020      	b.n	8002224 <HAL_PCD_Start+0x5e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d109      	bne.n	8002206 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fea8 	bl	8003f60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f003 f8a4 	bl	8005362 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_PCD_Stop+0x1c>
 8002244:	2302      	movs	r3, #2
 8002246:	e026      	b.n	8002296 <HAL_PCD_Stop+0x6a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f001 fe94 	bl	8003f82 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f003 f8a0 	bl	80053a4 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2110      	movs	r1, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f002 f84a 	bl	8004304 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	2b01      	cmp	r3, #1
 8002276:	d109      	bne.n	800228c <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800227c:	2b01      	cmp	r3, #1
 800227e:	d005      	beq.n	800228c <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800229e:	b590      	push	{r4, r7, lr}
 80022a0:	b08d      	sub	sp, #52	; 0x34
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 f929 	bl	800550c <USB_GetMode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 848a 	bne.w	8002bd6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 f88d 	bl	80053e6 <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8480 	beq.w	8002bd4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 f87a 	bl	80053e6 <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d107      	bne.n	800230c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f002 0202 	and.w	r2, r2, #2
 800230a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 f868 	bl	80053e6 <USB_ReadInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b10      	cmp	r3, #16
 800231e:	d161      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0210 	bic.w	r2, r2, #16
 800232e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f003 020f 	and.w	r2, r3, #15
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	0c5b      	lsrs	r3, r3, #17
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	2b02      	cmp	r3, #2
 800235a:	d124      	bne.n	80023a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d035      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	6a38      	ldr	r0, [r7, #32]
 800237c:	f002 fe50 	bl	8005020 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800238c:	441a      	add	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239e:	441a      	add	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	621a      	str	r2, [r3, #32]
 80023a4:	e016      	b.n	80023d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	0c5b      	lsrs	r3, r3, #17
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d110      	bne.n	80023d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023b8:	2208      	movs	r2, #8
 80023ba:	4619      	mov	r1, r3
 80023bc:	6a38      	ldr	r0, [r7, #32]
 80023be:	f002 fe2f 	bl	8005020 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ce:	441a      	add	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0210 	orr.w	r2, r2, #16
 80023e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f002 fffc 	bl	80053e6 <USB_ReadInterrupts>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023f8:	f040 80a7 	bne.w	800254a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f003 f801 	bl	800540c <USB_ReadDevAllOutEpInterrupt>
 800240a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800240c:	e099      	b.n	8002542 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 808e 	beq.w	8002536 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f003 f825 	bl	8005474 <USB_ReadDevOutEPInterrupt>
 800242a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00c      	beq.n	8002450 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	4413      	add	r3, r2
 800243e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002442:	461a      	mov	r2, r3
 8002444:	2301      	movs	r3, #1
 8002446:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fec2 	bl	80031d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	461a      	mov	r2, r3
 8002468:	2308      	movs	r3, #8
 800246a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800246c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 ff98 	bl	80033a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248a:	461a      	mov	r2, r3
 800248c:	2310      	movs	r3, #16
 800248e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d030      	beq.n	80024fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d109      	bne.n	80024ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	78db      	ldrb	r3, [r3, #3]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d108      	bne.n	80024ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2200      	movs	r2, #0
 80024dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f005 fc0d 	bl	8007d04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f6:	461a      	mov	r2, r3
 80024f8:	2302      	movs	r3, #2
 80024fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002512:	461a      	mov	r2, r3
 8002514:	2320      	movs	r3, #32
 8002516:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252e:	461a      	mov	r2, r3
 8002530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002534:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3301      	adds	r3, #1
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	f47f af62 	bne.w	800240e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f002 ff49 	bl	80053e6 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800255e:	f040 80db 	bne.w	8002718 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f002 ff6a 	bl	8005440 <USB_ReadDevAllInEpInterrupt>
 800256c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002572:	e0cd      	b.n	8002710 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80c2 	beq.w	8002704 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f002 ff90 	bl	80054b0 <USB_ReadDevInEPInterrupt>
 8002590:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d057      	beq.n	800264c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	2201      	movs	r2, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69f9      	ldr	r1, [r7, #28]
 80025b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025bc:	4013      	ands	r3, r2
 80025be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025cc:	461a      	mov	r2, r3
 80025ce:	2301      	movs	r3, #1
 80025d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d132      	bne.n	8002640 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	334c      	adds	r3, #76	; 0x4c
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4403      	add	r3, r0
 80025fa:	3348      	adds	r3, #72	; 0x48
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4419      	add	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4403      	add	r3, r0
 800260e:	334c      	adds	r3, #76	; 0x4c
 8002610:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	2b00      	cmp	r3, #0
 8002616:	d113      	bne.n	8002640 <HAL_PCD_IRQHandler+0x3a2>
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3354      	adds	r3, #84	; 0x54
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002638:	461a      	mov	r2, r3
 800263a:	2101      	movs	r1, #1
 800263c:	f002 ff98 	bl	8005570 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4619      	mov	r1, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f005 fad7 	bl	8007bfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002662:	461a      	mov	r2, r3
 8002664:	2308      	movs	r3, #8
 8002666:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267e:	461a      	mov	r2, r3
 8002680:	2310      	movs	r3, #16
 8002682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269a:	461a      	mov	r2, r3
 800269c:	2340      	movs	r3, #64	; 0x40
 800269e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d023      	beq.n	80026f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ac:	6a38      	ldr	r0, [r7, #32]
 80026ae:	f001 fe29 	bl	8004304 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	3338      	adds	r3, #56	; 0x38
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	3304      	adds	r3, #4
 80026c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	78db      	ldrb	r3, [r3, #3]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2200      	movs	r2, #0
 80026d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f005 fb24 	bl	8007d28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ec:	461a      	mov	r2, r3
 80026ee:	2302      	movs	r3, #2
 80026f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fcdb 	bl	80030ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	3301      	adds	r3, #1
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	f47f af2e 	bne.w	8002574 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f002 fe62 	bl	80053e6 <USB_ReadInterrupts>
 8002722:	4603      	mov	r3, r0
 8002724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800272c:	d122      	bne.n	8002774 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002748:	2b01      	cmp	r3, #1
 800274a:	d108      	bne.n	800275e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002754:	2100      	movs	r1, #0
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fec2 	bl	80034e0 <HAL_PCDEx_LPM_Callback>
 800275c:	e002      	b.n	8002764 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f005 fac2 	bl	8007ce8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fe34 	bl	80053e6 <USB_ReadInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002788:	d112      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d102      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f005 fa7e 	bl	8007c9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 fe16 	bl	80053e6 <USB_ReadInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c4:	f040 80b7 	bne.w	8002936 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2110      	movs	r1, #16
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fd8e 	bl	8004304 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ec:	e046      	b.n	800287c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027fa:	461a      	mov	r2, r3
 80027fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002800:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002812:	0151      	lsls	r1, r2, #5
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	440a      	add	r2, r1
 8002818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800281c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002820:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282e:	461a      	mov	r2, r3
 8002830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002834:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002846:	0151      	lsls	r1, r2, #5
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	440a      	add	r2, r1
 800284c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002850:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002854:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002866:	0151      	lsls	r1, r2, #5
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	440a      	add	r2, r1
 800286c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002870:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002874:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	3301      	adds	r3, #1
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002882:	429a      	cmp	r2, r3
 8002884:	d3b3      	bcc.n	80027ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002894:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002898:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d016      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b2:	f043 030b 	orr.w	r3, r3, #11
 80028b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c8:	f043 030b 	orr.w	r3, r3, #11
 80028cc:	6453      	str	r3, [r2, #68]	; 0x44
 80028ce:	e015      	b.n	80028fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f6:	f043 030b 	orr.w	r3, r3, #11
 80028fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800290a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800290e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002920:	461a      	mov	r2, r3
 8002922:	f002 fe25 	bl	8005570 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f002 fd53 	bl	80053e6 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294a:	d124      	bne.n	8002996 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f002 fde9 	bl	8005528 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f001 fd4f 	bl	80043fe <USB_GetDevSpeed>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681c      	ldr	r4, [r3, #0]
 800296c:	f001 f9e8 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8002970:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	4620      	mov	r0, r4
 800297c:	f001 fa4e 	bl	8003e1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f005 f962 	bl	8007c4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002994:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f002 fd23 	bl	80053e6 <USB_ReadInterrupts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d10a      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f005 f93f 	bl	8007c2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f002 0208 	and.w	r2, r2, #8
 80029be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 fd0e 	bl	80053e6 <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b80      	cmp	r3, #128	; 0x80
 80029d2:	d122      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e0:	2301      	movs	r3, #1
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
 80029e4:	e014      	b.n	8002a10 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d105      	bne.n	8002a0a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fb27 	bl	8003058 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d3e5      	bcc.n	80029e6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f002 fce1 	bl	80053e6 <USB_ReadInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a2e:	d13b      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a30:	2301      	movs	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	e02b      	b.n	8002a8e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3340      	adds	r3, #64	; 0x40
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d115      	bne.n	8002a88 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da12      	bge.n	8002a88 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	333f      	adds	r3, #63	; 0x3f
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fae8 	bl	8003058 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d3ce      	bcc.n	8002a36 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 fc9a 	bl	80053e6 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002abc:	d155      	bne.n	8002b6a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002abe:	2301      	movs	r3, #1
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	e045      	b.n	8002b50 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d12e      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da2b      	bge.n	8002b4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002afe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d121      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b46:	6053      	str	r3, [r2, #4]
            break;
 8002b48:	e007      	b.n	8002b5a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d3b4      	bcc.n	8002ac4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fc39 	bl	80053e6 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7e:	d10a      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f005 f8e3 	bl	8007d4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 fc23 	bl	80053e6 <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d115      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f005 f8d3 	bl	8007d68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	e000      	b.n	8002bd6 <HAL_PCD_IRQHandler+0x938>
      return;
 8002bd4:	bf00      	nop
    }
  }
}
 8002bd6:	3734      	adds	r7, #52	; 0x34
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}

08002bdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_PCD_SetAddress+0x1a>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e013      	b.n	8002c1e <HAL_PCD_SetAddress+0x42>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 fb81 	bl	8005316 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	4608      	mov	r0, r1
 8002c30:	4611      	mov	r1, r2
 8002c32:	461a      	mov	r2, r3
 8002c34:	4603      	mov	r3, r0
 8002c36:	70fb      	strb	r3, [r7, #3]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	803b      	strh	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	da0f      	bge.n	8002c6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	f003 020f 	and.w	r2, r3, #15
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	3338      	adds	r3, #56	; 0x38
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	705a      	strb	r2, [r3, #1]
 8002c6a:	e00f      	b.n	8002c8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c98:	883a      	ldrh	r2, [r7, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	78ba      	ldrb	r2, [r7, #2]
 8002ca2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cb6:	78bb      	ldrb	r3, [r7, #2]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d102      	bne.n	8002cc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_PCD_EP_Open+0xaa>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e00e      	b.n	8002cee <HAL_PCD_EP_Open+0xc8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68f9      	ldr	r1, [r7, #12]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 fbb2 	bl	8004448 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cec:	7afb      	ldrb	r3, [r7, #11]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da0f      	bge.n	8002d2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	f003 020f 	and.w	r2, r3, #15
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	3338      	adds	r3, #56	; 0x38
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	705a      	strb	r2, [r3, #1]
 8002d28:	e00f      	b.n	8002d4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	f003 020f 	and.w	r2, r3, #15
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_PCD_EP_Close+0x6e>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e00e      	b.n	8002d82 <HAL_PCD_EP_Close+0x8c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fbf0 	bl	8004558 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	460b      	mov	r3, r1
 8002d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	3304      	adds	r3, #4
 8002db2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d102      	bne.n	8002de6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002de6:	7afb      	ldrb	r3, [r7, #11]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	f001 fecf 	bl	8004ba0 <USB_EP0StartXfer>
 8002e02:	e008      	b.n	8002e16 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6979      	ldr	r1, [r7, #20]
 8002e12:	f001 fc7d 	bl	8004710 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 020f 	and.w	r2, r3, #15
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	3338      	adds	r3, #56	; 0x38
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e90:	7afb      	ldrb	r3, [r7, #11]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6979      	ldr	r1, [r7, #20]
 8002ec2:	f001 fe6d 	bl	8004ba0 <USB_EP0StartXfer>
 8002ec6:	e008      	b.n	8002eda <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6979      	ldr	r1, [r7, #20]
 8002ed6:	f001 fc1b 	bl	8004710 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 020f 	and.w	r2, r3, #15
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d901      	bls.n	8002f02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e050      	b.n	8002fa4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	da0f      	bge.n	8002f2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 020f 	and.w	r2, r3, #15
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	3338      	adds	r3, #56	; 0x38
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3304      	adds	r3, #4
 8002f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	705a      	strb	r2, [r3, #1]
 8002f28:	e00d      	b.n	8002f46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_PCD_EP_SetStall+0x82>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e01e      	b.n	8002fa4 <HAL_PCD_EP_SetStall+0xc0>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 f8ab 	bl	80050d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	b2d9      	uxtb	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f94:	461a      	mov	r2, r3
 8002f96:	f002 faeb 	bl	8005570 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 020f 	and.w	r2, r3, #15
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d901      	bls.n	8002fca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e042      	b.n	8003050 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da0f      	bge.n	8002ff2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	3338      	adds	r3, #56	; 0x38
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	705a      	strb	r2, [r3, #1]
 8002ff0:	e00f      	b.n	8003012 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 020f 	and.w	r2, r3, #15
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	3304      	adds	r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	b2da      	uxtb	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_PCD_EP_ClrStall+0x86>
 800302e:	2302      	movs	r3, #2
 8003030:	e00e      	b.n	8003050 <HAL_PCD_EP_ClrStall+0xa4>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68f9      	ldr	r1, [r7, #12]
 8003040:	4618      	mov	r0, r3
 8003042:	f002 f8b3 	bl	80051ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003068:	2b00      	cmp	r3, #0
 800306a:	da0c      	bge.n	8003086 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	3338      	adds	r3, #56	; 0x38
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e00c      	b.n	80030a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4413      	add	r3, r2
 800309c:	3304      	adds	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68f9      	ldr	r1, [r7, #12]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fed2 	bl	8004e50 <USB_EPStopXfer>
 80030ac:	4603      	mov	r3, r0
 80030ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030b0:	7afb      	ldrb	r3, [r7, #11]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b08a      	sub	sp, #40	; 0x28
 80030be:	af02      	add	r7, sp, #8
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	3338      	adds	r3, #56	; 0x38
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	3304      	adds	r3, #4
 80030e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1a      	ldr	r2, [r3, #32]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d901      	bls.n	80030f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e06c      	b.n	80031cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	429a      	cmp	r2, r3
 8003106:	d902      	bls.n	800310e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3303      	adds	r3, #3
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003116:	e02b      	b.n	8003170 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	429a      	cmp	r2, r3
 800312c:	d902      	bls.n	8003134 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	3303      	adds	r3, #3
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6919      	ldr	r1, [r3, #16]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800314c:	b2db      	uxtb	r3, r3
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4603      	mov	r3, r0
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f001 ff26 	bl	8004fa4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	441a      	add	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	441a      	add	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	429a      	cmp	r2, r3
 8003184:	d809      	bhi.n	800319a <PCD_WriteEmptyTxFifo+0xe0>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800318e:	429a      	cmp	r2, r3
 8003190:	d203      	bcs.n	800319a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1be      	bne.n	8003118 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d811      	bhi.n	80031ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	2201      	movs	r2, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	43db      	mvns	r3, r3
 80031c0:	6939      	ldr	r1, [r7, #16]
 80031c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031c6:	4013      	ands	r3, r2
 80031c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	333c      	adds	r3, #60	; 0x3c
 80031ec:	3304      	adds	r3, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d17b      	bne.n	8003302 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d015      	beq.n	8003240 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4a61      	ldr	r2, [pc, #388]	; (800339c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	f240 80b9 	bls.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80b3 	beq.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003236:	461a      	mov	r2, r3
 8003238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800323c:	6093      	str	r3, [r2, #8]
 800323e:	e0a7      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	2320      	movs	r3, #32
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e098      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 8093 	bne.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4a4b      	ldr	r2, [pc, #300]	; (800339c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d90f      	bls.n	8003292 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328e:	6093      	str	r3, [r2, #8]
 8003290:	e07e      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	1ad2      	subs	r2, r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d114      	bne.n	80032f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032dc:	461a      	mov	r2, r3
 80032de:	2101      	movs	r1, #1
 80032e0:	f002 f946 	bl	8005570 <USB_EP0_OutStart>
 80032e4:	e006      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	441a      	add	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f004 fc62 	bl	8007bc4 <HAL_PCD_DataOutStageCallback>
 8003300:	e046      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d124      	bne.n	8003354 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003320:	461a      	mov	r2, r3
 8003322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003326:	6093      	str	r3, [r2, #8]
 8003328:	e032      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003340:	461a      	mov	r2, r3
 8003342:	2320      	movs	r3, #32
 8003344:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f004 fc39 	bl	8007bc4 <HAL_PCD_DataOutStageCallback>
 8003352:	e01d      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d114      	bne.n	8003384 <PCD_EP_OutXfrComplete_int+0x1b0>
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800337c:	461a      	mov	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f002 f8f6 	bl	8005570 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f004 fc1a 	bl	8007bc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	4f54300a 	.word	0x4f54300a
 80033a0:	4f54310a 	.word	0x4f54310a

080033a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	333c      	adds	r3, #60	; 0x3c
 80033bc:	3304      	adds	r3, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a15      	ldr	r2, [pc, #84]	; (800342c <PCD_EP_OutSetupPacket_int+0x88>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d90e      	bls.n	80033f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f0:	461a      	mov	r2, r3
 80033f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f004 fbd1 	bl	8007ba0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <PCD_EP_OutSetupPacket_int+0x88>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d90c      	bls.n	8003420 <PCD_EP_OutSetupPacket_int+0x7c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d108      	bne.n	8003420 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003418:	461a      	mov	r2, r3
 800341a:	2101      	movs	r1, #1
 800341c:	f002 f8a8 	bl	8005570 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	4f54300a 	.word	0x4f54300a

08003430 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
 800343c:	4613      	mov	r3, r2
 800343e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800344e:	883b      	ldrh	r3, [r7, #0]
 8003450:	0419      	lsls	r1, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	430a      	orrs	r2, r1
 800345a:	629a      	str	r2, [r3, #40]	; 0x28
 800345c:	e028      	b.n	80034b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4413      	add	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e00d      	b.n	800348e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	3340      	adds	r3, #64	; 0x40
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	3301      	adds	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	3b01      	subs	r3, #1
 8003494:	429a      	cmp	r2, r3
 8003496:	d3ec      	bcc.n	8003472 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003498:	883b      	ldrh	r3, [r7, #0]
 800349a:	0418      	lsls	r0, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	4302      	orrs	r2, r0
 80034a8:	3340      	adds	r3, #64	; 0x40
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e267      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d075      	beq.n	8003602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003516:	4b88      	ldr	r3, [pc, #544]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b04      	cmp	r3, #4
 8003520:	d00c      	beq.n	800353c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b85      	ldr	r3, [pc, #532]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	2b08      	cmp	r3, #8
 800352c:	d112      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b82      	ldr	r3, [pc, #520]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353a:	d10b      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	4b7e      	ldr	r3, [pc, #504]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05b      	beq.n	8003600 <HAL_RCC_OscConfig+0x108>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d157      	bne.n	8003600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e242      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x74>
 800355e:	4b76      	ldr	r3, [pc, #472]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a75      	ldr	r2, [pc, #468]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e01d      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x98>
 8003576:	4b70      	ldr	r3, [pc, #448]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6f      	ldr	r2, [pc, #444]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b6d      	ldr	r3, [pc, #436]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6c      	ldr	r2, [pc, #432]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e00b      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 8003590:	4b69      	ldr	r3, [pc, #420]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a68      	ldr	r2, [pc, #416]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a65      	ldr	r2, [pc, #404]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80035a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fd fd2c 	bl	800100c <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fd fd28 	bl	800100c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e207      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b5b      	ldr	r3, [pc, #364]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0xc0>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fd fd18 	bl	800100c <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fd fd14 	bl	800100c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1f3      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	4b51      	ldr	r3, [pc, #324]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0xe8>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d063      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360e:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	2b08      	cmp	r3, #8
 8003624:	d11c      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003626:	4b44      	ldr	r3, [pc, #272]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d116      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	4b41      	ldr	r3, [pc, #260]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e1c7      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4937      	ldr	r1, [pc, #220]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	e03a      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	4b34      	ldr	r3, [pc, #208]	; (800373c <HAL_RCC_OscConfig+0x244>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fd fccd 	bl	800100c <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003676:	f7fd fcc9 	bl	800100c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1a8      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4925      	ldr	r1, [pc, #148]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_OscConfig+0x244>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fd fcac 	bl	800100c <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b8:	f7fd fca8 	bl	800100c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e187      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d036      	beq.n	8003750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_RCC_OscConfig+0x248>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fc8c 	bl	800100c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fd fc88 	bl	800100c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e167      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_OscConfig+0x240>)
 800370c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x200>
 8003716:	e01b      	b.n	8003750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_OscConfig+0x248>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7fd fc75 	bl	800100c <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	e00e      	b.n	8003744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003726:	f7fd fc71 	bl	800100c <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d907      	bls.n	8003744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e150      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003738:	40023800 	.word	0x40023800
 800373c:	42470000 	.word	0x42470000
 8003740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ea      	bne.n	8003726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8097 	beq.w	800388c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	4b81      	ldr	r3, [pc, #516]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	4b7d      	ldr	r3, [pc, #500]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a7c      	ldr	r2, [pc, #496]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
 800377e:	4b7a      	ldr	r3, [pc, #488]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b77      	ldr	r3, [pc, #476]	; (800396c <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379a:	4b74      	ldr	r3, [pc, #464]	; (800396c <HAL_RCC_OscConfig+0x474>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a73      	ldr	r2, [pc, #460]	; (800396c <HAL_RCC_OscConfig+0x474>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fd fc31 	bl	800100c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fd fc2d 	bl	800100c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e10c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCC_OscConfig+0x474>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2ea>
 80037d4:	4b64      	ldr	r3, [pc, #400]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a63      	ldr	r2, [pc, #396]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x30c>
 80037ea:	4b5f      	ldr	r3, [pc, #380]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a5e      	ldr	r2, [pc, #376]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
 80037f6:	4b5c      	ldr	r3, [pc, #368]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 8003804:	4b58      	ldr	r3, [pc, #352]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a57      	ldr	r2, [pc, #348]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	4b55      	ldr	r3, [pc, #340]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a54      	ldr	r2, [pc, #336]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 0304 	bic.w	r3, r3, #4
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fd fbf2 	bl	800100c <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fd fbee 	bl	800100c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0cb      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	4b49      	ldr	r3, [pc, #292]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ee      	beq.n	800382c <HAL_RCC_OscConfig+0x334>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fd fbdc 	bl	800100c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fd fbd8 	bl	800100c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0b5      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	4b3e      	ldr	r3, [pc, #248]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ee      	bne.n	8003858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b39      	ldr	r3, [pc, #228]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	4a38      	ldr	r2, [pc, #224]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a1 	beq.w	80039d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003896:	4b34      	ldr	r3, [pc, #208]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d05c      	beq.n	800395c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d141      	bne.n	800392e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_RCC_OscConfig+0x478>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fd fbac 	bl	800100c <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd fba8 	bl	800100c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e087      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b27      	ldr	r3, [pc, #156]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	019b      	lsls	r3, r3, #6
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	491b      	ldr	r1, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x478>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fd fb81 	bl	800100c <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd fb7d 	bl	800100c <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e05c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x416>
 800392c:	e054      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_RCC_OscConfig+0x478>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd fb6a 	bl	800100c <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd fb66 	bl	800100c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e045      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_RCC_OscConfig+0x470>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x444>
 800395a:	e03d      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e038      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003968:	40023800 	.word	0x40023800
 800396c:	40007000 	.word	0x40007000
 8003970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_RCC_OscConfig+0x4ec>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d028      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d121      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d111      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	3b01      	subs	r3, #1
 80039be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0cc      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d90c      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b63      	ldr	r3, [pc, #396]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b8      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a52      	ldr	r2, [pc, #328]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494d      	ldr	r1, [pc, #308]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d044      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d119      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e067      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b37      	ldr	r3, [pc, #220]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4934      	ldr	r1, [pc, #208]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fa98 	bl	800100c <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fd fa94 	bl	800100c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e04f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d20c      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e032      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6e:	f000 f821 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490a      	ldr	r1, [pc, #40]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd f9f8 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08009270 	.word	0x08009270
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000004 	.word	0x20000004

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb8:	b090      	sub	sp, #64	; 0x40
 8003bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bcc:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	f200 80a1 	bhi.w	8003d20 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x34>
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d003      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x3a>
 8003be6:	e09b      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be8:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bec:	e09b      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bee:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003bf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bf2:	e098      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf4:	4b4f      	ldr	r3, [pc, #316]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfe:	4b4d      	ldr	r3, [pc, #308]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d028      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	2200      	movs	r2, #0
 8003c12:	623b      	str	r3, [r7, #32]
 8003c14:	627a      	str	r2, [r7, #36]	; 0x24
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c20:	fb03 f201 	mul.w	r2, r3, r1
 8003c24:	2300      	movs	r3, #0
 8003c26:	fb00 f303 	mul.w	r3, r0, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	4a43      	ldr	r2, [pc, #268]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c2e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c34:	460a      	mov	r2, r1
 8003c36:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c3a:	4413      	add	r3, r2
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c40:	2200      	movs	r2, #0
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	61fa      	str	r2, [r7, #28]
 8003c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c4e:	f7fc fb0f 	bl	8000270 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4613      	mov	r3, r2
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5a:	e053      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5c:	4b35      	ldr	r3, [pc, #212]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	2200      	movs	r2, #0
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	617a      	str	r2, [r7, #20]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c6e:	f04f 0b00 	mov.w	fp, #0
 8003c72:	4652      	mov	r2, sl
 8003c74:	465b      	mov	r3, fp
 8003c76:	f04f 0000 	mov.w	r0, #0
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	0159      	lsls	r1, r3, #5
 8003c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c84:	0150      	lsls	r0, r2, #5
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	ebb2 080a 	subs.w	r8, r2, sl
 8003c8e:	eb63 090b 	sbc.w	r9, r3, fp
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ca2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ca6:	ebb2 0408 	subs.w	r4, r2, r8
 8003caa:	eb63 0509 	sbc.w	r5, r3, r9
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	00eb      	lsls	r3, r5, #3
 8003cb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cbc:	00e2      	lsls	r2, r4, #3
 8003cbe:	4614      	mov	r4, r2
 8003cc0:	461d      	mov	r5, r3
 8003cc2:	eb14 030a 	adds.w	r3, r4, sl
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	eb45 030b 	adc.w	r3, r5, fp
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	028b      	lsls	r3, r1, #10
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	028a      	lsls	r2, r1, #10
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	60fa      	str	r2, [r7, #12]
 8003cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf8:	f7fc faba 	bl	8000270 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4613      	mov	r3, r2
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d1e:	e002      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3740      	adds	r7, #64	; 0x40
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	00b71b00 	.word	0x00b71b00

08003d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000000 	.word	0x20000000

08003d58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d58:	b084      	sub	sp, #16
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	f107 001c 	add.w	r0, r7, #28
 8003d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d122      	bne.n	8003db6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d105      	bne.n	8003daa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f001 fc3e 	bl	800562c <USB_CoreReset>
 8003db0:	4603      	mov	r3, r0
 8003db2:	73fb      	strb	r3, [r7, #15]
 8003db4:	e01a      	b.n	8003dec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f001 fc32 	bl	800562c <USB_CoreReset>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
 8003dde:	e005      	b.n	8003dec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d10b      	bne.n	8003e0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f043 0206 	orr.w	r2, r3, #6
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e16:	b004      	add	sp, #16
 8003e18:	4770      	bx	lr
	...

08003e1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d165      	bne.n	8003efc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4a41      	ldr	r2, [pc, #260]	; (8003f38 <USB_SetTurnaroundTime+0x11c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d906      	bls.n	8003e46 <USB_SetTurnaroundTime+0x2a>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <USB_SetTurnaroundTime+0x120>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d202      	bcs.n	8003e46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e40:	230f      	movs	r3, #15
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e062      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4a3c      	ldr	r2, [pc, #240]	; (8003f3c <USB_SetTurnaroundTime+0x120>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d306      	bcc.n	8003e5c <USB_SetTurnaroundTime+0x40>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <USB_SetTurnaroundTime+0x124>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d202      	bcs.n	8003e5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e56:	230e      	movs	r3, #14
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e057      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <USB_SetTurnaroundTime+0x124>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d306      	bcc.n	8003e72 <USB_SetTurnaroundTime+0x56>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4a37      	ldr	r2, [pc, #220]	; (8003f44 <USB_SetTurnaroundTime+0x128>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d202      	bcs.n	8003e72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e6c:	230d      	movs	r3, #13
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e04c      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4a33      	ldr	r2, [pc, #204]	; (8003f44 <USB_SetTurnaroundTime+0x128>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d306      	bcc.n	8003e88 <USB_SetTurnaroundTime+0x6c>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4a32      	ldr	r2, [pc, #200]	; (8003f48 <USB_SetTurnaroundTime+0x12c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d802      	bhi.n	8003e88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e82:	230c      	movs	r3, #12
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e041      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <USB_SetTurnaroundTime+0x12c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d906      	bls.n	8003e9e <USB_SetTurnaroundTime+0x82>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4a2e      	ldr	r2, [pc, #184]	; (8003f4c <USB_SetTurnaroundTime+0x130>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d802      	bhi.n	8003e9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e98:	230b      	movs	r3, #11
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e036      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4a2a      	ldr	r2, [pc, #168]	; (8003f4c <USB_SetTurnaroundTime+0x130>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d906      	bls.n	8003eb4 <USB_SetTurnaroundTime+0x98>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <USB_SetTurnaroundTime+0x134>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d802      	bhi.n	8003eb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003eae:	230a      	movs	r3, #10
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e02b      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <USB_SetTurnaroundTime+0x134>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d906      	bls.n	8003eca <USB_SetTurnaroundTime+0xae>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4a25      	ldr	r2, [pc, #148]	; (8003f54 <USB_SetTurnaroundTime+0x138>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d202      	bcs.n	8003eca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ec4:	2309      	movs	r3, #9
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e020      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <USB_SetTurnaroundTime+0x138>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d306      	bcc.n	8003ee0 <USB_SetTurnaroundTime+0xc4>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4a20      	ldr	r2, [pc, #128]	; (8003f58 <USB_SetTurnaroundTime+0x13c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d802      	bhi.n	8003ee0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003eda:	2308      	movs	r3, #8
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e015      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <USB_SetTurnaroundTime+0x13c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d906      	bls.n	8003ef6 <USB_SetTurnaroundTime+0xda>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <USB_SetTurnaroundTime+0x140>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d202      	bcs.n	8003ef6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ef0:	2307      	movs	r3, #7
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e00a      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ef6:	2306      	movs	r3, #6
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e007      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f02:	2309      	movs	r3, #9
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e001      	b.n	8003f0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f08:	2309      	movs	r3, #9
 8003f0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	029b      	lsls	r3, r3, #10
 8003f20:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	00d8acbf 	.word	0x00d8acbf
 8003f3c:	00e4e1c0 	.word	0x00e4e1c0
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	01067380 	.word	0x01067380
 8003f48:	011a499f 	.word	0x011a499f
 8003f4c:	01312cff 	.word	0x01312cff
 8003f50:	014ca43f 	.word	0x014ca43f
 8003f54:	016e3600 	.word	0x016e3600
 8003f58:	01a6ab1f 	.word	0x01a6ab1f
 8003f5c:	01e84800 	.word	0x01e84800

08003f60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f043 0201 	orr.w	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d115      	bne.n	8003ff2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f7fd f826 	bl	8001024 <HAL_Delay>
      ms++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f001 fa94 	bl	800550c <USB_GetMode>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d01e      	beq.n	8004028 <USB_SetCurrentMode+0x84>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b31      	cmp	r3, #49	; 0x31
 8003fee:	d9f0      	bls.n	8003fd2 <USB_SetCurrentMode+0x2e>
 8003ff0:	e01a      	b.n	8004028 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d115      	bne.n	8004024 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004004:	2001      	movs	r0, #1
 8004006:	f7fd f80d 	bl	8001024 <HAL_Delay>
      ms++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3301      	adds	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f001 fa7b 	bl	800550c <USB_GetMode>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <USB_SetCurrentMode+0x84>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b31      	cmp	r3, #49	; 0x31
 8004020:	d9f0      	bls.n	8004004 <USB_SetCurrentMode+0x60>
 8004022:	e001      	b.n	8004028 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e005      	b.n	8004034 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b32      	cmp	r3, #50	; 0x32
 800402c:	d101      	bne.n	8004032 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800403c:	b084      	sub	sp, #16
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800404a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004056:	2300      	movs	r3, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	e009      	b.n	8004070 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	3340      	adds	r3, #64	; 0x40
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	2200      	movs	r2, #0
 8004068:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	3301      	adds	r3, #1
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b0e      	cmp	r3, #14
 8004074:	d9f2      	bls.n	800405c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11c      	bne.n	80040b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	639a      	str	r2, [r3, #56]	; 0x38
 80040b4:	e00b      	b.n	80040ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040d4:	461a      	mov	r2, r3
 80040d6:	2300      	movs	r3, #0
 80040d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e0:	4619      	mov	r1, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e8:	461a      	mov	r2, r3
 80040ea:	680b      	ldr	r3, [r1, #0]
 80040ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10c      	bne.n	800410e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040fa:	2100      	movs	r1, #0
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f965 	bl	80043cc <USB_SetDevSpeed>
 8004102:	e008      	b.n	8004116 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004104:	2101      	movs	r1, #1
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f960 	bl	80043cc <USB_SetDevSpeed>
 800410c:	e003      	b.n	8004116 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800410e:	2103      	movs	r1, #3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f95b 	bl	80043cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004116:	2110      	movs	r1, #16
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f8f3 	bl	8004304 <USB_FlushTxFifo>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f91f 	bl	800436c <USB_FlushRxFifo>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	461a      	mov	r2, r3
 8004140:	2300      	movs	r3, #0
 8004142:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	461a      	mov	r2, r3
 800414c:	2300      	movs	r3, #0
 800414e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004156:	461a      	mov	r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800415c:	2300      	movs	r3, #0
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	e043      	b.n	80041ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004178:	d118      	bne.n	80041ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e013      	b.n	80041be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a2:	461a      	mov	r2, r3
 80041a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e008      	b.n	80041be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b8:	461a      	mov	r2, r3
 80041ba:	2300      	movs	r3, #0
 80041bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ca:	461a      	mov	r2, r3
 80041cc:	2300      	movs	r3, #0
 80041ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041dc:	461a      	mov	r2, r3
 80041de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	3301      	adds	r3, #1
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d3b7      	bcc.n	8004162 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	e043      	b.n	8004280 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800420a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800420e:	d118      	bne.n	8004242 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	461a      	mov	r2, r3
 8004224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e013      	b.n	8004254 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004238:	461a      	mov	r2, r3
 800423a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	e008      	b.n	8004254 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	461a      	mov	r2, r3
 8004262:	2300      	movs	r3, #0
 8004264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	461a      	mov	r2, r3
 8004274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004278:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	3301      	adds	r3, #1
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	429a      	cmp	r2, r3
 8004286:	d3b7      	bcc.n	80041f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800429a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80042a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f043 0210 	orr.w	r2, r3, #16
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <USB_DevInit+0x2c4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f043 0208 	orr.w	r2, r3, #8
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d107      	bne.n	80042f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042e8:	f043 0304 	orr.w	r3, r3, #4
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042fc:	b004      	add	sp, #16
 80042fe:	4770      	bx	lr
 8004300:	803c3800 	.word	0x803c3800

08004304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3301      	adds	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a13      	ldr	r2, [pc, #76]	; (8004368 <USB_FlushTxFifo+0x64>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e01b      	b.n	800435c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	daf2      	bge.n	8004312 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	019b      	lsls	r3, r3, #6
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3301      	adds	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a08      	ldr	r2, [pc, #32]	; (8004368 <USB_FlushTxFifo+0x64>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e006      	b.n	800435c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b20      	cmp	r3, #32
 8004358:	d0f0      	beq.n	800433c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	00030d40 	.word	0x00030d40

0800436c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a11      	ldr	r2, [pc, #68]	; (80043c8 <USB_FlushRxFifo+0x5c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e018      	b.n	80043bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	daf2      	bge.n	8004378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2210      	movs	r2, #16
 800439a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <USB_FlushRxFifo+0x5c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e006      	b.n	80043bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d0f0      	beq.n	800439c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	00030d40 	.word	0x00030d40

080043cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043fe:	b480      	push	{r7}
 8004400:	b087      	sub	sp, #28
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0306 	and.w	r3, r3, #6
 8004416:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]
 8004422:	e00a      	b.n	800443a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d002      	beq.n	8004430 <USB_GetDevSpeed+0x32>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b06      	cmp	r3, #6
 800442e:	d102      	bne.n	8004436 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004430:	2302      	movs	r3, #2
 8004432:	75fb      	strb	r3, [r7, #23]
 8004434:	e001      	b.n	800443a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004436:	230f      	movs	r3, #15
 8004438:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800443a:	7dfb      	ldrb	r3, [r7, #23]
}
 800443c:	4618      	mov	r0, r3
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d13a      	bne.n	80044da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	b29b      	uxth	r3, r3
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004482:	4313      	orrs	r3, r2
 8004484:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d155      	bne.n	8004548 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	791b      	ldrb	r3, [r3, #4]
 80044b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	059b      	lsls	r3, r3, #22
 80044be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044c0:	4313      	orrs	r3, r2
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e036      	b.n	8004548 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	2101      	movs	r1, #1
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d11a      	bne.n	8004548 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	791b      	ldrb	r3, [r3, #4]
 800452c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800452e:	430b      	orrs	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004546:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	785b      	ldrb	r3, [r3, #1]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d161      	bne.n	8004638 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800458a:	d11f      	bne.n	80045cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	68f9      	ldr	r1, [r7, #12]
 80045e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ec:	4013      	ands	r3, r2
 80045ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	b29b      	uxth	r3, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004610:	4013      	ands	r3, r2
 8004612:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	0159      	lsls	r1, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	440b      	add	r3, r1
 800462a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462e:	4619      	mov	r1, r3
 8004630:	4b35      	ldr	r3, [pc, #212]	; (8004708 <USB_DeactivateEndpoint+0x1b0>)
 8004632:	4013      	ands	r3, r2
 8004634:	600b      	str	r3, [r1, #0]
 8004636:	e060      	b.n	80046fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464e:	d11f      	bne.n	8004690 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800466e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800468e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	2101      	movs	r1, #1
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	43db      	mvns	r3, r3
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b0:	4013      	ands	r3, r2
 80046b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	2101      	movs	r1, #1
 80046c6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	43db      	mvns	r3, r3
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d4:	4013      	ands	r3, r2
 80046d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	0159      	lsls	r1, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	440b      	add	r3, r1
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	4619      	mov	r1, r3
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <USB_DeactivateEndpoint+0x1b4>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	ec337800 	.word	0xec337800
 800470c:	eff37800 	.word	0xeff37800

08004710 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	2b01      	cmp	r3, #1
 800472e:	f040 815c 	bne.w	80049ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d132      	bne.n	80047a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004754:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004758:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800475c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800477c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004798:	0cdb      	lsrs	r3, r3, #19
 800479a:	04db      	lsls	r3, r3, #19
 800479c:	6113      	str	r3, [r2, #16]
 800479e:	e074      	b.n	800488a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ba:	0cdb      	lsrs	r3, r3, #19
 80047bc:	04db      	lsls	r3, r3, #19
 80047be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	440b      	add	r3, r1
 80047fc:	1e59      	subs	r1, r3, #1
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	fbb1 f3f3 	udiv	r3, r1, r3
 8004806:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004808:	4b9d      	ldr	r3, [pc, #628]	; (8004a80 <USB_EPStartXfer+0x370>)
 800480a:	400b      	ands	r3, r1
 800480c:	69b9      	ldr	r1, [r7, #24]
 800480e:	0148      	lsls	r0, r1, #5
 8004810:	69f9      	ldr	r1, [r7, #28]
 8004812:	4401      	add	r1, r0
 8004814:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004818:	4313      	orrs	r3, r2
 800481a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004832:	69b9      	ldr	r1, [r7, #24]
 8004834:	0148      	lsls	r0, r1, #5
 8004836:	69f9      	ldr	r1, [r7, #28]
 8004838:	4401      	add	r1, r0
 800483a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800483e:	4313      	orrs	r3, r2
 8004840:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	791b      	ldrb	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d11f      	bne.n	800488a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004864:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004868:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	0151      	lsls	r1, r2, #5
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	440a      	add	r2, r1
 8004880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004884:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004888:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d14b      	bne.n	8004928 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	461a      	mov	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	791b      	ldrb	r3, [r3, #4]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d128      	bne.n	8004906 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d110      	bne.n	80048e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	e00f      	b.n	8004906 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	0151      	lsls	r1, r2, #5
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	440a      	add	r2, r1
 80048fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004904:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004920:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e133      	b.n	8004b90 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004946:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	791b      	ldrb	r3, [r3, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d015      	beq.n	800497c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 811b 	beq.w	8004b90 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	2101      	movs	r1, #1
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	69f9      	ldr	r1, [r7, #28]
 8004972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004976:	4313      	orrs	r3, r2
 8004978:	634b      	str	r3, [r1, #52]	; 0x34
 800497a:	e109      	b.n	8004b90 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d110      	bne.n	80049ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	e00f      	b.n	80049ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6919      	ldr	r1, [r3, #16]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	b298      	uxth	r0, r3
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4603      	mov	r3, r0
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fade 	bl	8004fa4 <USB_WritePacket>
 80049e8:	e0d2      	b.n	8004b90 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	0151      	lsls	r1, r2, #5
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	440a      	add	r2, r1
 8004a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a04:	0cdb      	lsrs	r3, r3, #19
 8004a06:	04db      	lsls	r3, r3, #19
 8004a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d126      	bne.n	8004a84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	0148      	lsls	r0, r1, #5
 8004a50:	69f9      	ldr	r1, [r7, #28]
 8004a52:	4401      	add	r1, r0
 8004a54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a7a:	6113      	str	r3, [r2, #16]
 8004a7c:	e03a      	b.n	8004af4 <USB_EPStartXfer+0x3e4>
 8004a7e:	bf00      	nop
 8004a80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	1e5a      	subs	r2, r3, #1
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a98:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	8afa      	ldrh	r2, [r7, #22]
 8004aa0:	fb03 f202 	mul.w	r2, r3, r2
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	8afb      	ldrh	r3, [r7, #22]
 8004ab8:	04d9      	lsls	r1, r3, #19
 8004aba:	4b38      	ldr	r3, [pc, #224]	; (8004b9c <USB_EPStartXfer+0x48c>)
 8004abc:	400b      	ands	r3, r1
 8004abe:	69b9      	ldr	r1, [r7, #24]
 8004ac0:	0148      	lsls	r0, r1, #5
 8004ac2:	69f9      	ldr	r1, [r7, #28]
 8004ac4:	4401      	add	r1, r0
 8004ac6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004aca:	4313      	orrs	r3, r2
 8004acc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	0148      	lsls	r0, r1, #5
 8004ae8:	69f9      	ldr	r1, [r7, #28]
 8004aea:	4401      	add	r1, r0
 8004aec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004af0:	4313      	orrs	r3, r2
 8004af2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d10d      	bne.n	8004b16 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6919      	ldr	r1, [r3, #16]
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	460a      	mov	r2, r1
 8004b14:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	791b      	ldrb	r3, [r3, #4]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d128      	bne.n	8004b70 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d110      	bne.n	8004b50 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e00f      	b.n	8004b70 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	0151      	lsls	r1, r2, #5
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	440a      	add	r2, r1
 8004b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	1ff80000 	.word	0x1ff80000

08004ba0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	f040 80ce 	bne.w	8004d5e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d132      	bne.n	8004c30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	0151      	lsls	r1, r2, #5
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	440a      	add	r2, r1
 8004c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c28:	0cdb      	lsrs	r3, r3, #19
 8004c2a:	04db      	lsls	r3, r3, #19
 8004c2c:	6113      	str	r3, [r2, #16]
 8004c2e:	e04e      	b.n	8004cce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4a:	0cdb      	lsrs	r3, r3, #19
 8004c4c:	04db      	lsls	r3, r3, #19
 8004c4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	0151      	lsls	r1, r2, #5
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	440a      	add	r2, r1
 8004c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c72:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d903      	bls.n	8004c88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cbe:	6939      	ldr	r1, [r7, #16]
 8004cc0:	0148      	lsls	r0, r1, #5
 8004cc2:	6979      	ldr	r1, [r7, #20]
 8004cc4:	4401      	add	r1, r0
 8004cc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d11e      	bne.n	8004d12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	e097      	b.n	8004e42 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8083 	beq.w	8004e42 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	634b      	str	r3, [r1, #52]	; 0x34
 8004d5c:	e071      	b.n	8004e42 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d78:	0cdb      	lsrs	r3, r3, #19
 8004d7a:	04db      	lsls	r3, r3, #19
 8004d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004da0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df0:	6939      	ldr	r1, [r7, #16]
 8004df2:	0148      	lsls	r0, r1, #5
 8004df4:	6979      	ldr	r1, [r7, #20]
 8004df6:	4401      	add	r1, r0
 8004df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10d      	bne.n	8004e22 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6919      	ldr	r1, [r3, #16]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	460a      	mov	r2, r1
 8004e20:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d14a      	bne.n	8004f04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e86:	f040 8086 	bne.w	8004f96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d902      	bls.n	8004ee8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ee6:	e056      	b.n	8004f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f00:	d0e7      	beq.n	8004ed2 <USB_EPStopXfer+0x82>
 8004f02:	e048      	b.n	8004f96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f1c:	d13b      	bne.n	8004f96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d902      	bls.n	8004f7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
          break;
 8004f7a:	e00c      	b.n	8004f96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f94:	d0e7      	beq.n	8004f66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	; 0x24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	71fb      	strb	r3, [r7, #7]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d123      	bne.n	8005012 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fca:	88bb      	ldrh	r3, [r7, #4]
 8004fcc:	3303      	adds	r3, #3
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	e018      	b.n	800500a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	031a      	lsls	r2, r3, #12
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3301      	adds	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	3301      	adds	r3, #1
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	429a      	cmp	r2, r3
 8005010:	d3e2      	bcc.n	8004fd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3724      	adds	r7, #36	; 0x24
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005020:	b480      	push	{r7}
 8005022:	b08b      	sub	sp, #44	; 0x2c
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	089b      	lsrs	r3, r3, #2
 800503a:	b29b      	uxth	r3, r3
 800503c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005046:	2300      	movs	r3, #0
 8005048:	623b      	str	r3, [r7, #32]
 800504a:	e014      	b.n	8005076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	601a      	str	r2, [r3, #0]
    pDest++;
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	3301      	adds	r3, #1
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	3301      	adds	r3, #1
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	3301      	adds	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	3301      	adds	r3, #1
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	3301      	adds	r3, #1
 8005074:	623b      	str	r3, [r7, #32]
 8005076:	6a3a      	ldr	r2, [r7, #32]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	429a      	cmp	r2, r3
 800507c:	d3e6      	bcc.n	800504c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800507e:	8bfb      	ldrh	r3, [r7, #30]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01e      	beq.n	80050c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508e:	461a      	mov	r2, r3
 8005090:	f107 0310 	add.w	r3, r7, #16
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	701a      	strb	r2, [r3, #0]
      i++;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	3301      	adds	r3, #1
 80050ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	3301      	adds	r3, #1
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050b6:	8bfb      	ldrh	r3, [r7, #30]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050bc:	8bfb      	ldrh	r3, [r7, #30]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1ea      	bne.n	8005098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	372c      	adds	r7, #44	; 0x2c
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d12c      	bne.n	8005146 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	db12      	blt.n	8005124 <USB_EPSetStall+0x54>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00f      	beq.n	8005124 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005122:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	e02b      	b.n	800519e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	db12      	blt.n	800517e <USB_EPSetStall+0xae>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00f      	beq.n	800517e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	440a      	add	r2, r1
 8005174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005178:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800517c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	440a      	add	r2, r1
 8005194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800519c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d128      	bne.n	800521a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	791b      	ldrb	r3, [r3, #4]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d003      	beq.n	80051f8 <USB_EPClearStall+0x4c>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	791b      	ldrb	r3, [r3, #4]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d138      	bne.n	800526a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	440a      	add	r2, r1
 800520e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	e027      	b.n	800526a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005234:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005238:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	791b      	ldrb	r3, [r3, #4]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d003      	beq.n	800524a <USB_EPClearStall+0x9e>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	791b      	ldrb	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d10f      	bne.n	800526a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005268:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e016      	b.n	80052b8 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	461a      	mov	r2, r3
 8005298:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800529c:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	461a      	mov	r2, r3
 80052ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	3301      	adds	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b0e      	cmp	r3, #14
 80052bc:	d9e5      	bls.n	800528a <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c4:	461a      	mov	r2, r3
 80052c6:	2300      	movs	r3, #0
 80052c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d0:	461a      	mov	r2, r3
 80052d2:	2300      	movs	r3, #0
 80052d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	461a      	mov	r2, r3
 80052de:	2300      	movs	r3, #0
 80052e0:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff f842 	bl	800436c <USB_FlushRxFifo>
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <USB_StopDevice+0x7e>
  {
    return ret;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	e00b      	b.n	800530e <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 80052f6:	2110      	movs	r1, #16
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff f803 	bl	8004304 <USB_FlushTxFifo>
 80052fe:	4603      	mov	r3, r0
 8005300:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <USB_StopDevice+0x94>
  {
    return ret;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	e000      	b.n	800530e <USB_StopDevice+0x96>
  }

  return ret;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	460b      	mov	r3, r1
 8005320:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005334:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005338:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800537c:	f023 0303 	bic.w	r3, r3, #3
 8005380:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005390:	f023 0302 	bic.w	r3, r3, #2
 8005394:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053be:	f023 0303 	bic.w	r3, r3, #3
 80053c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d2:	f043 0302 	orr.w	r3, r3, #2
 80053d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4013      	ands	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4013      	ands	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	0c1b      	lsrs	r3, r3, #16
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	b29b      	uxth	r3, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054a2:	68bb      	ldr	r3, [r7, #8]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
 80054e0:	01db      	lsls	r3, r3, #7
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4013      	ands	r3, r2
 80054fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054fe:	68bb      	ldr	r3, [r7, #8]
}
 8005500:	4618      	mov	r0, r3
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f003 0301 	and.w	r3, r3, #1
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005542:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005546:	f023 0307 	bic.w	r3, r3, #7
 800554a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800555a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	460b      	mov	r3, r1
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	333c      	adds	r3, #60	; 0x3c
 8005586:	3304      	adds	r3, #4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4a26      	ldr	r2, [pc, #152]	; (8005628 <USB_EP0_OutStart+0xb8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d90a      	bls.n	80055aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a4:	d101      	bne.n	80055aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e037      	b.n	800561a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	461a      	mov	r2, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d8:	f043 0318 	orr.w	r3, r3, #24
 80055dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055f2:	7afb      	ldrb	r3, [r7, #11]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10f      	bne.n	8005618 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005612:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005616:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	4f54300a 	.word	0x4f54300a

0800562c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4a13      	ldr	r2, [pc, #76]	; (8005690 <USB_CoreReset+0x64>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d901      	bls.n	800564a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e01b      	b.n	8005682 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	daf2      	bge.n	8005638 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f043 0201 	orr.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a09      	ldr	r2, [pc, #36]	; (8005690 <USB_CoreReset+0x64>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e006      	b.n	8005682 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d0f0      	beq.n	8005662 <USB_CoreReset+0x36>

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	00030d40 	.word	0x00030d40

08005694 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80056a4:	f002 fd2e 	bl	8008104 <USBD_static_malloc>
 80056a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	32b0      	adds	r2, #176	; 0xb0
 80056ba:	2100      	movs	r1, #0
 80056bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056c0:	2302      	movs	r3, #2
 80056c2:	e0d4      	b.n	800586e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80056c4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80056c8:	2100      	movs	r1, #0
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f002 ff54 	bl	8008578 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	32b0      	adds	r2, #176	; 0xb0
 80056da:	68f9      	ldr	r1, [r7, #12]
 80056dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	32b0      	adds	r2, #176	; 0xb0
 80056ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	7c1b      	ldrb	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d138      	bne.n	800576e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056fc:	4b5e      	ldr	r3, [pc, #376]	; (8005878 <USBD_CDC_Init+0x1e4>)
 80056fe:	7819      	ldrb	r1, [r3, #0]
 8005700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005704:	2202      	movs	r2, #2
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f002 fbd9 	bl	8007ebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800570c:	4b5a      	ldr	r3, [pc, #360]	; (8005878 <USBD_CDC_Init+0x1e4>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f003 020f 	and.w	r2, r3, #15
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	3324      	adds	r3, #36	; 0x24
 8005722:	2201      	movs	r2, #1
 8005724:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005726:	4b55      	ldr	r3, [pc, #340]	; (800587c <USBD_CDC_Init+0x1e8>)
 8005728:	7819      	ldrb	r1, [r3, #0]
 800572a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800572e:	2202      	movs	r2, #2
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f002 fbc4 	bl	8007ebe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005736:	4b51      	ldr	r3, [pc, #324]	; (800587c <USBD_CDC_Init+0x1e8>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	f003 020f 	and.w	r2, r3, #15
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800574e:	2201      	movs	r2, #1
 8005750:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005752:	4b4b      	ldr	r3, [pc, #300]	; (8005880 <USBD_CDC_Init+0x1ec>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	3326      	adds	r3, #38	; 0x26
 8005768:	2210      	movs	r2, #16
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e035      	b.n	80057da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800576e:	4b42      	ldr	r3, [pc, #264]	; (8005878 <USBD_CDC_Init+0x1e4>)
 8005770:	7819      	ldrb	r1, [r3, #0]
 8005772:	2340      	movs	r3, #64	; 0x40
 8005774:	2202      	movs	r2, #2
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f002 fba1 	bl	8007ebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800577c:	4b3e      	ldr	r3, [pc, #248]	; (8005878 <USBD_CDC_Init+0x1e4>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3324      	adds	r3, #36	; 0x24
 8005792:	2201      	movs	r2, #1
 8005794:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005796:	4b39      	ldr	r3, [pc, #228]	; (800587c <USBD_CDC_Init+0x1e8>)
 8005798:	7819      	ldrb	r1, [r3, #0]
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	2202      	movs	r2, #2
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f002 fb8d 	bl	8007ebe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057a4:	4b35      	ldr	r3, [pc, #212]	; (800587c <USBD_CDC_Init+0x1e8>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057bc:	2201      	movs	r2, #1
 80057be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057c0:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <USBD_CDC_Init+0x1ec>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3326      	adds	r3, #38	; 0x26
 80057d6:	2210      	movs	r2, #16
 80057d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057da:	4b29      	ldr	r3, [pc, #164]	; (8005880 <USBD_CDC_Init+0x1ec>)
 80057dc:	7819      	ldrb	r1, [r3, #0]
 80057de:	2308      	movs	r3, #8
 80057e0:	2203      	movs	r2, #3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f002 fb6b 	bl	8007ebe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80057e8:	4b25      	ldr	r3, [pc, #148]	; (8005880 <USBD_CDC_Init+0x1ec>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f003 020f 	and.w	r2, r3, #15
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	3324      	adds	r3, #36	; 0x24
 80057fe:	2201      	movs	r2, #1
 8005800:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	33b0      	adds	r3, #176	; 0xb0
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005838:	2302      	movs	r3, #2
 800583a:	e018      	b.n	800586e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	7c1b      	ldrb	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005844:	4b0d      	ldr	r3, [pc, #52]	; (800587c <USBD_CDC_Init+0x1e8>)
 8005846:	7819      	ldrb	r1, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800584e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f002 fc22 	bl	800809c <USBD_LL_PrepareReceive>
 8005858:	e008      	b.n	800586c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800585a:	4b08      	ldr	r3, [pc, #32]	; (800587c <USBD_CDC_Init+0x1e8>)
 800585c:	7819      	ldrb	r1, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005864:	2340      	movs	r3, #64	; 0x40
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f002 fc18 	bl	800809c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000093 	.word	0x20000093
 800587c:	20000094 	.word	0x20000094
 8005880:	20000095 	.word	0x20000095

08005884 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005890:	4b3a      	ldr	r3, [pc, #232]	; (800597c <USBD_CDC_DeInit+0xf8>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f002 fb37 	bl	8007f0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800589c:	4b37      	ldr	r3, [pc, #220]	; (800597c <USBD_CDC_DeInit+0xf8>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f003 020f 	and.w	r2, r3, #15
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	3324      	adds	r3, #36	; 0x24
 80058b2:	2200      	movs	r2, #0
 80058b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058b6:	4b32      	ldr	r3, [pc, #200]	; (8005980 <USBD_CDC_DeInit+0xfc>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f002 fb24 	bl	8007f0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058c2:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <USBD_CDC_DeInit+0xfc>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	f003 020f 	and.w	r2, r3, #15
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058da:	2200      	movs	r2, #0
 80058dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80058de:	4b29      	ldr	r3, [pc, #164]	; (8005984 <USBD_CDC_DeInit+0x100>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f002 fb10 	bl	8007f0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80058ea:	4b26      	ldr	r3, [pc, #152]	; (8005984 <USBD_CDC_DeInit+0x100>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f003 020f 	and.w	r2, r3, #15
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	3324      	adds	r3, #36	; 0x24
 8005900:	2200      	movs	r2, #0
 8005902:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005904:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <USBD_CDC_DeInit+0x100>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	3326      	adds	r3, #38	; 0x26
 800591a:	2200      	movs	r2, #0
 800591c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	32b0      	adds	r2, #176	; 0xb0
 8005928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01f      	beq.n	8005970 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	33b0      	adds	r3, #176	; 0xb0
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	32b0      	adds	r2, #176	; 0xb0
 800594e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005952:	4618      	mov	r0, r3
 8005954:	f002 fbe4 	bl	8008120 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	32b0      	adds	r2, #176	; 0xb0
 8005962:	2100      	movs	r1, #0
 8005964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000093 	.word	0x20000093
 8005980:	20000094 	.word	0x20000094
 8005984:	20000095 	.word	0x20000095

08005988 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	32b0      	adds	r2, #176	; 0xb0
 800599c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e0bf      	b.n	8005b38 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d050      	beq.n	8005a66 <USBD_CDC_Setup+0xde>
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	f040 80af 	bne.w	8005b28 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	88db      	ldrh	r3, [r3, #6]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d03a      	beq.n	8005a48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	b25b      	sxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	da1b      	bge.n	8005a14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	33b0      	adds	r3, #176	; 0xb0
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80059f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	88d2      	ldrh	r2, [r2, #6]
 80059f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	88db      	ldrh	r3, [r3, #6]
 80059fe:	2b07      	cmp	r3, #7
 8005a00:	bf28      	it	cs
 8005a02:	2307      	movcs	r3, #7
 8005a04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	89fa      	ldrh	r2, [r7, #14]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 fdb9 	bl	8007584 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a12:	e090      	b.n	8005b36 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	785a      	ldrb	r2, [r3, #1]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	88db      	ldrh	r3, [r3, #6]
 8005a22:	2b3f      	cmp	r3, #63	; 0x3f
 8005a24:	d803      	bhi.n	8005a2e <USBD_CDC_Setup+0xa6>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	88db      	ldrh	r3, [r3, #6]
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	e000      	b.n	8005a30 <USBD_CDC_Setup+0xa8>
 8005a2e:	2240      	movs	r2, #64	; 0x40
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a36:	6939      	ldr	r1, [r7, #16]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 fdcb 	bl	80075dc <USBD_CtlPrepareRx>
      break;
 8005a46:	e076      	b.n	8005b36 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	33b0      	adds	r3, #176	; 0xb0
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	7850      	ldrb	r0, [r2, #1]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	4798      	blx	r3
      break;
 8005a64:	e067      	b.n	8005b36 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b0b      	cmp	r3, #11
 8005a6c:	d851      	bhi.n	8005b12 <USBD_CDC_Setup+0x18a>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <USBD_CDC_Setup+0xec>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005aa5 	.word	0x08005aa5
 8005a78:	08005b21 	.word	0x08005b21
 8005a7c:	08005b13 	.word	0x08005b13
 8005a80:	08005b13 	.word	0x08005b13
 8005a84:	08005b13 	.word	0x08005b13
 8005a88:	08005b13 	.word	0x08005b13
 8005a8c:	08005b13 	.word	0x08005b13
 8005a90:	08005b13 	.word	0x08005b13
 8005a94:	08005b13 	.word	0x08005b13
 8005a98:	08005b13 	.word	0x08005b13
 8005a9c:	08005acf 	.word	0x08005acf
 8005aa0:	08005af9 	.word	0x08005af9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d107      	bne.n	8005ac0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ab0:	f107 030a 	add.w	r3, r7, #10
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 fd63 	bl	8007584 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005abe:	e032      	b.n	8005b26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fced 	bl	80074a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	75fb      	strb	r3, [r7, #23]
          break;
 8005acc:	e02b      	b.n	8005b26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d107      	bne.n	8005aea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ada:	f107 030d 	add.w	r3, r7, #13
 8005ade:	2201      	movs	r2, #1
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f001 fd4e 	bl	8007584 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ae8:	e01d      	b.n	8005b26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 fcd8 	bl	80074a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005af2:	2303      	movs	r3, #3
 8005af4:	75fb      	strb	r3, [r7, #23]
          break;
 8005af6:	e016      	b.n	8005b26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d00f      	beq.n	8005b24 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 fccb 	bl	80074a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b10:	e008      	b.n	8005b24 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 fcc4 	bl	80074a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b1e:	e002      	b.n	8005b26 <USBD_CDC_Setup+0x19e>
          break;
 8005b20:	bf00      	nop
 8005b22:	e008      	b.n	8005b36 <USBD_CDC_Setup+0x1ae>
          break;
 8005b24:	bf00      	nop
      }
      break;
 8005b26:	e006      	b.n	8005b36 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 fcb9 	bl	80074a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
 8005b32:	75fb      	strb	r3, [r7, #23]
      break;
 8005b34:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005b52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	32b0      	adds	r2, #176	; 0xb0
 8005b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e065      	b.n	8005c36 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	32b0      	adds	r2, #176	; 0xb0
 8005b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	f003 020f 	and.w	r2, r3, #15
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	3318      	adds	r3, #24
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d02f      	beq.n	8005bf4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	f003 020f 	and.w	r2, r3, #15
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3318      	adds	r3, #24
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	f003 010f 	and.w	r1, r3, #15
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	440b      	add	r3, r1
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4403      	add	r3, r0
 8005bbc:	3348      	adds	r3, #72	; 0x48
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d112      	bne.n	8005bf4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	f003 020f 	and.w	r2, r3, #15
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3318      	adds	r3, #24
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005be6:	78f9      	ldrb	r1, [r7, #3]
 8005be8:	2300      	movs	r3, #0
 8005bea:	2200      	movs	r2, #0
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f002 fa34 	bl	800805a <USBD_LL_Transmit>
 8005bf2:	e01f      	b.n	8005c34 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	33b0      	adds	r3, #176	; 0xb0
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d010      	beq.n	8005c34 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	33b0      	adds	r3, #176	; 0xb0
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c30:	78fa      	ldrb	r2, [r7, #3]
 8005c32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	32b0      	adds	r2, #176	; 0xb0
 8005c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	32b0      	adds	r2, #176	; 0xb0
 8005c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e01a      	b.n	8005ca6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f002 fa32 	bl	80080de <USBD_LL_GetRxDataSize>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	33b0      	adds	r3, #176	; 0xb0
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	32b0      	adds	r2, #176	; 0xb0
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e025      	b.n	8005d1c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	33b0      	adds	r3, #176	; 0xb0
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01a      	beq.n	8005d1a <USBD_CDC_EP0_RxReady+0x6c>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cea:	2bff      	cmp	r3, #255	; 0xff
 8005cec:	d015      	beq.n	8005d1a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	33b0      	adds	r3, #176	; 0xb0
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005d06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	22ff      	movs	r2, #255	; 0xff
 8005d16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d2c:	2182      	movs	r1, #130	; 0x82
 8005d2e:	4818      	ldr	r0, [pc, #96]	; (8005d90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d30:	f000 fd7f 	bl	8006832 <USBD_GetEpDesc>
 8005d34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d36:	2101      	movs	r1, #1
 8005d38:	4815      	ldr	r0, [pc, #84]	; (8005d90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d3a:	f000 fd7a 	bl	8006832 <USBD_GetEpDesc>
 8005d3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d40:	2181      	movs	r1, #129	; 0x81
 8005d42:	4813      	ldr	r0, [pc, #76]	; (8005d90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d44:	f000 fd75 	bl	8006832 <USBD_GetEpDesc>
 8005d48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2210      	movs	r2, #16
 8005d54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d006      	beq.n	8005d6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d64:	711a      	strb	r2, [r3, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d006      	beq.n	8005d7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d78:	711a      	strb	r2, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2243      	movs	r2, #67	; 0x43
 8005d82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d84:	4b02      	ldr	r3, [pc, #8]	; (8005d90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000050 	.word	0x20000050

08005d94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d9c:	2182      	movs	r1, #130	; 0x82
 8005d9e:	4818      	ldr	r0, [pc, #96]	; (8005e00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005da0:	f000 fd47 	bl	8006832 <USBD_GetEpDesc>
 8005da4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005da6:	2101      	movs	r1, #1
 8005da8:	4815      	ldr	r0, [pc, #84]	; (8005e00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005daa:	f000 fd42 	bl	8006832 <USBD_GetEpDesc>
 8005dae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005db0:	2181      	movs	r1, #129	; 0x81
 8005db2:	4813      	ldr	r0, [pc, #76]	; (8005e00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005db4:	f000 fd3d 	bl	8006832 <USBD_GetEpDesc>
 8005db8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2210      	movs	r2, #16
 8005dc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d006      	beq.n	8005dda <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	711a      	strb	r2, [r3, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f042 0202 	orr.w	r2, r2, #2
 8005dd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	711a      	strb	r2, [r3, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f042 0202 	orr.w	r2, r2, #2
 8005dec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2243      	movs	r2, #67	; 0x43
 8005df2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005df4:	4b02      	ldr	r3, [pc, #8]	; (8005e00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000050 	.word	0x20000050

08005e04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e0c:	2182      	movs	r1, #130	; 0x82
 8005e0e:	4818      	ldr	r0, [pc, #96]	; (8005e70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e10:	f000 fd0f 	bl	8006832 <USBD_GetEpDesc>
 8005e14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e16:	2101      	movs	r1, #1
 8005e18:	4815      	ldr	r0, [pc, #84]	; (8005e70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e1a:	f000 fd0a 	bl	8006832 <USBD_GetEpDesc>
 8005e1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e20:	2181      	movs	r1, #129	; 0x81
 8005e22:	4813      	ldr	r0, [pc, #76]	; (8005e70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e24:	f000 fd05 	bl	8006832 <USBD_GetEpDesc>
 8005e28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2210      	movs	r2, #16
 8005e34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e44:	711a      	strb	r2, [r3, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d006      	beq.n	8005e5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e58:	711a      	strb	r2, [r3, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2243      	movs	r2, #67	; 0x43
 8005e62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000050 	.word	0x20000050

08005e74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	220a      	movs	r2, #10
 8005e80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e82:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	2000000c 	.word	0x2000000c

08005e94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e009      	b.n	8005ebc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	33b0      	adds	r3, #176	; 0xb0
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	32b0      	adds	r2, #176	; 0xb0
 8005ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e008      	b.n	8005f00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	32b0      	adds	r2, #176	; 0xb0
 8005f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e004      	b.n	8005f3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	32b0      	adds	r2, #176	; 0xb0
 8005f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	32b0      	adds	r2, #176	; 0xb0
 8005f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e025      	b.n	8005fc6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11f      	bne.n	8005fc4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <USBD_CDC_TransmitPacket+0x88>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4403      	add	r3, r0
 8005fa6:	3318      	adds	r3, #24
 8005fa8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005faa:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <USBD_CDC_TransmitPacket+0x88>)
 8005fac:	7819      	ldrb	r1, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f002 f84d 	bl	800805a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000093 	.word	0x20000093

08005fd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	32b0      	adds	r2, #176	; 0xb0
 8005fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	32b0      	adds	r2, #176	; 0xb0
 8005ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e018      	b.n	8006034 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	7c1b      	ldrb	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800600a:	4b0c      	ldr	r3, [pc, #48]	; (800603c <USBD_CDC_ReceivePacket+0x68>)
 800600c:	7819      	ldrb	r1, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f002 f83f 	bl	800809c <USBD_LL_PrepareReceive>
 800601e:	e008      	b.n	8006032 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <USBD_CDC_ReceivePacket+0x68>)
 8006022:	7819      	ldrb	r1, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800602a:	2340      	movs	r3, #64	; 0x40
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 f835 	bl	800809c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000094 	.word	0x20000094

08006040 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006054:	2303      	movs	r3, #3
 8006056:	e01f      	b.n	8006098 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	79fa      	ldrb	r2, [r7, #7]
 800608a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f001 fe79 	bl	8007d84 <USBD_LL_Init>
 8006092:	4603      	mov	r3, r0
 8006094:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006096:	7dfb      	ldrb	r3, [r7, #23]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 feed 	bl	8007e88 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6852      	ldr	r2, [r2, #4]
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	4611      	mov	r1, r2
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fe95 	bl	8007e1c <USBD_LL_DeInit>
 80060f2:	4603      	mov	r3, r0
 80060f4:	73fb      	strb	r3, [r7, #15]

  return ret;
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006114:	2303      	movs	r3, #3
 8006116:	e025      	b.n	8006164 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	32ae      	adds	r2, #174	; 0xae
 800612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00f      	beq.n	8006154 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	32ae      	adds	r2, #174	; 0xae
 800613e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	f107 020e 	add.w	r2, r7, #14
 8006148:	4610      	mov	r0, r2
 800614a:	4798      	blx	r3
 800614c:	4602      	mov	r2, r0
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 fe6c 	bl	8007e52 <USBD_LL_Start>
 800617a:	4603      	mov	r3, r0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800618c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d009      	beq.n	80061c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	4611      	mov	r1, r2
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	4611      	mov	r1, r2
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061f8:	2303      	movs	r3, #3
 80061fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f001 f908 	bl	800742e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800622c:	461a      	mov	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2b02      	cmp	r3, #2
 8006240:	d01a      	beq.n	8006278 <USBD_LL_SetupStage+0x72>
 8006242:	2b02      	cmp	r3, #2
 8006244:	d822      	bhi.n	800628c <USBD_LL_SetupStage+0x86>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <USBD_LL_SetupStage+0x4a>
 800624a:	2b01      	cmp	r3, #1
 800624c:	d00a      	beq.n	8006264 <USBD_LL_SetupStage+0x5e>
 800624e:	e01d      	b.n	800628c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fb5f 	bl	800691c <USBD_StdDevReq>
 800625e:	4603      	mov	r3, r0
 8006260:	73fb      	strb	r3, [r7, #15]
      break;
 8006262:	e020      	b.n	80062a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fbc7 	bl	8006a00 <USBD_StdItfReq>
 8006272:	4603      	mov	r3, r0
 8006274:	73fb      	strb	r3, [r7, #15]
      break;
 8006276:	e016      	b.n	80062a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fc29 	bl	8006ad8 <USBD_StdEPReq>
 8006286:	4603      	mov	r3, r0
 8006288:	73fb      	strb	r3, [r7, #15]
      break;
 800628a:	e00c      	b.n	80062a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006292:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006296:	b2db      	uxtb	r3, r3
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fe54 	bl	8007f48 <USBD_LL_StallEP>
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	bf00      	nop
  }

  return ret;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	460b      	mov	r3, r1
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80062c2:	7afb      	ldrb	r3, [r7, #11]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d16e      	bne.n	80063a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	f040 8098 	bne.w	800640c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d913      	bls.n	8006310 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	1ad2      	subs	r2, r2, r3
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	4293      	cmp	r3, r2
 8006300:	bf28      	it	cs
 8006302:	4613      	movcs	r3, r2
 8006304:	461a      	mov	r2, r3
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f001 f984 	bl	8007616 <USBD_CtlContinueRx>
 800630e:	e07d      	b.n	800640c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2b02      	cmp	r3, #2
 800631c:	d014      	beq.n	8006348 <USBD_LL_DataOutStage+0x98>
 800631e:	2b02      	cmp	r3, #2
 8006320:	d81d      	bhi.n	800635e <USBD_LL_DataOutStage+0xae>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <USBD_LL_DataOutStage+0x7c>
 8006326:	2b01      	cmp	r3, #1
 8006328:	d003      	beq.n	8006332 <USBD_LL_DataOutStage+0x82>
 800632a:	e018      	b.n	800635e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	75bb      	strb	r3, [r7, #22]
            break;
 8006330:	e018      	b.n	8006364 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006338:	b2db      	uxtb	r3, r3
 800633a:	4619      	mov	r1, r3
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fa5e 	bl	80067fe <USBD_CoreFindIF>
 8006342:	4603      	mov	r3, r0
 8006344:	75bb      	strb	r3, [r7, #22]
            break;
 8006346:	e00d      	b.n	8006364 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800634e:	b2db      	uxtb	r3, r3
 8006350:	4619      	mov	r1, r3
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fa60 	bl	8006818 <USBD_CoreFindEP>
 8006358:	4603      	mov	r3, r0
 800635a:	75bb      	strb	r3, [r7, #22]
            break;
 800635c:	e002      	b.n	8006364 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	75bb      	strb	r3, [r7, #22]
            break;
 8006362:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006364:	7dbb      	ldrb	r3, [r7, #22]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d119      	bne.n	800639e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b03      	cmp	r3, #3
 8006374:	d113      	bne.n	800639e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006376:	7dba      	ldrb	r2, [r7, #22]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	32ae      	adds	r2, #174	; 0xae
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00b      	beq.n	800639e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006386:	7dba      	ldrb	r2, [r7, #22]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800638e:	7dba      	ldrb	r2, [r7, #22]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	32ae      	adds	r2, #174	; 0xae
 8006394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f001 f94a 	bl	8007638 <USBD_CtlSendStatus>
 80063a4:	e032      	b.n	800640c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	4619      	mov	r1, r3
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fa31 	bl	8006818 <USBD_CoreFindEP>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063ba:	7dbb      	ldrb	r3, [r7, #22]
 80063bc:	2bff      	cmp	r3, #255	; 0xff
 80063be:	d025      	beq.n	800640c <USBD_LL_DataOutStage+0x15c>
 80063c0:	7dbb      	ldrb	r3, [r7, #22]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d122      	bne.n	800640c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d117      	bne.n	8006402 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80063d2:	7dba      	ldrb	r2, [r7, #22]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	32ae      	adds	r2, #174	; 0xae
 80063d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00f      	beq.n	8006402 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80063e2:	7dba      	ldrb	r2, [r7, #22]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80063ea:	7dba      	ldrb	r2, [r7, #22]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	32ae      	adds	r2, #174	; 0xae
 80063f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	7afa      	ldrb	r2, [r7, #11]
 80063f8:	4611      	mov	r1, r2
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	4798      	blx	r3
 80063fe:	4603      	mov	r3, r0
 8006400:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	e000      	b.n	800640e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	460b      	mov	r3, r1
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006424:	7afb      	ldrb	r3, [r7, #11]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d16f      	bne.n	800650a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3314      	adds	r3, #20
 800642e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006436:	2b02      	cmp	r3, #2
 8006438:	d15a      	bne.n	80064f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	429a      	cmp	r2, r3
 8006444:	d914      	bls.n	8006470 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	1ad2      	subs	r2, r2, r3
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	461a      	mov	r2, r3
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f001 f8ac 	bl	80075ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006462:	2300      	movs	r3, #0
 8006464:	2200      	movs	r2, #0
 8006466:	2100      	movs	r1, #0
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f001 fe17 	bl	800809c <USBD_LL_PrepareReceive>
 800646e:	e03f      	b.n	80064f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	d11c      	bne.n	80064b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006484:	429a      	cmp	r2, r3
 8006486:	d316      	bcc.n	80064b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006492:	429a      	cmp	r2, r3
 8006494:	d20f      	bcs.n	80064b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006496:	2200      	movs	r2, #0
 8006498:	2100      	movs	r1, #0
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f001 f88d 	bl	80075ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064a8:	2300      	movs	r3, #0
 80064aa:	2200      	movs	r2, #0
 80064ac:	2100      	movs	r1, #0
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f001 fdf4 	bl	800809c <USBD_LL_PrepareReceive>
 80064b4:	e01c      	b.n	80064f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d10f      	bne.n	80064e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d009      	beq.n	80064e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 fd2f 	bl	8007f48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f001 f8b7 	bl	800765e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d03a      	beq.n	8006570 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff fe42 	bl	8006184 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006508:	e032      	b.n	8006570 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800650a:	7afb      	ldrb	r3, [r7, #11]
 800650c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006510:	b2db      	uxtb	r3, r3
 8006512:	4619      	mov	r1, r3
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f97f 	bl	8006818 <USBD_CoreFindEP>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	2bff      	cmp	r3, #255	; 0xff
 8006522:	d025      	beq.n	8006570 <USBD_LL_DataInStage+0x15a>
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d122      	bne.n	8006570 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b03      	cmp	r3, #3
 8006534:	d11c      	bne.n	8006570 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006536:	7dfa      	ldrb	r2, [r7, #23]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	32ae      	adds	r2, #174	; 0xae
 800653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d014      	beq.n	8006570 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006546:	7dfa      	ldrb	r2, [r7, #23]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800654e:	7dfa      	ldrb	r2, [r7, #23]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	32ae      	adds	r2, #174	; 0xae
 8006554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	7afa      	ldrb	r2, [r7, #11]
 800655c:	4611      	mov	r1, r2
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	4798      	blx	r3
 8006562:	4603      	mov	r3, r0
 8006564:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006566:	7dbb      	ldrb	r3, [r7, #22]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800656c:	7dbb      	ldrb	r3, [r7, #22]
 800656e:	e000      	b.n	8006572 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d014      	beq.n	80065e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00e      	beq.n	80065e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6852      	ldr	r2, [r2, #4]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	4611      	mov	r1, r2
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	4798      	blx	r3
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80065dc:	2303      	movs	r3, #3
 80065de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	2200      	movs	r2, #0
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 fc69 	bl	8007ebe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2240      	movs	r2, #64	; 0x40
 80065f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065fc:	2340      	movs	r3, #64	; 0x40
 80065fe:	2200      	movs	r2, #0
 8006600:	2180      	movs	r1, #128	; 0x80
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 fc5b 	bl	8007ebe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2240      	movs	r2, #64	; 0x40
 8006612:	621a      	str	r2, [r3, #32]

  return ret;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	78fa      	ldrb	r2, [r7, #3]
 800662e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664c:	b2da      	uxtb	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2204      	movs	r2, #4
 8006658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b04      	cmp	r3, #4
 800667c:	d106      	bne.n	800668c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006684:	b2da      	uxtb	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d110      	bne.n	80066d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	32ae      	adds	r2, #174	; 0xae
 80066f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e01c      	b.n	8006736 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b03      	cmp	r3, #3
 8006706:	d115      	bne.n	8006734 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32ae      	adds	r2, #174	; 0xae
 8006712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	32ae      	adds	r2, #174	; 0xae
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	78fa      	ldrb	r2, [r7, #3]
 800672e:	4611      	mov	r1, r2
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	32ae      	adds	r2, #174	; 0xae
 8006754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800675c:	2303      	movs	r3, #3
 800675e:	e01c      	b.n	800679a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b03      	cmp	r3, #3
 800676a:	d115      	bne.n	8006798 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32ae      	adds	r2, #174	; 0xae
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	32ae      	adds	r2, #174	; 0xae
 800678a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	78fa      	ldrb	r2, [r7, #3]
 8006792:	4611      	mov	r1, r2
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00e      	beq.n	80067f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6852      	ldr	r2, [r2, #4]
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	4611      	mov	r1, r2
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067f0:	2303      	movs	r3, #3
 80067f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800680a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006824:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b086      	sub	sp, #24
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	885b      	ldrh	r3, [r3, #2]
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	429a      	cmp	r2, r3
 8006858:	d920      	bls.n	800689c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006862:	e013      	b.n	800688c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006864:	f107 030a 	add.w	r3, r7, #10
 8006868:	4619      	mov	r1, r3
 800686a:	6978      	ldr	r0, [r7, #20]
 800686c:	f000 f81b 	bl	80068a6 <USBD_GetNextDesc>
 8006870:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b05      	cmp	r3, #5
 8006878:	d108      	bne.n	800688c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	789b      	ldrb	r3, [r3, #2]
 8006882:	78fa      	ldrb	r2, [r7, #3]
 8006884:	429a      	cmp	r2, r3
 8006886:	d008      	beq.n	800689a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	885b      	ldrh	r3, [r3, #2]
 8006890:	b29a      	uxth	r2, r3
 8006892:	897b      	ldrh	r3, [r7, #10]
 8006894:	429a      	cmp	r2, r3
 8006896:	d8e5      	bhi.n	8006864 <USBD_GetEpDesc+0x32>
 8006898:	e000      	b.n	800689c <USBD_GetEpDesc+0x6a>
          break;
 800689a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800689c:	693b      	ldr	r3, [r7, #16]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	881a      	ldrh	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4413      	add	r3, r2
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068d2:	68fb      	ldr	r3, [r7, #12]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	3301      	adds	r3, #1
 80068f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068fe:	8a3b      	ldrh	r3, [r7, #16]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	b21a      	sxth	r2, r3
 8006904:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006908:	4313      	orrs	r3, r2
 800690a:	b21b      	sxth	r3, r3
 800690c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800690e:	89fb      	ldrh	r3, [r7, #14]
}
 8006910:	4618      	mov	r0, r3
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006932:	2b40      	cmp	r3, #64	; 0x40
 8006934:	d005      	beq.n	8006942 <USBD_StdDevReq+0x26>
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d857      	bhi.n	80069ea <USBD_StdDevReq+0xce>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00f      	beq.n	800695e <USBD_StdDevReq+0x42>
 800693e:	2b20      	cmp	r3, #32
 8006940:	d153      	bne.n	80069ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	32ae      	adds	r2, #174	; 0xae
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
      break;
 800695c:	e04a      	b.n	80069f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	785b      	ldrb	r3, [r3, #1]
 8006962:	2b09      	cmp	r3, #9
 8006964:	d83b      	bhi.n	80069de <USBD_StdDevReq+0xc2>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <USBD_StdDevReq+0x50>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	080069c1 	.word	0x080069c1
 8006970:	080069d5 	.word	0x080069d5
 8006974:	080069df 	.word	0x080069df
 8006978:	080069cb 	.word	0x080069cb
 800697c:	080069df 	.word	0x080069df
 8006980:	0800699f 	.word	0x0800699f
 8006984:	08006995 	.word	0x08006995
 8006988:	080069df 	.word	0x080069df
 800698c:	080069b7 	.word	0x080069b7
 8006990:	080069a9 	.word	0x080069a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa3c 	bl	8006e14 <USBD_GetDescriptor>
          break;
 800699c:	e024      	b.n	80069e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fba1 	bl	80070e8 <USBD_SetAddress>
          break;
 80069a6:	e01f      	b.n	80069e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fbe0 	bl	8007170 <USBD_SetConfig>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
          break;
 80069b4:	e018      	b.n	80069e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fc83 	bl	80072c4 <USBD_GetConfig>
          break;
 80069be:	e013      	b.n	80069e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fcb4 	bl	8007330 <USBD_GetStatus>
          break;
 80069c8:	e00e      	b.n	80069e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fce3 	bl	8007398 <USBD_SetFeature>
          break;
 80069d2:	e009      	b.n	80069e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fd07 	bl	80073ea <USBD_ClrFeature>
          break;
 80069dc:	e004      	b.n	80069e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fd5e 	bl	80074a2 <USBD_CtlError>
          break;
 80069e6:	bf00      	nop
      }
      break;
 80069e8:	e004      	b.n	80069f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fd58 	bl	80074a2 <USBD_CtlError>
      break;
 80069f2:	bf00      	nop
  }

  return ret;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop

08006a00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d005      	beq.n	8006a26 <USBD_StdItfReq+0x26>
 8006a1a:	2b40      	cmp	r3, #64	; 0x40
 8006a1c:	d852      	bhi.n	8006ac4 <USBD_StdItfReq+0xc4>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <USBD_StdItfReq+0x26>
 8006a22:	2b20      	cmp	r3, #32
 8006a24:	d14e      	bne.n	8006ac4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d840      	bhi.n	8006ab6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	889b      	ldrh	r3, [r3, #4]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d836      	bhi.n	8006aac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	889b      	ldrh	r3, [r3, #4]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff fed9 	bl	80067fe <USBD_CoreFindIF>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2bff      	cmp	r3, #255	; 0xff
 8006a54:	d01d      	beq.n	8006a92 <USBD_StdItfReq+0x92>
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11a      	bne.n	8006a92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a5c:	7bba      	ldrb	r2, [r7, #14]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32ae      	adds	r2, #174	; 0xae
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00f      	beq.n	8006a8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a6c:	7bba      	ldrb	r2, [r7, #14]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a74:	7bba      	ldrb	r2, [r7, #14]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	32ae      	adds	r2, #174	; 0xae
 8006a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a8a:	e004      	b.n	8006a96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a90:	e001      	b.n	8006a96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a92:	2303      	movs	r3, #3
 8006a94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	88db      	ldrh	r3, [r3, #6]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d110      	bne.n	8006ac0 <USBD_StdItfReq+0xc0>
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10d      	bne.n	8006ac0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fdc7 	bl	8007638 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006aaa:	e009      	b.n	8006ac0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fcf7 	bl	80074a2 <USBD_CtlError>
          break;
 8006ab4:	e004      	b.n	8006ac0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fcf2 	bl	80074a2 <USBD_CtlError>
          break;
 8006abe:	e000      	b.n	8006ac2 <USBD_StdItfReq+0xc2>
          break;
 8006ac0:	bf00      	nop
      }
      break;
 8006ac2:	e004      	b.n	8006ace <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fceb 	bl	80074a2 <USBD_CtlError>
      break;
 8006acc:	bf00      	nop
  }

  return ret;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	889b      	ldrh	r3, [r3, #4]
 8006aea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	d007      	beq.n	8006b08 <USBD_StdEPReq+0x30>
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	f200 817f 	bhi.w	8006dfc <USBD_StdEPReq+0x324>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d02a      	beq.n	8006b58 <USBD_StdEPReq+0x80>
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	f040 817a 	bne.w	8006dfc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff fe83 	bl	8006818 <USBD_CoreFindEP>
 8006b12:	4603      	mov	r3, r0
 8006b14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b16:	7b7b      	ldrb	r3, [r7, #13]
 8006b18:	2bff      	cmp	r3, #255	; 0xff
 8006b1a:	f000 8174 	beq.w	8006e06 <USBD_StdEPReq+0x32e>
 8006b1e:	7b7b      	ldrb	r3, [r7, #13]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f040 8170 	bne.w	8006e06 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006b26:	7b7a      	ldrb	r2, [r7, #13]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006b2e:	7b7a      	ldrb	r2, [r7, #13]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	32ae      	adds	r2, #174	; 0xae
 8006b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8163 	beq.w	8006e06 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b40:	7b7a      	ldrb	r2, [r7, #13]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	32ae      	adds	r2, #174	; 0xae
 8006b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b56:	e156      	b.n	8006e06 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d008      	beq.n	8006b72 <USBD_StdEPReq+0x9a>
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	f300 8145 	bgt.w	8006df0 <USBD_StdEPReq+0x318>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 809b 	beq.w	8006ca2 <USBD_StdEPReq+0x1ca>
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d03c      	beq.n	8006bea <USBD_StdEPReq+0x112>
 8006b70:	e13e      	b.n	8006df0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d002      	beq.n	8006b84 <USBD_StdEPReq+0xac>
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d016      	beq.n	8006bb0 <USBD_StdEPReq+0xd8>
 8006b82:	e02c      	b.n	8006bde <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00d      	beq.n	8006ba6 <USBD_StdEPReq+0xce>
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	2b80      	cmp	r3, #128	; 0x80
 8006b8e:	d00a      	beq.n	8006ba6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f9d7 	bl	8007f48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b9a:	2180      	movs	r1, #128	; 0x80
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 f9d3 	bl	8007f48 <USBD_LL_StallEP>
 8006ba2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ba4:	e020      	b.n	8006be8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fc7a 	bl	80074a2 <USBD_CtlError>
              break;
 8006bae:	e01b      	b.n	8006be8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	885b      	ldrh	r3, [r3, #2]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10e      	bne.n	8006bd6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <USBD_StdEPReq+0xfe>
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b80      	cmp	r3, #128	; 0x80
 8006bc2:	d008      	beq.n	8006bd6 <USBD_StdEPReq+0xfe>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	88db      	ldrh	r3, [r3, #6]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d104      	bne.n	8006bd6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f9b9 	bl	8007f48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fd2e 	bl	8007638 <USBD_CtlSendStatus>

              break;
 8006bdc:	e004      	b.n	8006be8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fc5e 	bl	80074a2 <USBD_CtlError>
              break;
 8006be6:	bf00      	nop
          }
          break;
 8006be8:	e107      	b.n	8006dfa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d002      	beq.n	8006bfc <USBD_StdEPReq+0x124>
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d016      	beq.n	8006c28 <USBD_StdEPReq+0x150>
 8006bfa:	e04b      	b.n	8006c94 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <USBD_StdEPReq+0x146>
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b80      	cmp	r3, #128	; 0x80
 8006c06:	d00a      	beq.n	8006c1e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f99b 	bl	8007f48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c12:	2180      	movs	r1, #128	; 0x80
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 f997 	bl	8007f48 <USBD_LL_StallEP>
 8006c1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c1c:	e040      	b.n	8006ca0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fc3e 	bl	80074a2 <USBD_CtlError>
              break;
 8006c26:	e03b      	b.n	8006ca0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	885b      	ldrh	r3, [r3, #2]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d136      	bne.n	8006c9e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 f9a1 	bl	8007f86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fcf7 	bl	8007638 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff fde2 	bl	8006818 <USBD_CoreFindEP>
 8006c54:	4603      	mov	r3, r0
 8006c56:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c58:	7b7b      	ldrb	r3, [r7, #13]
 8006c5a:	2bff      	cmp	r3, #255	; 0xff
 8006c5c:	d01f      	beq.n	8006c9e <USBD_StdEPReq+0x1c6>
 8006c5e:	7b7b      	ldrb	r3, [r7, #13]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11c      	bne.n	8006c9e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c64:	7b7a      	ldrb	r2, [r7, #13]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c6c:	7b7a      	ldrb	r2, [r7, #13]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	32ae      	adds	r2, #174	; 0xae
 8006c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d010      	beq.n	8006c9e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c7c:	7b7a      	ldrb	r2, [r7, #13]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	32ae      	adds	r2, #174	; 0xae
 8006c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c92:	e004      	b.n	8006c9e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fc03 	bl	80074a2 <USBD_CtlError>
              break;
 8006c9c:	e000      	b.n	8006ca0 <USBD_StdEPReq+0x1c8>
              break;
 8006c9e:	bf00      	nop
          }
          break;
 8006ca0:	e0ab      	b.n	8006dfa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d002      	beq.n	8006cb4 <USBD_StdEPReq+0x1dc>
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d032      	beq.n	8006d18 <USBD_StdEPReq+0x240>
 8006cb2:	e097      	b.n	8006de4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <USBD_StdEPReq+0x1f2>
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	2b80      	cmp	r3, #128	; 0x80
 8006cbe:	d004      	beq.n	8006cca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fbed 	bl	80074a2 <USBD_CtlError>
                break;
 8006cc8:	e091      	b.n	8006dee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	da0b      	bge.n	8006cea <USBD_StdEPReq+0x212>
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	3310      	adds	r3, #16
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	e00b      	b.n	8006d02 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	4413      	add	r3, r2
 8006d00:	3304      	adds	r3, #4
 8006d02:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fc37 	bl	8007584 <USBD_CtlSendData>
              break;
 8006d16:	e06a      	b.n	8006dee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da11      	bge.n	8006d44 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	f003 020f 	and.w	r2, r3, #15
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	3324      	adds	r3, #36	; 0x24
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d117      	bne.n	8006d6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fbb0 	bl	80074a2 <USBD_CtlError>
                  break;
 8006d42:	e054      	b.n	8006dee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	f003 020f 	and.w	r2, r3, #15
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d104      	bne.n	8006d6a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fb9d 	bl	80074a2 <USBD_CtlError>
                  break;
 8006d68:	e041      	b.n	8006dee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da0b      	bge.n	8006d8a <USBD_StdEPReq+0x2b2>
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	3310      	adds	r3, #16
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	4413      	add	r3, r2
 8006d86:	3304      	adds	r3, #4
 8006d88:	e00b      	b.n	8006da2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4413      	add	r3, r2
 8006da0:	3304      	adds	r3, #4
 8006da2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <USBD_StdEPReq+0x2d8>
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	2b80      	cmp	r3, #128	; 0x80
 8006dae:	d103      	bne.n	8006db8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e00e      	b.n	8006dd6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 f901 	bl	8007fc4 <USBD_LL_IsStallEP>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e002      	b.n	8006dd6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fbd1 	bl	8007584 <USBD_CtlSendData>
              break;
 8006de2:	e004      	b.n	8006dee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fb5b 	bl	80074a2 <USBD_CtlError>
              break;
 8006dec:	bf00      	nop
          }
          break;
 8006dee:	e004      	b.n	8006dfa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fb55 	bl	80074a2 <USBD_CtlError>
          break;
 8006df8:	bf00      	nop
      }
      break;
 8006dfa:	e005      	b.n	8006e08 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fb4f 	bl	80074a2 <USBD_CtlError>
      break;
 8006e04:	e000      	b.n	8006e08 <USBD_StdEPReq+0x330>
      break;
 8006e06:	bf00      	nop
  }

  return ret;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	885b      	ldrh	r3, [r3, #2]
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	2b06      	cmp	r3, #6
 8006e36:	f200 8128 	bhi.w	800708a <USBD_GetDescriptor+0x276>
 8006e3a:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <USBD_GetDescriptor+0x2c>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	08006e75 	.word	0x08006e75
 8006e48:	08006eb5 	.word	0x08006eb5
 8006e4c:	0800708b 	.word	0x0800708b
 8006e50:	0800708b 	.word	0x0800708b
 8006e54:	0800702b 	.word	0x0800702b
 8006e58:	08007057 	.word	0x08007057
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	7c12      	ldrb	r2, [r2, #16]
 8006e68:	f107 0108 	add.w	r1, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
      break;
 8006e72:	e112      	b.n	800709a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	7c1b      	ldrb	r3, [r3, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10d      	bne.n	8006e98 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	f107 0208 	add.w	r2, r7, #8
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	2202      	movs	r2, #2
 8006e94:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e96:	e100      	b.n	800709a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	f107 0208 	add.w	r2, r7, #8
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	2202      	movs	r2, #2
 8006eb0:	701a      	strb	r2, [r3, #0]
      break;
 8006eb2:	e0f2      	b.n	800709a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	885b      	ldrh	r3, [r3, #2]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	f200 80ac 	bhi.w	8007018 <USBD_GetDescriptor+0x204>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <USBD_GetDescriptor+0xb4>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006ee1 	.word	0x08006ee1
 8006ecc:	08006f15 	.word	0x08006f15
 8006ed0:	08006f49 	.word	0x08006f49
 8006ed4:	08006f7d 	.word	0x08006f7d
 8006ed8:	08006fb1 	.word	0x08006fb1
 8006edc:	08006fe5 	.word	0x08006fe5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7c12      	ldrb	r2, [r2, #16]
 8006ef8:	f107 0108 	add.w	r1, r7, #8
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f02:	e091      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 facb 	bl	80074a2 <USBD_CtlError>
            err++;
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	72fb      	strb	r3, [r7, #11]
          break;
 8006f12:	e089      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	7c12      	ldrb	r2, [r2, #16]
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f36:	e077      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fab1 	bl	80074a2 <USBD_CtlError>
            err++;
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	3301      	adds	r3, #1
 8006f44:	72fb      	strb	r3, [r7, #11]
          break;
 8006f46:	e06f      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	7c12      	ldrb	r2, [r2, #16]
 8006f60:	f107 0108 	add.w	r1, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f6a:	e05d      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa97 	bl	80074a2 <USBD_CtlError>
            err++;
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	3301      	adds	r3, #1
 8006f78:	72fb      	strb	r3, [r7, #11]
          break;
 8006f7a:	e055      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	7c12      	ldrb	r2, [r2, #16]
 8006f94:	f107 0108 	add.w	r1, r7, #8
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
 8006f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f9e:	e043      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa7d 	bl	80074a2 <USBD_CtlError>
            err++;
 8006fa8:	7afb      	ldrb	r3, [r7, #11]
 8006faa:	3301      	adds	r3, #1
 8006fac:	72fb      	strb	r3, [r7, #11]
          break;
 8006fae:	e03b      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00b      	beq.n	8006fd4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	7c12      	ldrb	r2, [r2, #16]
 8006fc8:	f107 0108 	add.w	r1, r7, #8
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4798      	blx	r3
 8006fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fd2:	e029      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa63 	bl	80074a2 <USBD_CtlError>
            err++;
 8006fdc:	7afb      	ldrb	r3, [r7, #11]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fe2:	e021      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7c12      	ldrb	r2, [r2, #16]
 8006ffc:	f107 0108 	add.w	r1, r7, #8
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
 8007004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007006:	e00f      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa49 	bl	80074a2 <USBD_CtlError>
            err++;
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	3301      	adds	r3, #1
 8007014:	72fb      	strb	r3, [r7, #11]
          break;
 8007016:	e007      	b.n	8007028 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa41 	bl	80074a2 <USBD_CtlError>
          err++;
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	3301      	adds	r3, #1
 8007024:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007026:	bf00      	nop
      }
      break;
 8007028:	e037      	b.n	800709a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	7c1b      	ldrb	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d109      	bne.n	8007046 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703a:	f107 0208 	add.w	r2, r7, #8
 800703e:	4610      	mov	r0, r2
 8007040:	4798      	blx	r3
 8007042:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007044:	e029      	b.n	800709a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fa2a 	bl	80074a2 <USBD_CtlError>
        err++;
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	3301      	adds	r3, #1
 8007052:	72fb      	strb	r3, [r7, #11]
      break;
 8007054:	e021      	b.n	800709a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	7c1b      	ldrb	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10d      	bne.n	800707a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	f107 0208 	add.w	r2, r7, #8
 800706a:	4610      	mov	r0, r2
 800706c:	4798      	blx	r3
 800706e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	2207      	movs	r2, #7
 8007076:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007078:	e00f      	b.n	800709a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa10 	bl	80074a2 <USBD_CtlError>
        err++;
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	3301      	adds	r3, #1
 8007086:	72fb      	strb	r3, [r7, #11]
      break;
 8007088:	e007      	b.n	800709a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fa08 	bl	80074a2 <USBD_CtlError>
      err++;
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	3301      	adds	r3, #1
 8007096:	72fb      	strb	r3, [r7, #11]
      break;
 8007098:	bf00      	nop
  }

  if (err != 0U)
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d11e      	bne.n	80070de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	88db      	ldrh	r3, [r3, #6]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d016      	beq.n	80070d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80070a8:	893b      	ldrh	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00e      	beq.n	80070cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	88da      	ldrh	r2, [r3, #6]
 80070b2:	893b      	ldrh	r3, [r7, #8]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	bf28      	it	cs
 80070b8:	4613      	movcs	r3, r2
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070be:	893b      	ldrh	r3, [r7, #8]
 80070c0:	461a      	mov	r2, r3
 80070c2:	68f9      	ldr	r1, [r7, #12]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa5d 	bl	8007584 <USBD_CtlSendData>
 80070ca:	e009      	b.n	80070e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f9e7 	bl	80074a2 <USBD_CtlError>
 80070d4:	e004      	b.n	80070e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 faae 	bl	8007638 <USBD_CtlSendStatus>
 80070dc:	e000      	b.n	80070e0 <USBD_GetDescriptor+0x2cc>
    return;
 80070de:	bf00      	nop
  }
}
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop

080070e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	889b      	ldrh	r3, [r3, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d131      	bne.n	800715e <USBD_SetAddress+0x76>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	88db      	ldrh	r3, [r3, #6]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d12d      	bne.n	800715e <USBD_SetAddress+0x76>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	885b      	ldrh	r3, [r3, #2]
 8007106:	2b7f      	cmp	r3, #127	; 0x7f
 8007108:	d829      	bhi.n	800715e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	885b      	ldrh	r3, [r3, #2]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007114:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b03      	cmp	r3, #3
 8007120:	d104      	bne.n	800712c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f9bc 	bl	80074a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712a:	e01d      	b.n	8007168 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	7bfa      	ldrb	r2, [r7, #15]
 8007130:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 ff6f 	bl	800801c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa7a 	bl	8007638 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007152:	e009      	b.n	8007168 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715c:	e004      	b.n	8007168 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f99e 	bl	80074a2 <USBD_CtlError>
  }
}
 8007166:	bf00      	nop
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	b2da      	uxtb	r2, r3
 8007184:	4b4e      	ldr	r3, [pc, #312]	; (80072c0 <USBD_SetConfig+0x150>)
 8007186:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007188:	4b4d      	ldr	r3, [pc, #308]	; (80072c0 <USBD_SetConfig+0x150>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d905      	bls.n	800719c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f985 	bl	80074a2 <USBD_CtlError>
    return USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	e08c      	b.n	80072b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d002      	beq.n	80071ae <USBD_SetConfig+0x3e>
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d029      	beq.n	8007200 <USBD_SetConfig+0x90>
 80071ac:	e075      	b.n	800729a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80071ae:	4b44      	ldr	r3, [pc, #272]	; (80072c0 <USBD_SetConfig+0x150>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d020      	beq.n	80071f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80071b6:	4b42      	ldr	r3, [pc, #264]	; (80072c0 <USBD_SetConfig+0x150>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071c0:	4b3f      	ldr	r3, [pc, #252]	; (80072c0 <USBD_SetConfig+0x150>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7fe ffe7 	bl	800619a <USBD_SetClassConfig>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d008      	beq.n	80071e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f962 	bl	80074a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071e6:	e065      	b.n	80072b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fa25 	bl	8007638 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2203      	movs	r2, #3
 80071f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071f6:	e05d      	b.n	80072b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fa1d 	bl	8007638 <USBD_CtlSendStatus>
      break;
 80071fe:	e059      	b.n	80072b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007200:	4b2f      	ldr	r3, [pc, #188]	; (80072c0 <USBD_SetConfig+0x150>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d112      	bne.n	800722e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007210:	4b2b      	ldr	r3, [pc, #172]	; (80072c0 <USBD_SetConfig+0x150>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800721a:	4b29      	ldr	r3, [pc, #164]	; (80072c0 <USBD_SetConfig+0x150>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7fe ffd6 	bl	80061d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa06 	bl	8007638 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800722c:	e042      	b.n	80072b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800722e:	4b24      	ldr	r3, [pc, #144]	; (80072c0 <USBD_SetConfig+0x150>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	429a      	cmp	r2, r3
 800723a:	d02a      	beq.n	8007292 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7fe ffc4 	bl	80061d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800724a:	4b1d      	ldr	r3, [pc, #116]	; (80072c0 <USBD_SetConfig+0x150>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007254:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <USBD_SetConfig+0x150>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fe ff9d 	bl	800619a <USBD_SetClassConfig>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00f      	beq.n	800728a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f918 	bl	80074a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fe ffa9 	bl	80061d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007288:	e014      	b.n	80072b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f9d4 	bl	8007638 <USBD_CtlSendStatus>
      break;
 8007290:	e010      	b.n	80072b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f9d0 	bl	8007638 <USBD_CtlSendStatus>
      break;
 8007298:	e00c      	b.n	80072b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f900 	bl	80074a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072a2:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <USBD_SetConfig+0x150>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7fe ff92 	bl	80061d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80072ae:	2303      	movs	r3, #3
 80072b0:	73fb      	strb	r3, [r7, #15]
      break;
 80072b2:	bf00      	nop
  }

  return ret;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	200001ac 	.word	0x200001ac

080072c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	88db      	ldrh	r3, [r3, #6]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d004      	beq.n	80072e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f8e2 	bl	80074a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072de:	e023      	b.n	8007328 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	dc02      	bgt.n	80072f2 <USBD_GetConfig+0x2e>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	dc03      	bgt.n	80072f8 <USBD_GetConfig+0x34>
 80072f0:	e015      	b.n	800731e <USBD_GetConfig+0x5a>
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d00b      	beq.n	800730e <USBD_GetConfig+0x4a>
 80072f6:	e012      	b.n	800731e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3308      	adds	r3, #8
 8007302:	2201      	movs	r2, #1
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f93c 	bl	8007584 <USBD_CtlSendData>
        break;
 800730c:	e00c      	b.n	8007328 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3304      	adds	r3, #4
 8007312:	2201      	movs	r2, #1
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f934 	bl	8007584 <USBD_CtlSendData>
        break;
 800731c:	e004      	b.n	8007328 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f8be 	bl	80074a2 <USBD_CtlError>
        break;
 8007326:	bf00      	nop
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007340:	b2db      	uxtb	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	2b02      	cmp	r3, #2
 8007346:	d81e      	bhi.n	8007386 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	88db      	ldrh	r3, [r3, #6]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d004      	beq.n	800735a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f8a5 	bl	80074a2 <USBD_CtlError>
        break;
 8007358:	e01a      	b.n	8007390 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007366:	2b00      	cmp	r3, #0
 8007368:	d005      	beq.n	8007376 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f043 0202 	orr.w	r2, r3, #2
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	330c      	adds	r3, #12
 800737a:	2202      	movs	r2, #2
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f900 	bl	8007584 <USBD_CtlSendData>
      break;
 8007384:	e004      	b.n	8007390 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f88a 	bl	80074a2 <USBD_CtlError>
      break;
 800738e:	bf00      	nop
  }
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	885b      	ldrh	r3, [r3, #2]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d107      	bne.n	80073ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f940 	bl	8007638 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80073b8:	e013      	b.n	80073e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	885b      	ldrh	r3, [r3, #2]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d10b      	bne.n	80073da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	889b      	ldrh	r3, [r3, #4]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f930 	bl	8007638 <USBD_CtlSendStatus>
}
 80073d8:	e003      	b.n	80073e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f860 	bl	80074a2 <USBD_CtlError>
}
 80073e2:	bf00      	nop
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d80b      	bhi.n	800741a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	885b      	ldrh	r3, [r3, #2]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d10c      	bne.n	8007424 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f910 	bl	8007638 <USBD_CtlSendStatus>
      }
      break;
 8007418:	e004      	b.n	8007424 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f840 	bl	80074a2 <USBD_CtlError>
      break;
 8007422:	e000      	b.n	8007426 <USBD_ClrFeature+0x3c>
      break;
 8007424:	bf00      	nop
  }
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	781a      	ldrb	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3301      	adds	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	781a      	ldrb	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3301      	adds	r3, #1
 8007456:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff fa41 	bl	80068e0 <SWAPBYTE>
 800745e:	4603      	mov	r3, r0
 8007460:	461a      	mov	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3301      	adds	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3301      	adds	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7ff fa34 	bl	80068e0 <SWAPBYTE>
 8007478:	4603      	mov	r3, r0
 800747a:	461a      	mov	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3301      	adds	r3, #1
 800748a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff fa27 	bl	80068e0 <SWAPBYTE>
 8007492:	4603      	mov	r3, r0
 8007494:	461a      	mov	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	80da      	strh	r2, [r3, #6]
}
 800749a:	bf00      	nop
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ac:	2180      	movs	r1, #128	; 0x80
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fd4a 	bl	8007f48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074b4:	2100      	movs	r1, #0
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fd46 	bl	8007f48 <USBD_LL_StallEP>
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d036      	beq.n	8007548 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80074de:	6938      	ldr	r0, [r7, #16]
 80074e0:	f000 f836 	bl	8007550 <USBD_GetLen>
 80074e4:	4603      	mov	r3, r0
 80074e6:	3301      	adds	r3, #1
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	4413      	add	r3, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	3301      	adds	r3, #1
 8007502:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	4413      	add	r3, r2
 800750a:	2203      	movs	r2, #3
 800750c:	701a      	strb	r2, [r3, #0]
  idx++;
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	3301      	adds	r3, #1
 8007512:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007514:	e013      	b.n	800753e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	4413      	add	r3, r2
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3301      	adds	r3, #1
 8007526:	613b      	str	r3, [r7, #16]
    idx++;
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	3301      	adds	r3, #1
 800752c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	4413      	add	r3, r2
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
    idx++;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	3301      	adds	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e7      	bne.n	8007516 <USBD_GetString+0x52>
 8007546:	e000      	b.n	800754a <USBD_GetString+0x86>
    return;
 8007548:	bf00      	nop
  }
}
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007560:	e005      	b.n	800756e <USBD_GetLen+0x1e>
  {
    len++;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	3301      	adds	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	3301      	adds	r3, #1
 800756c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f5      	bne.n	8007562 <USBD_GetLen+0x12>
  }

  return len;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2202      	movs	r2, #2
 8007594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	2100      	movs	r1, #0
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 fd55 	bl	800805a <USBD_LL_Transmit>

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	2100      	movs	r1, #0
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fd44 	bl	800805a <USBD_LL_Transmit>

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2203      	movs	r2, #3
 80075ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	2100      	movs	r1, #0
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fd48 	bl	800809c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	2100      	movs	r1, #0
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fd37 	bl	800809c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2204      	movs	r2, #4
 8007644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007648:	2300      	movs	r3, #0
 800764a:	2200      	movs	r2, #0
 800764c:	2100      	movs	r1, #0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fd03 	bl	800805a <USBD_LL_Transmit>

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2205      	movs	r2, #5
 800766a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800766e:	2300      	movs	r3, #0
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fd11 	bl	800809c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007688:	2200      	movs	r2, #0
 800768a:	4912      	ldr	r1, [pc, #72]	; (80076d4 <MX_USB_DEVICE_Init+0x50>)
 800768c:	4812      	ldr	r0, [pc, #72]	; (80076d8 <MX_USB_DEVICE_Init+0x54>)
 800768e:	f7fe fcd7 	bl	8006040 <USBD_Init>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007698:	f7f9 fabc 	bl	8000c14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800769c:	490f      	ldr	r1, [pc, #60]	; (80076dc <MX_USB_DEVICE_Init+0x58>)
 800769e:	480e      	ldr	r0, [pc, #56]	; (80076d8 <MX_USB_DEVICE_Init+0x54>)
 80076a0:	f7fe fd2e 	bl	8006100 <USBD_RegisterClass>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076aa:	f7f9 fab3 	bl	8000c14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076ae:	490c      	ldr	r1, [pc, #48]	; (80076e0 <MX_USB_DEVICE_Init+0x5c>)
 80076b0:	4809      	ldr	r0, [pc, #36]	; (80076d8 <MX_USB_DEVICE_Init+0x54>)
 80076b2:	f7fe fbef 	bl	8005e94 <USBD_CDC_RegisterInterface>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076bc:	f7f9 faaa 	bl	8000c14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076c0:	4805      	ldr	r0, [pc, #20]	; (80076d8 <MX_USB_DEVICE_Init+0x54>)
 80076c2:	f7fe fd53 	bl	800616c <USBD_Start>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076cc:	f7f9 faa2 	bl	8000c14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076d0:	bf00      	nop
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	200000b4 	.word	0x200000b4
 80076d8:	200001b0 	.word	0x200001b0
 80076dc:	20000018 	.word	0x20000018
 80076e0:	200000a0 	.word	0x200000a0

080076e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076e8:	2200      	movs	r2, #0
 80076ea:	4905      	ldr	r1, [pc, #20]	; (8007700 <CDC_Init_FS+0x1c>)
 80076ec:	4805      	ldr	r0, [pc, #20]	; (8007704 <CDC_Init_FS+0x20>)
 80076ee:	f7fe fbeb 	bl	8005ec8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076f2:	4905      	ldr	r1, [pc, #20]	; (8007708 <CDC_Init_FS+0x24>)
 80076f4:	4803      	ldr	r0, [pc, #12]	; (8007704 <CDC_Init_FS+0x20>)
 80076f6:	f7fe fc09 	bl	8005f0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000c8c 	.word	0x20000c8c
 8007704:	200001b0 	.word	0x200001b0
 8007708:	2000048c 	.word	0x2000048c

0800770c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007710:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007712:	4618      	mov	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
 8007728:	4613      	mov	r3, r2
 800772a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	2b23      	cmp	r3, #35	; 0x23
 8007730:	d85c      	bhi.n	80077ec <CDC_Control_FS+0xd0>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <CDC_Control_FS+0x1c>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	080077ed 	.word	0x080077ed
 800773c:	080077ed 	.word	0x080077ed
 8007740:	080077ed 	.word	0x080077ed
 8007744:	080077ed 	.word	0x080077ed
 8007748:	080077ed 	.word	0x080077ed
 800774c:	080077ed 	.word	0x080077ed
 8007750:	080077ed 	.word	0x080077ed
 8007754:	080077ed 	.word	0x080077ed
 8007758:	080077ed 	.word	0x080077ed
 800775c:	080077ed 	.word	0x080077ed
 8007760:	080077ed 	.word	0x080077ed
 8007764:	080077ed 	.word	0x080077ed
 8007768:	080077ed 	.word	0x080077ed
 800776c:	080077ed 	.word	0x080077ed
 8007770:	080077ed 	.word	0x080077ed
 8007774:	080077ed 	.word	0x080077ed
 8007778:	080077ed 	.word	0x080077ed
 800777c:	080077ed 	.word	0x080077ed
 8007780:	080077ed 	.word	0x080077ed
 8007784:	080077ed 	.word	0x080077ed
 8007788:	080077ed 	.word	0x080077ed
 800778c:	080077ed 	.word	0x080077ed
 8007790:	080077ed 	.word	0x080077ed
 8007794:	080077ed 	.word	0x080077ed
 8007798:	080077ed 	.word	0x080077ed
 800779c:	080077ed 	.word	0x080077ed
 80077a0:	080077ed 	.word	0x080077ed
 80077a4:	080077ed 	.word	0x080077ed
 80077a8:	080077ed 	.word	0x080077ed
 80077ac:	080077ed 	.word	0x080077ed
 80077b0:	080077ed 	.word	0x080077ed
 80077b4:	080077ed 	.word	0x080077ed
 80077b8:	080077c9 	.word	0x080077c9
 80077bc:	080077db 	.word	0x080077db
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	080077ed 	.word	0x080077ed
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80077c8:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <CDC_Control_FS+0xe0>)
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	6810      	ldr	r0, [r2, #0]
 80077ce:	6018      	str	r0, [r3, #0]
 80077d0:	8891      	ldrh	r1, [r2, #4]
 80077d2:	7992      	ldrb	r2, [r2, #6]
 80077d4:	8099      	strh	r1, [r3, #4]
 80077d6:	719a      	strb	r2, [r3, #6]
    break;
 80077d8:	e009      	b.n	80077ee <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	4a07      	ldr	r2, [pc, #28]	; (80077fc <CDC_Control_FS+0xe0>)
 80077de:	6810      	ldr	r0, [r2, #0]
 80077e0:	6018      	str	r0, [r3, #0]
 80077e2:	8891      	ldrh	r1, [r2, #4]
 80077e4:	7992      	ldrb	r2, [r2, #6]
 80077e6:	8099      	strh	r1, [r3, #4]
 80077e8:	719a      	strb	r2, [r3, #6]
    break;
 80077ea:	e000      	b.n	80077ee <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077ec:	bf00      	nop
  }

  return (USBD_OK);
 80077ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	20000098 	.word	0x20000098

08007800 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4805      	ldr	r0, [pc, #20]	; (8007824 <CDC_Receive_FS+0x24>)
 800780e:	f7fe fb7d 	bl	8005f0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007812:	4804      	ldr	r0, [pc, #16]	; (8007824 <CDC_Receive_FS+0x24>)
 8007814:	f7fe fbde 	bl	8005fd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007818:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200001b0 	.word	0x200001b0

08007828 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007838:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <CDC_Transmit_FS+0x48>)
 800783a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800783e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800784a:	2301      	movs	r3, #1
 800784c:	e00b      	b.n	8007866 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800784e:	887b      	ldrh	r3, [r7, #2]
 8007850:	461a      	mov	r2, r3
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	4806      	ldr	r0, [pc, #24]	; (8007870 <CDC_Transmit_FS+0x48>)
 8007856:	f7fe fb37 	bl	8005ec8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800785a:	4805      	ldr	r0, [pc, #20]	; (8007870 <CDC_Transmit_FS+0x48>)
 800785c:	f7fe fb74 	bl	8005f48 <USBD_CDC_TransmitPacket>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	200001b0 	.word	0x200001b0

08007874 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800788a:	4618      	mov	r0, r3
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	6039      	str	r1, [r7, #0]
 80078a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2212      	movs	r2, #18
 80078a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078aa:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	200000d0 	.word	0x200000d0

080078bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	6039      	str	r1, [r7, #0]
 80078c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2204      	movs	r2, #4
 80078cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078ce:	4b03      	ldr	r3, [pc, #12]	; (80078dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	200000e4 	.word	0x200000e4

080078e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	6039      	str	r1, [r7, #0]
 80078ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	4907      	ldr	r1, [pc, #28]	; (8007914 <USBD_FS_ProductStrDescriptor+0x34>)
 80078f6:	4808      	ldr	r0, [pc, #32]	; (8007918 <USBD_FS_ProductStrDescriptor+0x38>)
 80078f8:	f7ff fde4 	bl	80074c4 <USBD_GetString>
 80078fc:	e004      	b.n	8007908 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	4904      	ldr	r1, [pc, #16]	; (8007914 <USBD_FS_ProductStrDescriptor+0x34>)
 8007902:	4805      	ldr	r0, [pc, #20]	; (8007918 <USBD_FS_ProductStrDescriptor+0x38>)
 8007904:	f7ff fdde 	bl	80074c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007908:	4b02      	ldr	r3, [pc, #8]	; (8007914 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	2000148c 	.word	0x2000148c
 8007918:	08009228 	.word	0x08009228

0800791c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	4904      	ldr	r1, [pc, #16]	; (800793c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800792c:	4804      	ldr	r0, [pc, #16]	; (8007940 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800792e:	f7ff fdc9 	bl	80074c4 <USBD_GetString>
  return USBD_StrDesc;
 8007932:	4b02      	ldr	r3, [pc, #8]	; (800793c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	2000148c 	.word	0x2000148c
 8007940:	08009240 	.word	0x08009240

08007944 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	221a      	movs	r2, #26
 8007954:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007956:	f000 f843 	bl	80079e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800795a:	4b02      	ldr	r3, [pc, #8]	; (8007964 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	200000e8 	.word	0x200000e8

08007968 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	6039      	str	r1, [r7, #0]
 8007972:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d105      	bne.n	8007986 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4907      	ldr	r1, [pc, #28]	; (800799c <USBD_FS_ConfigStrDescriptor+0x34>)
 800797e:	4808      	ldr	r0, [pc, #32]	; (80079a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007980:	f7ff fda0 	bl	80074c4 <USBD_GetString>
 8007984:	e004      	b.n	8007990 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	4904      	ldr	r1, [pc, #16]	; (800799c <USBD_FS_ConfigStrDescriptor+0x34>)
 800798a:	4805      	ldr	r0, [pc, #20]	; (80079a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800798c:	f7ff fd9a 	bl	80074c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007990:	4b02      	ldr	r3, [pc, #8]	; (800799c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	2000148c 	.word	0x2000148c
 80079a0:	08009254 	.word	0x08009254

080079a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	4907      	ldr	r1, [pc, #28]	; (80079d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ba:	4808      	ldr	r0, [pc, #32]	; (80079dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079bc:	f7ff fd82 	bl	80074c4 <USBD_GetString>
 80079c0:	e004      	b.n	80079cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	4904      	ldr	r1, [pc, #16]	; (80079d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079c6:	4805      	ldr	r0, [pc, #20]	; (80079dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079c8:	f7ff fd7c 	bl	80074c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079cc:	4b02      	ldr	r3, [pc, #8]	; (80079d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	2000148c 	.word	0x2000148c
 80079dc:	08009260 	.word	0x08009260

080079e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079e6:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <Get_SerialNum+0x44>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079ec:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <Get_SerialNum+0x48>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079f2:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <Get_SerialNum+0x4c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a06:	2208      	movs	r2, #8
 8007a08:	4909      	ldr	r1, [pc, #36]	; (8007a30 <Get_SerialNum+0x50>)
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f814 	bl	8007a38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a10:	2204      	movs	r2, #4
 8007a12:	4908      	ldr	r1, [pc, #32]	; (8007a34 <Get_SerialNum+0x54>)
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f000 f80f 	bl	8007a38 <IntToUnicode>
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	1fff7a10 	.word	0x1fff7a10
 8007a28:	1fff7a14 	.word	0x1fff7a14
 8007a2c:	1fff7a18 	.word	0x1fff7a18
 8007a30:	200000ea 	.word	0x200000ea
 8007a34:	200000fa 	.word	0x200000fa

08007a38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]
 8007a4e:	e027      	b.n	8007aa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	0f1b      	lsrs	r3, r3, #28
 8007a54:	2b09      	cmp	r3, #9
 8007a56:	d80b      	bhi.n	8007a70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	0f1b      	lsrs	r3, r3, #28
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	4619      	mov	r1, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	440b      	add	r3, r1
 8007a68:	3230      	adds	r2, #48	; 0x30
 8007a6a:	b2d2      	uxtb	r2, r2
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e00a      	b.n	8007a86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	0f1b      	lsrs	r3, r3, #28
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	440b      	add	r3, r1
 8007a80:	3237      	adds	r2, #55	; 0x37
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	3301      	adds	r3, #1
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	4413      	add	r3, r2
 8007a96:	2200      	movs	r2, #0
 8007a98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	75fb      	strb	r3, [r7, #23]
 8007aa0:	7dfa      	ldrb	r2, [r7, #23]
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d3d3      	bcc.n	8007a50 <IntToUnicode+0x18>
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	371c      	adds	r7, #28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac0:	f107 0314 	add.w	r3, r7, #20
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	605a      	str	r2, [r3, #4]
 8007aca:	609a      	str	r2, [r3, #8]
 8007acc:	60da      	str	r2, [r3, #12]
 8007ace:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ad8:	d13a      	bne.n	8007b50 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ada:	2300      	movs	r3, #0
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	4b1e      	ldr	r3, [pc, #120]	; (8007b58 <HAL_PCD_MspInit+0xa0>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	4a1d      	ldr	r2, [pc, #116]	; (8007b58 <HAL_PCD_MspInit+0xa0>)
 8007ae4:	f043 0301 	orr.w	r3, r3, #1
 8007ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8007aea:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <HAL_PCD_MspInit+0xa0>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007af6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007afc:	2302      	movs	r3, #2
 8007afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b00:	2300      	movs	r3, #0
 8007b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b04:	2303      	movs	r3, #3
 8007b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b08:	230a      	movs	r3, #10
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b0c:	f107 0314 	add.w	r3, r7, #20
 8007b10:	4619      	mov	r1, r3
 8007b12:	4812      	ldr	r0, [pc, #72]	; (8007b5c <HAL_PCD_MspInit+0xa4>)
 8007b14:	f7f9 ff4c 	bl	80019b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b18:	4b0f      	ldr	r3, [pc, #60]	; (8007b58 <HAL_PCD_MspInit+0xa0>)
 8007b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1c:	4a0e      	ldr	r2, [pc, #56]	; (8007b58 <HAL_PCD_MspInit+0xa0>)
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b22:	6353      	str	r3, [r2, #52]	; 0x34
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <HAL_PCD_MspInit+0xa0>)
 8007b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2c:	4a0a      	ldr	r2, [pc, #40]	; (8007b58 <HAL_PCD_MspInit+0xa0>)
 8007b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b32:	6453      	str	r3, [r2, #68]	; 0x44
 8007b34:	4b08      	ldr	r3, [pc, #32]	; (8007b58 <HAL_PCD_MspInit+0xa0>)
 8007b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b40:	2200      	movs	r2, #0
 8007b42:	2100      	movs	r1, #0
 8007b44:	2043      	movs	r0, #67	; 0x43
 8007b46:	f7f9 fba0 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b4a:	2043      	movs	r0, #67	; 0x43
 8007b4c:	f7f9 fbb9 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b50:	bf00      	nop
 8007b52:	3728      	adds	r7, #40	; 0x28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	40020000 	.word	0x40020000

08007b60 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b70:	d10d      	bne.n	8007b8e <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <HAL_PCD_MspDeInit+0x38>)
 8007b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b76:	4a08      	ldr	r2, [pc, #32]	; (8007b98 <HAL_PCD_MspDeInit+0x38>)
 8007b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b7c:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8007b7e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007b82:	4806      	ldr	r0, [pc, #24]	; (8007b9c <HAL_PCD_MspDeInit+0x3c>)
 8007b84:	f7fa f8b0 	bl	8001ce8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8007b88:	2043      	movs	r0, #67	; 0x43
 8007b8a:	f7f9 fba8 	bl	80012de <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	40020000 	.word	0x40020000

08007ba0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fe fb25 	bl	8006206 <USBD_LL_SetupStage>
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	4619      	mov	r1, r3
 8007bee:	f7fe fb5f 	bl	80062b0 <USBD_LL_DataOutStage>
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	334c      	adds	r3, #76	; 0x4c
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7fe fbf8 	bl	8006416 <USBD_LL_DataInStage>
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fd2c 	bl	800669a <USBD_LL_SOF>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c52:	2301      	movs	r3, #1
 8007c54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d102      	bne.n	8007c64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]
 8007c62:	e008      	b.n	8007c76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d102      	bne.n	8007c72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	73fb      	strb	r3, [r7, #15]
 8007c70:	e001      	b.n	8007c76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c72:	f7f8 ffcf 	bl	8000c14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c7c:	7bfa      	ldrb	r2, [r7, #15]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe fccc 	bl	800661e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe fc74 	bl	800657a <USBD_LL_Reset>
}
 8007c92:	bf00      	nop
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fcc7 	bl	800663e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6812      	ldr	r2, [r2, #0]
 8007cbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cc2:	f043 0301 	orr.w	r3, r3, #1
 8007cc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cd0:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <HAL_PCD_SuspendCallback+0x48>)
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	4a03      	ldr	r2, [pc, #12]	; (8007ce4 <HAL_PCD_SuspendCallback+0x48>)
 8007cd6:	f043 0306 	orr.w	r3, r3, #6
 8007cda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	e000ed00 	.word	0xe000ed00

08007ce8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fcb7 	bl	800666a <USBD_LL_Resume>
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe fd0f 	bl	800673e <USBD_LL_IsoOUTIncomplete>
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe fccb 	bl	80066da <USBD_LL_IsoINIncomplete>
}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe fd21 	bl	80067a2 <USBD_LL_DevConnected>
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fd1e 	bl	80067b8 <USBD_LL_DevDisconnected>
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d13c      	bne.n	8007e0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d94:	4a20      	ldr	r2, [pc, #128]	; (8007e18 <USBD_LL_Init+0x94>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <USBD_LL_Init+0x94>)
 8007da0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007da4:	4b1c      	ldr	r3, [pc, #112]	; (8007e18 <USBD_LL_Init+0x94>)
 8007da6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007daa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007dac:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <USBD_LL_Init+0x94>)
 8007dae:	2204      	movs	r2, #4
 8007db0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007db2:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <USBD_LL_Init+0x94>)
 8007db4:	2202      	movs	r2, #2
 8007db6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007db8:	4b17      	ldr	r3, [pc, #92]	; (8007e18 <USBD_LL_Init+0x94>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dbe:	4b16      	ldr	r3, [pc, #88]	; (8007e18 <USBD_LL_Init+0x94>)
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007dc4:	4b14      	ldr	r3, [pc, #80]	; (8007e18 <USBD_LL_Init+0x94>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007dca:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <USBD_LL_Init+0x94>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007dd0:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <USBD_LL_Init+0x94>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007dd6:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <USBD_LL_Init+0x94>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ddc:	4b0e      	ldr	r3, [pc, #56]	; (8007e18 <USBD_LL_Init+0x94>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007de2:	480d      	ldr	r0, [pc, #52]	; (8007e18 <USBD_LL_Init+0x94>)
 8007de4:	f7fa f8af 	bl	8001f46 <HAL_PCD_Init>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dee:	f7f8 ff11 	bl	8000c14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007df2:	2180      	movs	r1, #128	; 0x80
 8007df4:	4808      	ldr	r0, [pc, #32]	; (8007e18 <USBD_LL_Init+0x94>)
 8007df6:	f7fb fb62 	bl	80034be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007dfa:	2240      	movs	r2, #64	; 0x40
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4806      	ldr	r0, [pc, #24]	; (8007e18 <USBD_LL_Init+0x94>)
 8007e00:	f7fb fb16 	bl	8003430 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e04:	2280      	movs	r2, #128	; 0x80
 8007e06:	2101      	movs	r1, #1
 8007e08:	4803      	ldr	r0, [pc, #12]	; (8007e18 <USBD_LL_Init+0x94>)
 8007e0a:	f7fb fb11 	bl	8003430 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	2000168c 	.word	0x2000168c

08007e1c <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fa f9a4 	bl	8002180 <HAL_PCD_DeInit>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 f978 	bl	8008134 <USBD_Get_USB_Status>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fa f9ac 	bl	80021c6 <HAL_PCD_Start>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 f95d 	bl	8008134 <USBD_Get_USB_Status>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fa f9c4 	bl	800222c <HAL_PCD_Stop>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f942 	bl	8008134 <USBD_Get_USB_Status>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	461a      	mov	r2, r3
 8007ecc:	4603      	mov	r3, r0
 8007ece:	70fb      	strb	r3, [r7, #3]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70bb      	strb	r3, [r7, #2]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ee6:	78bb      	ldrb	r3, [r7, #2]
 8007ee8:	883a      	ldrh	r2, [r7, #0]
 8007eea:	78f9      	ldrb	r1, [r7, #3]
 8007eec:	f7fa fe9b 	bl	8002c26 <HAL_PCD_EP_Open>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f91c 	bl	8008134 <USBD_Get_USB_Status>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f24:	78fa      	ldrb	r2, [r7, #3]
 8007f26:	4611      	mov	r1, r2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fa fee4 	bl	8002cf6 <HAL_PCD_EP_Close>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f8fd 	bl	8008134 <USBD_Get_USB_Status>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	4611      	mov	r1, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fa ffbc 	bl	8002ee4 <HAL_PCD_EP_SetStall>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 f8de 	bl	8008134 <USBD_Get_USB_Status>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fb f801 	bl	8002fac <HAL_PCD_EP_ClrStall>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f8bf 	bl	8008134 <USBD_Get_USB_Status>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fd6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	da0b      	bge.n	8007ff8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	333e      	adds	r3, #62	; 0x3e
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	e00b      	b.n	8008010 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ffe:	68f9      	ldr	r1, [r7, #12]
 8008000:	4613      	mov	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	440b      	add	r3, r1
 800800a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800800e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f7fa fdce 	bl	8002bdc <HAL_PCD_SetAddress>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f874 	bl	8008134 <USBD_Get_USB_Status>
 800804c:	4603      	mov	r3, r0
 800804e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008050:	7bbb      	ldrb	r3, [r7, #14]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b086      	sub	sp, #24
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	460b      	mov	r3, r1
 8008068:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008078:	7af9      	ldrb	r1, [r7, #11]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	f7fa fee7 	bl	8002e50 <HAL_PCD_EP_Transmit>
 8008082:	4603      	mov	r3, r0
 8008084:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 f853 	bl	8008134 <USBD_Get_USB_Status>
 800808e:	4603      	mov	r3, r0
 8008090:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008092:	7dbb      	ldrb	r3, [r7, #22]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	460b      	mov	r3, r1
 80080aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80080ba:	7af9      	ldrb	r1, [r7, #11]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	f7fa fe63 	bl	8002d8a <HAL_PCD_EP_Receive>
 80080c4:	4603      	mov	r3, r0
 80080c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f832 	bl	8008134 <USBD_Get_USB_Status>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fa fe93 	bl	8002e20 <HAL_PCD_EP_GetRxCount>
 80080fa:	4603      	mov	r3, r0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800810c:	4b03      	ldr	r3, [pc, #12]	; (800811c <USBD_static_malloc+0x18>)
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20001b98 	.word	0x20001b98

08008120 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]

}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d817      	bhi.n	8008178 <USBD_Get_USB_Status+0x44>
 8008148:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <USBD_Get_USB_Status+0x1c>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008161 	.word	0x08008161
 8008154:	08008167 	.word	0x08008167
 8008158:	0800816d 	.word	0x0800816d
 800815c:	08008173 	.word	0x08008173
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]
    break;
 8008164:	e00b      	b.n	800817e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008166:	2303      	movs	r3, #3
 8008168:	73fb      	strb	r3, [r7, #15]
    break;
 800816a:	e008      	b.n	800817e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800816c:	2301      	movs	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
    break;
 8008170:	e005      	b.n	800817e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	73fb      	strb	r3, [r7, #15]
    break;
 8008176:	e002      	b.n	800817e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	73fb      	strb	r3, [r7, #15]
    break;
 800817c:	bf00      	nop
  }
  return usb_status;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <std>:
 800818c:	2300      	movs	r3, #0
 800818e:	b510      	push	{r4, lr}
 8008190:	4604      	mov	r4, r0
 8008192:	e9c0 3300 	strd	r3, r3, [r0]
 8008196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800819a:	6083      	str	r3, [r0, #8]
 800819c:	8181      	strh	r1, [r0, #12]
 800819e:	6643      	str	r3, [r0, #100]	; 0x64
 80081a0:	81c2      	strh	r2, [r0, #14]
 80081a2:	6183      	str	r3, [r0, #24]
 80081a4:	4619      	mov	r1, r3
 80081a6:	2208      	movs	r2, #8
 80081a8:	305c      	adds	r0, #92	; 0x5c
 80081aa:	f000 f9e5 	bl	8008578 <memset>
 80081ae:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <std+0x38>)
 80081b0:	6263      	str	r3, [r4, #36]	; 0x24
 80081b2:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <std+0x3c>)
 80081b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <std+0x40>)
 80081b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ba:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <std+0x44>)
 80081bc:	6224      	str	r4, [r4, #32]
 80081be:	6323      	str	r3, [r4, #48]	; 0x30
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	080083c9 	.word	0x080083c9
 80081c8:	080083eb 	.word	0x080083eb
 80081cc:	08008423 	.word	0x08008423
 80081d0:	08008447 	.word	0x08008447

080081d4 <stdio_exit_handler>:
 80081d4:	4a02      	ldr	r2, [pc, #8]	; (80081e0 <stdio_exit_handler+0xc>)
 80081d6:	4903      	ldr	r1, [pc, #12]	; (80081e4 <stdio_exit_handler+0x10>)
 80081d8:	4803      	ldr	r0, [pc, #12]	; (80081e8 <stdio_exit_handler+0x14>)
 80081da:	f000 b869 	b.w	80082b0 <_fwalk_sglue>
 80081de:	bf00      	nop
 80081e0:	20000104 	.word	0x20000104
 80081e4:	08008f11 	.word	0x08008f11
 80081e8:	20000110 	.word	0x20000110

080081ec <cleanup_stdio>:
 80081ec:	6841      	ldr	r1, [r0, #4]
 80081ee:	4b0c      	ldr	r3, [pc, #48]	; (8008220 <cleanup_stdio+0x34>)
 80081f0:	4299      	cmp	r1, r3
 80081f2:	b510      	push	{r4, lr}
 80081f4:	4604      	mov	r4, r0
 80081f6:	d001      	beq.n	80081fc <cleanup_stdio+0x10>
 80081f8:	f000 fe8a 	bl	8008f10 <_fflush_r>
 80081fc:	68a1      	ldr	r1, [r4, #8]
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <cleanup_stdio+0x38>)
 8008200:	4299      	cmp	r1, r3
 8008202:	d002      	beq.n	800820a <cleanup_stdio+0x1e>
 8008204:	4620      	mov	r0, r4
 8008206:	f000 fe83 	bl	8008f10 <_fflush_r>
 800820a:	68e1      	ldr	r1, [r4, #12]
 800820c:	4b06      	ldr	r3, [pc, #24]	; (8008228 <cleanup_stdio+0x3c>)
 800820e:	4299      	cmp	r1, r3
 8008210:	d004      	beq.n	800821c <cleanup_stdio+0x30>
 8008212:	4620      	mov	r0, r4
 8008214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008218:	f000 be7a 	b.w	8008f10 <_fflush_r>
 800821c:	bd10      	pop	{r4, pc}
 800821e:	bf00      	nop
 8008220:	20001db8 	.word	0x20001db8
 8008224:	20001e20 	.word	0x20001e20
 8008228:	20001e88 	.word	0x20001e88

0800822c <global_stdio_init.part.0>:
 800822c:	b510      	push	{r4, lr}
 800822e:	4b0b      	ldr	r3, [pc, #44]	; (800825c <global_stdio_init.part.0+0x30>)
 8008230:	4c0b      	ldr	r4, [pc, #44]	; (8008260 <global_stdio_init.part.0+0x34>)
 8008232:	4a0c      	ldr	r2, [pc, #48]	; (8008264 <global_stdio_init.part.0+0x38>)
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	4620      	mov	r0, r4
 8008238:	2200      	movs	r2, #0
 800823a:	2104      	movs	r1, #4
 800823c:	f7ff ffa6 	bl	800818c <std>
 8008240:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008244:	2201      	movs	r2, #1
 8008246:	2109      	movs	r1, #9
 8008248:	f7ff ffa0 	bl	800818c <std>
 800824c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008250:	2202      	movs	r2, #2
 8008252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008256:	2112      	movs	r1, #18
 8008258:	f7ff bf98 	b.w	800818c <std>
 800825c:	20001ef0 	.word	0x20001ef0
 8008260:	20001db8 	.word	0x20001db8
 8008264:	080081d5 	.word	0x080081d5

08008268 <__sfp_lock_acquire>:
 8008268:	4801      	ldr	r0, [pc, #4]	; (8008270 <__sfp_lock_acquire+0x8>)
 800826a:	f000 b9fd 	b.w	8008668 <__retarget_lock_acquire_recursive>
 800826e:	bf00      	nop
 8008270:	20001ef9 	.word	0x20001ef9

08008274 <__sfp_lock_release>:
 8008274:	4801      	ldr	r0, [pc, #4]	; (800827c <__sfp_lock_release+0x8>)
 8008276:	f000 b9f8 	b.w	800866a <__retarget_lock_release_recursive>
 800827a:	bf00      	nop
 800827c:	20001ef9 	.word	0x20001ef9

08008280 <__sinit>:
 8008280:	b510      	push	{r4, lr}
 8008282:	4604      	mov	r4, r0
 8008284:	f7ff fff0 	bl	8008268 <__sfp_lock_acquire>
 8008288:	6a23      	ldr	r3, [r4, #32]
 800828a:	b11b      	cbz	r3, 8008294 <__sinit+0x14>
 800828c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008290:	f7ff bff0 	b.w	8008274 <__sfp_lock_release>
 8008294:	4b04      	ldr	r3, [pc, #16]	; (80082a8 <__sinit+0x28>)
 8008296:	6223      	str	r3, [r4, #32]
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <__sinit+0x2c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f5      	bne.n	800828c <__sinit+0xc>
 80082a0:	f7ff ffc4 	bl	800822c <global_stdio_init.part.0>
 80082a4:	e7f2      	b.n	800828c <__sinit+0xc>
 80082a6:	bf00      	nop
 80082a8:	080081ed 	.word	0x080081ed
 80082ac:	20001ef0 	.word	0x20001ef0

080082b0 <_fwalk_sglue>:
 80082b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b4:	4607      	mov	r7, r0
 80082b6:	4688      	mov	r8, r1
 80082b8:	4614      	mov	r4, r2
 80082ba:	2600      	movs	r6, #0
 80082bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082c0:	f1b9 0901 	subs.w	r9, r9, #1
 80082c4:	d505      	bpl.n	80082d2 <_fwalk_sglue+0x22>
 80082c6:	6824      	ldr	r4, [r4, #0]
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	d1f7      	bne.n	80082bc <_fwalk_sglue+0xc>
 80082cc:	4630      	mov	r0, r6
 80082ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d2:	89ab      	ldrh	r3, [r5, #12]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d907      	bls.n	80082e8 <_fwalk_sglue+0x38>
 80082d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082dc:	3301      	adds	r3, #1
 80082de:	d003      	beq.n	80082e8 <_fwalk_sglue+0x38>
 80082e0:	4629      	mov	r1, r5
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c0      	blx	r8
 80082e6:	4306      	orrs	r6, r0
 80082e8:	3568      	adds	r5, #104	; 0x68
 80082ea:	e7e9      	b.n	80082c0 <_fwalk_sglue+0x10>

080082ec <iprintf>:
 80082ec:	b40f      	push	{r0, r1, r2, r3}
 80082ee:	b507      	push	{r0, r1, r2, lr}
 80082f0:	4906      	ldr	r1, [pc, #24]	; (800830c <iprintf+0x20>)
 80082f2:	ab04      	add	r3, sp, #16
 80082f4:	6808      	ldr	r0, [r1, #0]
 80082f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082fa:	6881      	ldr	r1, [r0, #8]
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	f000 fad7 	bl	80088b0 <_vfiprintf_r>
 8008302:	b003      	add	sp, #12
 8008304:	f85d eb04 	ldr.w	lr, [sp], #4
 8008308:	b004      	add	sp, #16
 800830a:	4770      	bx	lr
 800830c:	2000015c 	.word	0x2000015c

08008310 <_puts_r>:
 8008310:	6a03      	ldr	r3, [r0, #32]
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	6884      	ldr	r4, [r0, #8]
 8008316:	4605      	mov	r5, r0
 8008318:	460e      	mov	r6, r1
 800831a:	b90b      	cbnz	r3, 8008320 <_puts_r+0x10>
 800831c:	f7ff ffb0 	bl	8008280 <__sinit>
 8008320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008322:	07db      	lsls	r3, r3, #31
 8008324:	d405      	bmi.n	8008332 <_puts_r+0x22>
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	0598      	lsls	r0, r3, #22
 800832a:	d402      	bmi.n	8008332 <_puts_r+0x22>
 800832c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800832e:	f000 f99b 	bl	8008668 <__retarget_lock_acquire_recursive>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	0719      	lsls	r1, r3, #28
 8008336:	d513      	bpl.n	8008360 <_puts_r+0x50>
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	b18b      	cbz	r3, 8008360 <_puts_r+0x50>
 800833c:	3e01      	subs	r6, #1
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008344:	3b01      	subs	r3, #1
 8008346:	60a3      	str	r3, [r4, #8]
 8008348:	b9e9      	cbnz	r1, 8008386 <_puts_r+0x76>
 800834a:	2b00      	cmp	r3, #0
 800834c:	da2e      	bge.n	80083ac <_puts_r+0x9c>
 800834e:	4622      	mov	r2, r4
 8008350:	210a      	movs	r1, #10
 8008352:	4628      	mov	r0, r5
 8008354:	f000 f87b 	bl	800844e <__swbuf_r>
 8008358:	3001      	adds	r0, #1
 800835a:	d007      	beq.n	800836c <_puts_r+0x5c>
 800835c:	250a      	movs	r5, #10
 800835e:	e007      	b.n	8008370 <_puts_r+0x60>
 8008360:	4621      	mov	r1, r4
 8008362:	4628      	mov	r0, r5
 8008364:	f000 f8b0 	bl	80084c8 <__swsetup_r>
 8008368:	2800      	cmp	r0, #0
 800836a:	d0e7      	beq.n	800833c <_puts_r+0x2c>
 800836c:	f04f 35ff 	mov.w	r5, #4294967295
 8008370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008372:	07da      	lsls	r2, r3, #31
 8008374:	d405      	bmi.n	8008382 <_puts_r+0x72>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	059b      	lsls	r3, r3, #22
 800837a:	d402      	bmi.n	8008382 <_puts_r+0x72>
 800837c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837e:	f000 f974 	bl	800866a <__retarget_lock_release_recursive>
 8008382:	4628      	mov	r0, r5
 8008384:	bd70      	pop	{r4, r5, r6, pc}
 8008386:	2b00      	cmp	r3, #0
 8008388:	da04      	bge.n	8008394 <_puts_r+0x84>
 800838a:	69a2      	ldr	r2, [r4, #24]
 800838c:	429a      	cmp	r2, r3
 800838e:	dc06      	bgt.n	800839e <_puts_r+0x8e>
 8008390:	290a      	cmp	r1, #10
 8008392:	d004      	beq.n	800839e <_puts_r+0x8e>
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	6022      	str	r2, [r4, #0]
 800839a:	7019      	strb	r1, [r3, #0]
 800839c:	e7cf      	b.n	800833e <_puts_r+0x2e>
 800839e:	4622      	mov	r2, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 f854 	bl	800844e <__swbuf_r>
 80083a6:	3001      	adds	r0, #1
 80083a8:	d1c9      	bne.n	800833e <_puts_r+0x2e>
 80083aa:	e7df      	b.n	800836c <_puts_r+0x5c>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	250a      	movs	r5, #10
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	6022      	str	r2, [r4, #0]
 80083b4:	701d      	strb	r5, [r3, #0]
 80083b6:	e7db      	b.n	8008370 <_puts_r+0x60>

080083b8 <puts>:
 80083b8:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <puts+0xc>)
 80083ba:	4601      	mov	r1, r0
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	f7ff bfa7 	b.w	8008310 <_puts_r>
 80083c2:	bf00      	nop
 80083c4:	2000015c 	.word	0x2000015c

080083c8 <__sread>:
 80083c8:	b510      	push	{r4, lr}
 80083ca:	460c      	mov	r4, r1
 80083cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d0:	f000 f8fc 	bl	80085cc <_read_r>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	bfab      	itete	ge
 80083d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083da:	89a3      	ldrhlt	r3, [r4, #12]
 80083dc:	181b      	addge	r3, r3, r0
 80083de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083e2:	bfac      	ite	ge
 80083e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80083e6:	81a3      	strhlt	r3, [r4, #12]
 80083e8:	bd10      	pop	{r4, pc}

080083ea <__swrite>:
 80083ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ee:	461f      	mov	r7, r3
 80083f0:	898b      	ldrh	r3, [r1, #12]
 80083f2:	05db      	lsls	r3, r3, #23
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	4616      	mov	r6, r2
 80083fa:	d505      	bpl.n	8008408 <__swrite+0x1e>
 80083fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008400:	2302      	movs	r3, #2
 8008402:	2200      	movs	r2, #0
 8008404:	f000 f8d0 	bl	80085a8 <_lseek_r>
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800840e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008412:	81a3      	strh	r3, [r4, #12]
 8008414:	4632      	mov	r2, r6
 8008416:	463b      	mov	r3, r7
 8008418:	4628      	mov	r0, r5
 800841a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800841e:	f000 b8e7 	b.w	80085f0 <_write_r>

08008422 <__sseek>:
 8008422:	b510      	push	{r4, lr}
 8008424:	460c      	mov	r4, r1
 8008426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842a:	f000 f8bd 	bl	80085a8 <_lseek_r>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	bf15      	itete	ne
 8008434:	6560      	strne	r0, [r4, #84]	; 0x54
 8008436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800843a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800843e:	81a3      	strheq	r3, [r4, #12]
 8008440:	bf18      	it	ne
 8008442:	81a3      	strhne	r3, [r4, #12]
 8008444:	bd10      	pop	{r4, pc}

08008446 <__sclose>:
 8008446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800844a:	f000 b89d 	b.w	8008588 <_close_r>

0800844e <__swbuf_r>:
 800844e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008450:	460e      	mov	r6, r1
 8008452:	4614      	mov	r4, r2
 8008454:	4605      	mov	r5, r0
 8008456:	b118      	cbz	r0, 8008460 <__swbuf_r+0x12>
 8008458:	6a03      	ldr	r3, [r0, #32]
 800845a:	b90b      	cbnz	r3, 8008460 <__swbuf_r+0x12>
 800845c:	f7ff ff10 	bl	8008280 <__sinit>
 8008460:	69a3      	ldr	r3, [r4, #24]
 8008462:	60a3      	str	r3, [r4, #8]
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	071a      	lsls	r2, r3, #28
 8008468:	d525      	bpl.n	80084b6 <__swbuf_r+0x68>
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	b31b      	cbz	r3, 80084b6 <__swbuf_r+0x68>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	6922      	ldr	r2, [r4, #16]
 8008472:	1a98      	subs	r0, r3, r2
 8008474:	6963      	ldr	r3, [r4, #20]
 8008476:	b2f6      	uxtb	r6, r6
 8008478:	4283      	cmp	r3, r0
 800847a:	4637      	mov	r7, r6
 800847c:	dc04      	bgt.n	8008488 <__swbuf_r+0x3a>
 800847e:	4621      	mov	r1, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f000 fd45 	bl	8008f10 <_fflush_r>
 8008486:	b9e0      	cbnz	r0, 80084c2 <__swbuf_r+0x74>
 8008488:	68a3      	ldr	r3, [r4, #8]
 800848a:	3b01      	subs	r3, #1
 800848c:	60a3      	str	r3, [r4, #8]
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	6022      	str	r2, [r4, #0]
 8008494:	701e      	strb	r6, [r3, #0]
 8008496:	6962      	ldr	r2, [r4, #20]
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	429a      	cmp	r2, r3
 800849c:	d004      	beq.n	80084a8 <__swbuf_r+0x5a>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	07db      	lsls	r3, r3, #31
 80084a2:	d506      	bpl.n	80084b2 <__swbuf_r+0x64>
 80084a4:	2e0a      	cmp	r6, #10
 80084a6:	d104      	bne.n	80084b2 <__swbuf_r+0x64>
 80084a8:	4621      	mov	r1, r4
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 fd30 	bl	8008f10 <_fflush_r>
 80084b0:	b938      	cbnz	r0, 80084c2 <__swbuf_r+0x74>
 80084b2:	4638      	mov	r0, r7
 80084b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b6:	4621      	mov	r1, r4
 80084b8:	4628      	mov	r0, r5
 80084ba:	f000 f805 	bl	80084c8 <__swsetup_r>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d0d5      	beq.n	800846e <__swbuf_r+0x20>
 80084c2:	f04f 37ff 	mov.w	r7, #4294967295
 80084c6:	e7f4      	b.n	80084b2 <__swbuf_r+0x64>

080084c8 <__swsetup_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4b2a      	ldr	r3, [pc, #168]	; (8008574 <__swsetup_r+0xac>)
 80084cc:	4605      	mov	r5, r0
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	460c      	mov	r4, r1
 80084d2:	b118      	cbz	r0, 80084dc <__swsetup_r+0x14>
 80084d4:	6a03      	ldr	r3, [r0, #32]
 80084d6:	b90b      	cbnz	r3, 80084dc <__swsetup_r+0x14>
 80084d8:	f7ff fed2 	bl	8008280 <__sinit>
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084e2:	0718      	lsls	r0, r3, #28
 80084e4:	d422      	bmi.n	800852c <__swsetup_r+0x64>
 80084e6:	06d9      	lsls	r1, r3, #27
 80084e8:	d407      	bmi.n	80084fa <__swsetup_r+0x32>
 80084ea:	2309      	movs	r3, #9
 80084ec:	602b      	str	r3, [r5, #0]
 80084ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	e034      	b.n	8008564 <__swsetup_r+0x9c>
 80084fa:	0758      	lsls	r0, r3, #29
 80084fc:	d512      	bpl.n	8008524 <__swsetup_r+0x5c>
 80084fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008500:	b141      	cbz	r1, 8008514 <__swsetup_r+0x4c>
 8008502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008506:	4299      	cmp	r1, r3
 8008508:	d002      	beq.n	8008510 <__swsetup_r+0x48>
 800850a:	4628      	mov	r0, r5
 800850c:	f000 f8ae 	bl	800866c <_free_r>
 8008510:	2300      	movs	r3, #0
 8008512:	6363      	str	r3, [r4, #52]	; 0x34
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800851a:	81a3      	strh	r3, [r4, #12]
 800851c:	2300      	movs	r3, #0
 800851e:	6063      	str	r3, [r4, #4]
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	6023      	str	r3, [r4, #0]
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	f043 0308 	orr.w	r3, r3, #8
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	6923      	ldr	r3, [r4, #16]
 800852e:	b94b      	cbnz	r3, 8008544 <__swsetup_r+0x7c>
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800853a:	d003      	beq.n	8008544 <__swsetup_r+0x7c>
 800853c:	4621      	mov	r1, r4
 800853e:	4628      	mov	r0, r5
 8008540:	f000 fd34 	bl	8008fac <__smakebuf_r>
 8008544:	89a0      	ldrh	r0, [r4, #12]
 8008546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800854a:	f010 0301 	ands.w	r3, r0, #1
 800854e:	d00a      	beq.n	8008566 <__swsetup_r+0x9e>
 8008550:	2300      	movs	r3, #0
 8008552:	60a3      	str	r3, [r4, #8]
 8008554:	6963      	ldr	r3, [r4, #20]
 8008556:	425b      	negs	r3, r3
 8008558:	61a3      	str	r3, [r4, #24]
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	b943      	cbnz	r3, 8008570 <__swsetup_r+0xa8>
 800855e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008562:	d1c4      	bne.n	80084ee <__swsetup_r+0x26>
 8008564:	bd38      	pop	{r3, r4, r5, pc}
 8008566:	0781      	lsls	r1, r0, #30
 8008568:	bf58      	it	pl
 800856a:	6963      	ldrpl	r3, [r4, #20]
 800856c:	60a3      	str	r3, [r4, #8]
 800856e:	e7f4      	b.n	800855a <__swsetup_r+0x92>
 8008570:	2000      	movs	r0, #0
 8008572:	e7f7      	b.n	8008564 <__swsetup_r+0x9c>
 8008574:	2000015c 	.word	0x2000015c

08008578 <memset>:
 8008578:	4402      	add	r2, r0
 800857a:	4603      	mov	r3, r0
 800857c:	4293      	cmp	r3, r2
 800857e:	d100      	bne.n	8008582 <memset+0xa>
 8008580:	4770      	bx	lr
 8008582:	f803 1b01 	strb.w	r1, [r3], #1
 8008586:	e7f9      	b.n	800857c <memset+0x4>

08008588 <_close_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4d06      	ldr	r5, [pc, #24]	; (80085a4 <_close_r+0x1c>)
 800858c:	2300      	movs	r3, #0
 800858e:	4604      	mov	r4, r0
 8008590:	4608      	mov	r0, r1
 8008592:	602b      	str	r3, [r5, #0]
 8008594:	f7f8 fbf9 	bl	8000d8a <_close>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d102      	bne.n	80085a2 <_close_r+0x1a>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	b103      	cbz	r3, 80085a2 <_close_r+0x1a>
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	20001ef4 	.word	0x20001ef4

080085a8 <_lseek_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d07      	ldr	r5, [pc, #28]	; (80085c8 <_lseek_r+0x20>)
 80085ac:	4604      	mov	r4, r0
 80085ae:	4608      	mov	r0, r1
 80085b0:	4611      	mov	r1, r2
 80085b2:	2200      	movs	r2, #0
 80085b4:	602a      	str	r2, [r5, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f7f8 fc0e 	bl	8000dd8 <_lseek>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d102      	bne.n	80085c6 <_lseek_r+0x1e>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	b103      	cbz	r3, 80085c6 <_lseek_r+0x1e>
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	20001ef4 	.word	0x20001ef4

080085cc <_read_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4d07      	ldr	r5, [pc, #28]	; (80085ec <_read_r+0x20>)
 80085d0:	4604      	mov	r4, r0
 80085d2:	4608      	mov	r0, r1
 80085d4:	4611      	mov	r1, r2
 80085d6:	2200      	movs	r2, #0
 80085d8:	602a      	str	r2, [r5, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	f7f8 fbb8 	bl	8000d50 <_read>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_read_r+0x1e>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_read_r+0x1e>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20001ef4 	.word	0x20001ef4

080085f0 <_write_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d07      	ldr	r5, [pc, #28]	; (8008610 <_write_r+0x20>)
 80085f4:	4604      	mov	r4, r0
 80085f6:	4608      	mov	r0, r1
 80085f8:	4611      	mov	r1, r2
 80085fa:	2200      	movs	r2, #0
 80085fc:	602a      	str	r2, [r5, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	f7f8 f9ec 	bl	80009dc <_write>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_write_r+0x1e>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_write_r+0x1e>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	20001ef4 	.word	0x20001ef4

08008614 <__errno>:
 8008614:	4b01      	ldr	r3, [pc, #4]	; (800861c <__errno+0x8>)
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	2000015c 	.word	0x2000015c

08008620 <__libc_init_array>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	4d0d      	ldr	r5, [pc, #52]	; (8008658 <__libc_init_array+0x38>)
 8008624:	4c0d      	ldr	r4, [pc, #52]	; (800865c <__libc_init_array+0x3c>)
 8008626:	1b64      	subs	r4, r4, r5
 8008628:	10a4      	asrs	r4, r4, #2
 800862a:	2600      	movs	r6, #0
 800862c:	42a6      	cmp	r6, r4
 800862e:	d109      	bne.n	8008644 <__libc_init_array+0x24>
 8008630:	4d0b      	ldr	r5, [pc, #44]	; (8008660 <__libc_init_array+0x40>)
 8008632:	4c0c      	ldr	r4, [pc, #48]	; (8008664 <__libc_init_array+0x44>)
 8008634:	f000 fd28 	bl	8009088 <_init>
 8008638:	1b64      	subs	r4, r4, r5
 800863a:	10a4      	asrs	r4, r4, #2
 800863c:	2600      	movs	r6, #0
 800863e:	42a6      	cmp	r6, r4
 8008640:	d105      	bne.n	800864e <__libc_init_array+0x2e>
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	f855 3b04 	ldr.w	r3, [r5], #4
 8008648:	4798      	blx	r3
 800864a:	3601      	adds	r6, #1
 800864c:	e7ee      	b.n	800862c <__libc_init_array+0xc>
 800864e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008652:	4798      	blx	r3
 8008654:	3601      	adds	r6, #1
 8008656:	e7f2      	b.n	800863e <__libc_init_array+0x1e>
 8008658:	080092bc 	.word	0x080092bc
 800865c:	080092bc 	.word	0x080092bc
 8008660:	080092bc 	.word	0x080092bc
 8008664:	080092c0 	.word	0x080092c0

08008668 <__retarget_lock_acquire_recursive>:
 8008668:	4770      	bx	lr

0800866a <__retarget_lock_release_recursive>:
 800866a:	4770      	bx	lr

0800866c <_free_r>:
 800866c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800866e:	2900      	cmp	r1, #0
 8008670:	d044      	beq.n	80086fc <_free_r+0x90>
 8008672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008676:	9001      	str	r0, [sp, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f1a1 0404 	sub.w	r4, r1, #4
 800867e:	bfb8      	it	lt
 8008680:	18e4      	addlt	r4, r4, r3
 8008682:	f000 f8df 	bl	8008844 <__malloc_lock>
 8008686:	4a1e      	ldr	r2, [pc, #120]	; (8008700 <_free_r+0x94>)
 8008688:	9801      	ldr	r0, [sp, #4]
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	b933      	cbnz	r3, 800869c <_free_r+0x30>
 800868e:	6063      	str	r3, [r4, #4]
 8008690:	6014      	str	r4, [r2, #0]
 8008692:	b003      	add	sp, #12
 8008694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008698:	f000 b8da 	b.w	8008850 <__malloc_unlock>
 800869c:	42a3      	cmp	r3, r4
 800869e:	d908      	bls.n	80086b2 <_free_r+0x46>
 80086a0:	6825      	ldr	r5, [r4, #0]
 80086a2:	1961      	adds	r1, r4, r5
 80086a4:	428b      	cmp	r3, r1
 80086a6:	bf01      	itttt	eq
 80086a8:	6819      	ldreq	r1, [r3, #0]
 80086aa:	685b      	ldreq	r3, [r3, #4]
 80086ac:	1949      	addeq	r1, r1, r5
 80086ae:	6021      	streq	r1, [r4, #0]
 80086b0:	e7ed      	b.n	800868e <_free_r+0x22>
 80086b2:	461a      	mov	r2, r3
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	b10b      	cbz	r3, 80086bc <_free_r+0x50>
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	d9fa      	bls.n	80086b2 <_free_r+0x46>
 80086bc:	6811      	ldr	r1, [r2, #0]
 80086be:	1855      	adds	r5, r2, r1
 80086c0:	42a5      	cmp	r5, r4
 80086c2:	d10b      	bne.n	80086dc <_free_r+0x70>
 80086c4:	6824      	ldr	r4, [r4, #0]
 80086c6:	4421      	add	r1, r4
 80086c8:	1854      	adds	r4, r2, r1
 80086ca:	42a3      	cmp	r3, r4
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	d1e0      	bne.n	8008692 <_free_r+0x26>
 80086d0:	681c      	ldr	r4, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	6053      	str	r3, [r2, #4]
 80086d6:	440c      	add	r4, r1
 80086d8:	6014      	str	r4, [r2, #0]
 80086da:	e7da      	b.n	8008692 <_free_r+0x26>
 80086dc:	d902      	bls.n	80086e4 <_free_r+0x78>
 80086de:	230c      	movs	r3, #12
 80086e0:	6003      	str	r3, [r0, #0]
 80086e2:	e7d6      	b.n	8008692 <_free_r+0x26>
 80086e4:	6825      	ldr	r5, [r4, #0]
 80086e6:	1961      	adds	r1, r4, r5
 80086e8:	428b      	cmp	r3, r1
 80086ea:	bf04      	itt	eq
 80086ec:	6819      	ldreq	r1, [r3, #0]
 80086ee:	685b      	ldreq	r3, [r3, #4]
 80086f0:	6063      	str	r3, [r4, #4]
 80086f2:	bf04      	itt	eq
 80086f4:	1949      	addeq	r1, r1, r5
 80086f6:	6021      	streq	r1, [r4, #0]
 80086f8:	6054      	str	r4, [r2, #4]
 80086fa:	e7ca      	b.n	8008692 <_free_r+0x26>
 80086fc:	b003      	add	sp, #12
 80086fe:	bd30      	pop	{r4, r5, pc}
 8008700:	20001efc 	.word	0x20001efc

08008704 <sbrk_aligned>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4e0e      	ldr	r6, [pc, #56]	; (8008740 <sbrk_aligned+0x3c>)
 8008708:	460c      	mov	r4, r1
 800870a:	6831      	ldr	r1, [r6, #0]
 800870c:	4605      	mov	r5, r0
 800870e:	b911      	cbnz	r1, 8008716 <sbrk_aligned+0x12>
 8008710:	f000 fcaa 	bl	8009068 <_sbrk_r>
 8008714:	6030      	str	r0, [r6, #0]
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 fca5 	bl	8009068 <_sbrk_r>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	d00a      	beq.n	8008738 <sbrk_aligned+0x34>
 8008722:	1cc4      	adds	r4, r0, #3
 8008724:	f024 0403 	bic.w	r4, r4, #3
 8008728:	42a0      	cmp	r0, r4
 800872a:	d007      	beq.n	800873c <sbrk_aligned+0x38>
 800872c:	1a21      	subs	r1, r4, r0
 800872e:	4628      	mov	r0, r5
 8008730:	f000 fc9a 	bl	8009068 <_sbrk_r>
 8008734:	3001      	adds	r0, #1
 8008736:	d101      	bne.n	800873c <sbrk_aligned+0x38>
 8008738:	f04f 34ff 	mov.w	r4, #4294967295
 800873c:	4620      	mov	r0, r4
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	20001f00 	.word	0x20001f00

08008744 <_malloc_r>:
 8008744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008748:	1ccd      	adds	r5, r1, #3
 800874a:	f025 0503 	bic.w	r5, r5, #3
 800874e:	3508      	adds	r5, #8
 8008750:	2d0c      	cmp	r5, #12
 8008752:	bf38      	it	cc
 8008754:	250c      	movcc	r5, #12
 8008756:	2d00      	cmp	r5, #0
 8008758:	4607      	mov	r7, r0
 800875a:	db01      	blt.n	8008760 <_malloc_r+0x1c>
 800875c:	42a9      	cmp	r1, r5
 800875e:	d905      	bls.n	800876c <_malloc_r+0x28>
 8008760:	230c      	movs	r3, #12
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	2600      	movs	r6, #0
 8008766:	4630      	mov	r0, r6
 8008768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008840 <_malloc_r+0xfc>
 8008770:	f000 f868 	bl	8008844 <__malloc_lock>
 8008774:	f8d8 3000 	ldr.w	r3, [r8]
 8008778:	461c      	mov	r4, r3
 800877a:	bb5c      	cbnz	r4, 80087d4 <_malloc_r+0x90>
 800877c:	4629      	mov	r1, r5
 800877e:	4638      	mov	r0, r7
 8008780:	f7ff ffc0 	bl	8008704 <sbrk_aligned>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	4604      	mov	r4, r0
 8008788:	d155      	bne.n	8008836 <_malloc_r+0xf2>
 800878a:	f8d8 4000 	ldr.w	r4, [r8]
 800878e:	4626      	mov	r6, r4
 8008790:	2e00      	cmp	r6, #0
 8008792:	d145      	bne.n	8008820 <_malloc_r+0xdc>
 8008794:	2c00      	cmp	r4, #0
 8008796:	d048      	beq.n	800882a <_malloc_r+0xe6>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	4631      	mov	r1, r6
 800879c:	4638      	mov	r0, r7
 800879e:	eb04 0903 	add.w	r9, r4, r3
 80087a2:	f000 fc61 	bl	8009068 <_sbrk_r>
 80087a6:	4581      	cmp	r9, r0
 80087a8:	d13f      	bne.n	800882a <_malloc_r+0xe6>
 80087aa:	6821      	ldr	r1, [r4, #0]
 80087ac:	1a6d      	subs	r5, r5, r1
 80087ae:	4629      	mov	r1, r5
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7ff ffa7 	bl	8008704 <sbrk_aligned>
 80087b6:	3001      	adds	r0, #1
 80087b8:	d037      	beq.n	800882a <_malloc_r+0xe6>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	442b      	add	r3, r5
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	f8d8 3000 	ldr.w	r3, [r8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d038      	beq.n	800883a <_malloc_r+0xf6>
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	42a2      	cmp	r2, r4
 80087cc:	d12b      	bne.n	8008826 <_malloc_r+0xe2>
 80087ce:	2200      	movs	r2, #0
 80087d0:	605a      	str	r2, [r3, #4]
 80087d2:	e00f      	b.n	80087f4 <_malloc_r+0xb0>
 80087d4:	6822      	ldr	r2, [r4, #0]
 80087d6:	1b52      	subs	r2, r2, r5
 80087d8:	d41f      	bmi.n	800881a <_malloc_r+0xd6>
 80087da:	2a0b      	cmp	r2, #11
 80087dc:	d917      	bls.n	800880e <_malloc_r+0xca>
 80087de:	1961      	adds	r1, r4, r5
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	6025      	str	r5, [r4, #0]
 80087e4:	bf18      	it	ne
 80087e6:	6059      	strne	r1, [r3, #4]
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	bf08      	it	eq
 80087ec:	f8c8 1000 	streq.w	r1, [r8]
 80087f0:	5162      	str	r2, [r4, r5]
 80087f2:	604b      	str	r3, [r1, #4]
 80087f4:	4638      	mov	r0, r7
 80087f6:	f104 060b 	add.w	r6, r4, #11
 80087fa:	f000 f829 	bl	8008850 <__malloc_unlock>
 80087fe:	f026 0607 	bic.w	r6, r6, #7
 8008802:	1d23      	adds	r3, r4, #4
 8008804:	1af2      	subs	r2, r6, r3
 8008806:	d0ae      	beq.n	8008766 <_malloc_r+0x22>
 8008808:	1b9b      	subs	r3, r3, r6
 800880a:	50a3      	str	r3, [r4, r2]
 800880c:	e7ab      	b.n	8008766 <_malloc_r+0x22>
 800880e:	42a3      	cmp	r3, r4
 8008810:	6862      	ldr	r2, [r4, #4]
 8008812:	d1dd      	bne.n	80087d0 <_malloc_r+0x8c>
 8008814:	f8c8 2000 	str.w	r2, [r8]
 8008818:	e7ec      	b.n	80087f4 <_malloc_r+0xb0>
 800881a:	4623      	mov	r3, r4
 800881c:	6864      	ldr	r4, [r4, #4]
 800881e:	e7ac      	b.n	800877a <_malloc_r+0x36>
 8008820:	4634      	mov	r4, r6
 8008822:	6876      	ldr	r6, [r6, #4]
 8008824:	e7b4      	b.n	8008790 <_malloc_r+0x4c>
 8008826:	4613      	mov	r3, r2
 8008828:	e7cc      	b.n	80087c4 <_malloc_r+0x80>
 800882a:	230c      	movs	r3, #12
 800882c:	603b      	str	r3, [r7, #0]
 800882e:	4638      	mov	r0, r7
 8008830:	f000 f80e 	bl	8008850 <__malloc_unlock>
 8008834:	e797      	b.n	8008766 <_malloc_r+0x22>
 8008836:	6025      	str	r5, [r4, #0]
 8008838:	e7dc      	b.n	80087f4 <_malloc_r+0xb0>
 800883a:	605b      	str	r3, [r3, #4]
 800883c:	deff      	udf	#255	; 0xff
 800883e:	bf00      	nop
 8008840:	20001efc 	.word	0x20001efc

08008844 <__malloc_lock>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__malloc_lock+0x8>)
 8008846:	f7ff bf0f 	b.w	8008668 <__retarget_lock_acquire_recursive>
 800884a:	bf00      	nop
 800884c:	20001ef8 	.word	0x20001ef8

08008850 <__malloc_unlock>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__malloc_unlock+0x8>)
 8008852:	f7ff bf0a 	b.w	800866a <__retarget_lock_release_recursive>
 8008856:	bf00      	nop
 8008858:	20001ef8 	.word	0x20001ef8

0800885c <__sfputc_r>:
 800885c:	6893      	ldr	r3, [r2, #8]
 800885e:	3b01      	subs	r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	b410      	push	{r4}
 8008864:	6093      	str	r3, [r2, #8]
 8008866:	da08      	bge.n	800887a <__sfputc_r+0x1e>
 8008868:	6994      	ldr	r4, [r2, #24]
 800886a:	42a3      	cmp	r3, r4
 800886c:	db01      	blt.n	8008872 <__sfputc_r+0x16>
 800886e:	290a      	cmp	r1, #10
 8008870:	d103      	bne.n	800887a <__sfputc_r+0x1e>
 8008872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008876:	f7ff bdea 	b.w	800844e <__swbuf_r>
 800887a:	6813      	ldr	r3, [r2, #0]
 800887c:	1c58      	adds	r0, r3, #1
 800887e:	6010      	str	r0, [r2, #0]
 8008880:	7019      	strb	r1, [r3, #0]
 8008882:	4608      	mov	r0, r1
 8008884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008888:	4770      	bx	lr

0800888a <__sfputs_r>:
 800888a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888c:	4606      	mov	r6, r0
 800888e:	460f      	mov	r7, r1
 8008890:	4614      	mov	r4, r2
 8008892:	18d5      	adds	r5, r2, r3
 8008894:	42ac      	cmp	r4, r5
 8008896:	d101      	bne.n	800889c <__sfputs_r+0x12>
 8008898:	2000      	movs	r0, #0
 800889a:	e007      	b.n	80088ac <__sfputs_r+0x22>
 800889c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a0:	463a      	mov	r2, r7
 80088a2:	4630      	mov	r0, r6
 80088a4:	f7ff ffda 	bl	800885c <__sfputc_r>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d1f3      	bne.n	8008894 <__sfputs_r+0xa>
 80088ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088b0 <_vfiprintf_r>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	460d      	mov	r5, r1
 80088b6:	b09d      	sub	sp, #116	; 0x74
 80088b8:	4614      	mov	r4, r2
 80088ba:	4698      	mov	r8, r3
 80088bc:	4606      	mov	r6, r0
 80088be:	b118      	cbz	r0, 80088c8 <_vfiprintf_r+0x18>
 80088c0:	6a03      	ldr	r3, [r0, #32]
 80088c2:	b90b      	cbnz	r3, 80088c8 <_vfiprintf_r+0x18>
 80088c4:	f7ff fcdc 	bl	8008280 <__sinit>
 80088c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088ca:	07d9      	lsls	r1, r3, #31
 80088cc:	d405      	bmi.n	80088da <_vfiprintf_r+0x2a>
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	059a      	lsls	r2, r3, #22
 80088d2:	d402      	bmi.n	80088da <_vfiprintf_r+0x2a>
 80088d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088d6:	f7ff fec7 	bl	8008668 <__retarget_lock_acquire_recursive>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	071b      	lsls	r3, r3, #28
 80088de:	d501      	bpl.n	80088e4 <_vfiprintf_r+0x34>
 80088e0:	692b      	ldr	r3, [r5, #16]
 80088e2:	b99b      	cbnz	r3, 800890c <_vfiprintf_r+0x5c>
 80088e4:	4629      	mov	r1, r5
 80088e6:	4630      	mov	r0, r6
 80088e8:	f7ff fdee 	bl	80084c8 <__swsetup_r>
 80088ec:	b170      	cbz	r0, 800890c <_vfiprintf_r+0x5c>
 80088ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088f0:	07dc      	lsls	r4, r3, #31
 80088f2:	d504      	bpl.n	80088fe <_vfiprintf_r+0x4e>
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	b01d      	add	sp, #116	; 0x74
 80088fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fe:	89ab      	ldrh	r3, [r5, #12]
 8008900:	0598      	lsls	r0, r3, #22
 8008902:	d4f7      	bmi.n	80088f4 <_vfiprintf_r+0x44>
 8008904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008906:	f7ff feb0 	bl	800866a <__retarget_lock_release_recursive>
 800890a:	e7f3      	b.n	80088f4 <_vfiprintf_r+0x44>
 800890c:	2300      	movs	r3, #0
 800890e:	9309      	str	r3, [sp, #36]	; 0x24
 8008910:	2320      	movs	r3, #32
 8008912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008916:	f8cd 800c 	str.w	r8, [sp, #12]
 800891a:	2330      	movs	r3, #48	; 0x30
 800891c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ad0 <_vfiprintf_r+0x220>
 8008920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008924:	f04f 0901 	mov.w	r9, #1
 8008928:	4623      	mov	r3, r4
 800892a:	469a      	mov	sl, r3
 800892c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008930:	b10a      	cbz	r2, 8008936 <_vfiprintf_r+0x86>
 8008932:	2a25      	cmp	r2, #37	; 0x25
 8008934:	d1f9      	bne.n	800892a <_vfiprintf_r+0x7a>
 8008936:	ebba 0b04 	subs.w	fp, sl, r4
 800893a:	d00b      	beq.n	8008954 <_vfiprintf_r+0xa4>
 800893c:	465b      	mov	r3, fp
 800893e:	4622      	mov	r2, r4
 8008940:	4629      	mov	r1, r5
 8008942:	4630      	mov	r0, r6
 8008944:	f7ff ffa1 	bl	800888a <__sfputs_r>
 8008948:	3001      	adds	r0, #1
 800894a:	f000 80a9 	beq.w	8008aa0 <_vfiprintf_r+0x1f0>
 800894e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008950:	445a      	add	r2, fp
 8008952:	9209      	str	r2, [sp, #36]	; 0x24
 8008954:	f89a 3000 	ldrb.w	r3, [sl]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 80a1 	beq.w	8008aa0 <_vfiprintf_r+0x1f0>
 800895e:	2300      	movs	r3, #0
 8008960:	f04f 32ff 	mov.w	r2, #4294967295
 8008964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008968:	f10a 0a01 	add.w	sl, sl, #1
 800896c:	9304      	str	r3, [sp, #16]
 800896e:	9307      	str	r3, [sp, #28]
 8008970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008974:	931a      	str	r3, [sp, #104]	; 0x68
 8008976:	4654      	mov	r4, sl
 8008978:	2205      	movs	r2, #5
 800897a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800897e:	4854      	ldr	r0, [pc, #336]	; (8008ad0 <_vfiprintf_r+0x220>)
 8008980:	f7f7 fc26 	bl	80001d0 <memchr>
 8008984:	9a04      	ldr	r2, [sp, #16]
 8008986:	b9d8      	cbnz	r0, 80089c0 <_vfiprintf_r+0x110>
 8008988:	06d1      	lsls	r1, r2, #27
 800898a:	bf44      	itt	mi
 800898c:	2320      	movmi	r3, #32
 800898e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008992:	0713      	lsls	r3, r2, #28
 8008994:	bf44      	itt	mi
 8008996:	232b      	movmi	r3, #43	; 0x2b
 8008998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800899c:	f89a 3000 	ldrb.w	r3, [sl]
 80089a0:	2b2a      	cmp	r3, #42	; 0x2a
 80089a2:	d015      	beq.n	80089d0 <_vfiprintf_r+0x120>
 80089a4:	9a07      	ldr	r2, [sp, #28]
 80089a6:	4654      	mov	r4, sl
 80089a8:	2000      	movs	r0, #0
 80089aa:	f04f 0c0a 	mov.w	ip, #10
 80089ae:	4621      	mov	r1, r4
 80089b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089b4:	3b30      	subs	r3, #48	; 0x30
 80089b6:	2b09      	cmp	r3, #9
 80089b8:	d94d      	bls.n	8008a56 <_vfiprintf_r+0x1a6>
 80089ba:	b1b0      	cbz	r0, 80089ea <_vfiprintf_r+0x13a>
 80089bc:	9207      	str	r2, [sp, #28]
 80089be:	e014      	b.n	80089ea <_vfiprintf_r+0x13a>
 80089c0:	eba0 0308 	sub.w	r3, r0, r8
 80089c4:	fa09 f303 	lsl.w	r3, r9, r3
 80089c8:	4313      	orrs	r3, r2
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	46a2      	mov	sl, r4
 80089ce:	e7d2      	b.n	8008976 <_vfiprintf_r+0xc6>
 80089d0:	9b03      	ldr	r3, [sp, #12]
 80089d2:	1d19      	adds	r1, r3, #4
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	9103      	str	r1, [sp, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bfbb      	ittet	lt
 80089dc:	425b      	neglt	r3, r3
 80089de:	f042 0202 	orrlt.w	r2, r2, #2
 80089e2:	9307      	strge	r3, [sp, #28]
 80089e4:	9307      	strlt	r3, [sp, #28]
 80089e6:	bfb8      	it	lt
 80089e8:	9204      	strlt	r2, [sp, #16]
 80089ea:	7823      	ldrb	r3, [r4, #0]
 80089ec:	2b2e      	cmp	r3, #46	; 0x2e
 80089ee:	d10c      	bne.n	8008a0a <_vfiprintf_r+0x15a>
 80089f0:	7863      	ldrb	r3, [r4, #1]
 80089f2:	2b2a      	cmp	r3, #42	; 0x2a
 80089f4:	d134      	bne.n	8008a60 <_vfiprintf_r+0x1b0>
 80089f6:	9b03      	ldr	r3, [sp, #12]
 80089f8:	1d1a      	adds	r2, r3, #4
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	9203      	str	r2, [sp, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfb8      	it	lt
 8008a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a06:	3402      	adds	r4, #2
 8008a08:	9305      	str	r3, [sp, #20]
 8008a0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ae0 <_vfiprintf_r+0x230>
 8008a0e:	7821      	ldrb	r1, [r4, #0]
 8008a10:	2203      	movs	r2, #3
 8008a12:	4650      	mov	r0, sl
 8008a14:	f7f7 fbdc 	bl	80001d0 <memchr>
 8008a18:	b138      	cbz	r0, 8008a2a <_vfiprintf_r+0x17a>
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	eba0 000a 	sub.w	r0, r0, sl
 8008a20:	2240      	movs	r2, #64	; 0x40
 8008a22:	4082      	lsls	r2, r0
 8008a24:	4313      	orrs	r3, r2
 8008a26:	3401      	adds	r4, #1
 8008a28:	9304      	str	r3, [sp, #16]
 8008a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2e:	4829      	ldr	r0, [pc, #164]	; (8008ad4 <_vfiprintf_r+0x224>)
 8008a30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a34:	2206      	movs	r2, #6
 8008a36:	f7f7 fbcb 	bl	80001d0 <memchr>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d03f      	beq.n	8008abe <_vfiprintf_r+0x20e>
 8008a3e:	4b26      	ldr	r3, [pc, #152]	; (8008ad8 <_vfiprintf_r+0x228>)
 8008a40:	bb1b      	cbnz	r3, 8008a8a <_vfiprintf_r+0x1da>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	3307      	adds	r3, #7
 8008a46:	f023 0307 	bic.w	r3, r3, #7
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	9303      	str	r3, [sp, #12]
 8008a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a50:	443b      	add	r3, r7
 8008a52:	9309      	str	r3, [sp, #36]	; 0x24
 8008a54:	e768      	b.n	8008928 <_vfiprintf_r+0x78>
 8008a56:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	2001      	movs	r0, #1
 8008a5e:	e7a6      	b.n	80089ae <_vfiprintf_r+0xfe>
 8008a60:	2300      	movs	r3, #0
 8008a62:	3401      	adds	r4, #1
 8008a64:	9305      	str	r3, [sp, #20]
 8008a66:	4619      	mov	r1, r3
 8008a68:	f04f 0c0a 	mov.w	ip, #10
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a72:	3a30      	subs	r2, #48	; 0x30
 8008a74:	2a09      	cmp	r2, #9
 8008a76:	d903      	bls.n	8008a80 <_vfiprintf_r+0x1d0>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d0c6      	beq.n	8008a0a <_vfiprintf_r+0x15a>
 8008a7c:	9105      	str	r1, [sp, #20]
 8008a7e:	e7c4      	b.n	8008a0a <_vfiprintf_r+0x15a>
 8008a80:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a84:	4604      	mov	r4, r0
 8008a86:	2301      	movs	r3, #1
 8008a88:	e7f0      	b.n	8008a6c <_vfiprintf_r+0x1bc>
 8008a8a:	ab03      	add	r3, sp, #12
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	462a      	mov	r2, r5
 8008a90:	4b12      	ldr	r3, [pc, #72]	; (8008adc <_vfiprintf_r+0x22c>)
 8008a92:	a904      	add	r1, sp, #16
 8008a94:	4630      	mov	r0, r6
 8008a96:	f3af 8000 	nop.w
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	1c78      	adds	r0, r7, #1
 8008a9e:	d1d6      	bne.n	8008a4e <_vfiprintf_r+0x19e>
 8008aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa2:	07d9      	lsls	r1, r3, #31
 8008aa4:	d405      	bmi.n	8008ab2 <_vfiprintf_r+0x202>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	059a      	lsls	r2, r3, #22
 8008aaa:	d402      	bmi.n	8008ab2 <_vfiprintf_r+0x202>
 8008aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aae:	f7ff fddc 	bl	800866a <__retarget_lock_release_recursive>
 8008ab2:	89ab      	ldrh	r3, [r5, #12]
 8008ab4:	065b      	lsls	r3, r3, #25
 8008ab6:	f53f af1d 	bmi.w	80088f4 <_vfiprintf_r+0x44>
 8008aba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008abc:	e71c      	b.n	80088f8 <_vfiprintf_r+0x48>
 8008abe:	ab03      	add	r3, sp, #12
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <_vfiprintf_r+0x22c>)
 8008ac6:	a904      	add	r1, sp, #16
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f000 f879 	bl	8008bc0 <_printf_i>
 8008ace:	e7e4      	b.n	8008a9a <_vfiprintf_r+0x1ea>
 8008ad0:	08009280 	.word	0x08009280
 8008ad4:	0800928a 	.word	0x0800928a
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	0800888b 	.word	0x0800888b
 8008ae0:	08009286 	.word	0x08009286

08008ae4 <_printf_common>:
 8008ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae8:	4616      	mov	r6, r2
 8008aea:	4699      	mov	r9, r3
 8008aec:	688a      	ldr	r2, [r1, #8]
 8008aee:	690b      	ldr	r3, [r1, #16]
 8008af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	bfb8      	it	lt
 8008af8:	4613      	movlt	r3, r2
 8008afa:	6033      	str	r3, [r6, #0]
 8008afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b00:	4607      	mov	r7, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	b10a      	cbz	r2, 8008b0a <_printf_common+0x26>
 8008b06:	3301      	adds	r3, #1
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	0699      	lsls	r1, r3, #26
 8008b0e:	bf42      	ittt	mi
 8008b10:	6833      	ldrmi	r3, [r6, #0]
 8008b12:	3302      	addmi	r3, #2
 8008b14:	6033      	strmi	r3, [r6, #0]
 8008b16:	6825      	ldr	r5, [r4, #0]
 8008b18:	f015 0506 	ands.w	r5, r5, #6
 8008b1c:	d106      	bne.n	8008b2c <_printf_common+0x48>
 8008b1e:	f104 0a19 	add.w	sl, r4, #25
 8008b22:	68e3      	ldr	r3, [r4, #12]
 8008b24:	6832      	ldr	r2, [r6, #0]
 8008b26:	1a9b      	subs	r3, r3, r2
 8008b28:	42ab      	cmp	r3, r5
 8008b2a:	dc26      	bgt.n	8008b7a <_printf_common+0x96>
 8008b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b30:	1e13      	subs	r3, r2, #0
 8008b32:	6822      	ldr	r2, [r4, #0]
 8008b34:	bf18      	it	ne
 8008b36:	2301      	movne	r3, #1
 8008b38:	0692      	lsls	r2, r2, #26
 8008b3a:	d42b      	bmi.n	8008b94 <_printf_common+0xb0>
 8008b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b40:	4649      	mov	r1, r9
 8008b42:	4638      	mov	r0, r7
 8008b44:	47c0      	blx	r8
 8008b46:	3001      	adds	r0, #1
 8008b48:	d01e      	beq.n	8008b88 <_printf_common+0xa4>
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	f003 0306 	and.w	r3, r3, #6
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	bf02      	ittt	eq
 8008b56:	68e5      	ldreq	r5, [r4, #12]
 8008b58:	6833      	ldreq	r3, [r6, #0]
 8008b5a:	1aed      	subeq	r5, r5, r3
 8008b5c:	68a3      	ldr	r3, [r4, #8]
 8008b5e:	bf0c      	ite	eq
 8008b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b64:	2500      	movne	r5, #0
 8008b66:	4293      	cmp	r3, r2
 8008b68:	bfc4      	itt	gt
 8008b6a:	1a9b      	subgt	r3, r3, r2
 8008b6c:	18ed      	addgt	r5, r5, r3
 8008b6e:	2600      	movs	r6, #0
 8008b70:	341a      	adds	r4, #26
 8008b72:	42b5      	cmp	r5, r6
 8008b74:	d11a      	bne.n	8008bac <_printf_common+0xc8>
 8008b76:	2000      	movs	r0, #0
 8008b78:	e008      	b.n	8008b8c <_printf_common+0xa8>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4638      	mov	r0, r7
 8008b82:	47c0      	blx	r8
 8008b84:	3001      	adds	r0, #1
 8008b86:	d103      	bne.n	8008b90 <_printf_common+0xac>
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	3501      	adds	r5, #1
 8008b92:	e7c6      	b.n	8008b22 <_printf_common+0x3e>
 8008b94:	18e1      	adds	r1, r4, r3
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	2030      	movs	r0, #48	; 0x30
 8008b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b9e:	4422      	add	r2, r4
 8008ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ba8:	3302      	adds	r3, #2
 8008baa:	e7c7      	b.n	8008b3c <_printf_common+0x58>
 8008bac:	2301      	movs	r3, #1
 8008bae:	4622      	mov	r2, r4
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	47c0      	blx	r8
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d0e6      	beq.n	8008b88 <_printf_common+0xa4>
 8008bba:	3601      	adds	r6, #1
 8008bbc:	e7d9      	b.n	8008b72 <_printf_common+0x8e>
	...

08008bc0 <_printf_i>:
 8008bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	7e0f      	ldrb	r7, [r1, #24]
 8008bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bc8:	2f78      	cmp	r7, #120	; 0x78
 8008bca:	4691      	mov	r9, r2
 8008bcc:	4680      	mov	r8, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	469a      	mov	sl, r3
 8008bd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bd6:	d807      	bhi.n	8008be8 <_printf_i+0x28>
 8008bd8:	2f62      	cmp	r7, #98	; 0x62
 8008bda:	d80a      	bhi.n	8008bf2 <_printf_i+0x32>
 8008bdc:	2f00      	cmp	r7, #0
 8008bde:	f000 80d4 	beq.w	8008d8a <_printf_i+0x1ca>
 8008be2:	2f58      	cmp	r7, #88	; 0x58
 8008be4:	f000 80c0 	beq.w	8008d68 <_printf_i+0x1a8>
 8008be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bf0:	e03a      	b.n	8008c68 <_printf_i+0xa8>
 8008bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bf6:	2b15      	cmp	r3, #21
 8008bf8:	d8f6      	bhi.n	8008be8 <_printf_i+0x28>
 8008bfa:	a101      	add	r1, pc, #4	; (adr r1, 8008c00 <_printf_i+0x40>)
 8008bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c00:	08008c59 	.word	0x08008c59
 8008c04:	08008c6d 	.word	0x08008c6d
 8008c08:	08008be9 	.word	0x08008be9
 8008c0c:	08008be9 	.word	0x08008be9
 8008c10:	08008be9 	.word	0x08008be9
 8008c14:	08008be9 	.word	0x08008be9
 8008c18:	08008c6d 	.word	0x08008c6d
 8008c1c:	08008be9 	.word	0x08008be9
 8008c20:	08008be9 	.word	0x08008be9
 8008c24:	08008be9 	.word	0x08008be9
 8008c28:	08008be9 	.word	0x08008be9
 8008c2c:	08008d71 	.word	0x08008d71
 8008c30:	08008c99 	.word	0x08008c99
 8008c34:	08008d2b 	.word	0x08008d2b
 8008c38:	08008be9 	.word	0x08008be9
 8008c3c:	08008be9 	.word	0x08008be9
 8008c40:	08008d93 	.word	0x08008d93
 8008c44:	08008be9 	.word	0x08008be9
 8008c48:	08008c99 	.word	0x08008c99
 8008c4c:	08008be9 	.word	0x08008be9
 8008c50:	08008be9 	.word	0x08008be9
 8008c54:	08008d33 	.word	0x08008d33
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	1d1a      	adds	r2, r3, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	602a      	str	r2, [r5, #0]
 8008c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e09f      	b.n	8008dac <_printf_i+0x1ec>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	682b      	ldr	r3, [r5, #0]
 8008c70:	0607      	lsls	r7, r0, #24
 8008c72:	f103 0104 	add.w	r1, r3, #4
 8008c76:	6029      	str	r1, [r5, #0]
 8008c78:	d501      	bpl.n	8008c7e <_printf_i+0xbe>
 8008c7a:	681e      	ldr	r6, [r3, #0]
 8008c7c:	e003      	b.n	8008c86 <_printf_i+0xc6>
 8008c7e:	0646      	lsls	r6, r0, #25
 8008c80:	d5fb      	bpl.n	8008c7a <_printf_i+0xba>
 8008c82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c86:	2e00      	cmp	r6, #0
 8008c88:	da03      	bge.n	8008c92 <_printf_i+0xd2>
 8008c8a:	232d      	movs	r3, #45	; 0x2d
 8008c8c:	4276      	negs	r6, r6
 8008c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c92:	485a      	ldr	r0, [pc, #360]	; (8008dfc <_printf_i+0x23c>)
 8008c94:	230a      	movs	r3, #10
 8008c96:	e012      	b.n	8008cbe <_printf_i+0xfe>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	6820      	ldr	r0, [r4, #0]
 8008c9c:	1d19      	adds	r1, r3, #4
 8008c9e:	6029      	str	r1, [r5, #0]
 8008ca0:	0605      	lsls	r5, r0, #24
 8008ca2:	d501      	bpl.n	8008ca8 <_printf_i+0xe8>
 8008ca4:	681e      	ldr	r6, [r3, #0]
 8008ca6:	e002      	b.n	8008cae <_printf_i+0xee>
 8008ca8:	0641      	lsls	r1, r0, #25
 8008caa:	d5fb      	bpl.n	8008ca4 <_printf_i+0xe4>
 8008cac:	881e      	ldrh	r6, [r3, #0]
 8008cae:	4853      	ldr	r0, [pc, #332]	; (8008dfc <_printf_i+0x23c>)
 8008cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8008cb2:	bf0c      	ite	eq
 8008cb4:	2308      	moveq	r3, #8
 8008cb6:	230a      	movne	r3, #10
 8008cb8:	2100      	movs	r1, #0
 8008cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cbe:	6865      	ldr	r5, [r4, #4]
 8008cc0:	60a5      	str	r5, [r4, #8]
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	bfa2      	ittt	ge
 8008cc6:	6821      	ldrge	r1, [r4, #0]
 8008cc8:	f021 0104 	bicge.w	r1, r1, #4
 8008ccc:	6021      	strge	r1, [r4, #0]
 8008cce:	b90e      	cbnz	r6, 8008cd4 <_printf_i+0x114>
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	d04b      	beq.n	8008d6c <_printf_i+0x1ac>
 8008cd4:	4615      	mov	r5, r2
 8008cd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cda:	fb03 6711 	mls	r7, r3, r1, r6
 8008cde:	5dc7      	ldrb	r7, [r0, r7]
 8008ce0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ce4:	4637      	mov	r7, r6
 8008ce6:	42bb      	cmp	r3, r7
 8008ce8:	460e      	mov	r6, r1
 8008cea:	d9f4      	bls.n	8008cd6 <_printf_i+0x116>
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d10b      	bne.n	8008d08 <_printf_i+0x148>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	07de      	lsls	r6, r3, #31
 8008cf4:	d508      	bpl.n	8008d08 <_printf_i+0x148>
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	6861      	ldr	r1, [r4, #4]
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	bfde      	ittt	le
 8008cfe:	2330      	movle	r3, #48	; 0x30
 8008d00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d08:	1b52      	subs	r2, r2, r5
 8008d0a:	6122      	str	r2, [r4, #16]
 8008d0c:	f8cd a000 	str.w	sl, [sp]
 8008d10:	464b      	mov	r3, r9
 8008d12:	aa03      	add	r2, sp, #12
 8008d14:	4621      	mov	r1, r4
 8008d16:	4640      	mov	r0, r8
 8008d18:	f7ff fee4 	bl	8008ae4 <_printf_common>
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	d14a      	bne.n	8008db6 <_printf_i+0x1f6>
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	b004      	add	sp, #16
 8008d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	f043 0320 	orr.w	r3, r3, #32
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	4833      	ldr	r0, [pc, #204]	; (8008e00 <_printf_i+0x240>)
 8008d34:	2778      	movs	r7, #120	; 0x78
 8008d36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	6829      	ldr	r1, [r5, #0]
 8008d3e:	061f      	lsls	r7, r3, #24
 8008d40:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d44:	d402      	bmi.n	8008d4c <_printf_i+0x18c>
 8008d46:	065f      	lsls	r7, r3, #25
 8008d48:	bf48      	it	mi
 8008d4a:	b2b6      	uxthmi	r6, r6
 8008d4c:	07df      	lsls	r7, r3, #31
 8008d4e:	bf48      	it	mi
 8008d50:	f043 0320 	orrmi.w	r3, r3, #32
 8008d54:	6029      	str	r1, [r5, #0]
 8008d56:	bf48      	it	mi
 8008d58:	6023      	strmi	r3, [r4, #0]
 8008d5a:	b91e      	cbnz	r6, 8008d64 <_printf_i+0x1a4>
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	f023 0320 	bic.w	r3, r3, #32
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	2310      	movs	r3, #16
 8008d66:	e7a7      	b.n	8008cb8 <_printf_i+0xf8>
 8008d68:	4824      	ldr	r0, [pc, #144]	; (8008dfc <_printf_i+0x23c>)
 8008d6a:	e7e4      	b.n	8008d36 <_printf_i+0x176>
 8008d6c:	4615      	mov	r5, r2
 8008d6e:	e7bd      	b.n	8008cec <_printf_i+0x12c>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	6826      	ldr	r6, [r4, #0]
 8008d74:	6961      	ldr	r1, [r4, #20]
 8008d76:	1d18      	adds	r0, r3, #4
 8008d78:	6028      	str	r0, [r5, #0]
 8008d7a:	0635      	lsls	r5, r6, #24
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	d501      	bpl.n	8008d84 <_printf_i+0x1c4>
 8008d80:	6019      	str	r1, [r3, #0]
 8008d82:	e002      	b.n	8008d8a <_printf_i+0x1ca>
 8008d84:	0670      	lsls	r0, r6, #25
 8008d86:	d5fb      	bpl.n	8008d80 <_printf_i+0x1c0>
 8008d88:	8019      	strh	r1, [r3, #0]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	6123      	str	r3, [r4, #16]
 8008d8e:	4615      	mov	r5, r2
 8008d90:	e7bc      	b.n	8008d0c <_printf_i+0x14c>
 8008d92:	682b      	ldr	r3, [r5, #0]
 8008d94:	1d1a      	adds	r2, r3, #4
 8008d96:	602a      	str	r2, [r5, #0]
 8008d98:	681d      	ldr	r5, [r3, #0]
 8008d9a:	6862      	ldr	r2, [r4, #4]
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f7f7 fa16 	bl	80001d0 <memchr>
 8008da4:	b108      	cbz	r0, 8008daa <_printf_i+0x1ea>
 8008da6:	1b40      	subs	r0, r0, r5
 8008da8:	6060      	str	r0, [r4, #4]
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	6123      	str	r3, [r4, #16]
 8008dae:	2300      	movs	r3, #0
 8008db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db4:	e7aa      	b.n	8008d0c <_printf_i+0x14c>
 8008db6:	6923      	ldr	r3, [r4, #16]
 8008db8:	462a      	mov	r2, r5
 8008dba:	4649      	mov	r1, r9
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	47d0      	blx	sl
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d0ad      	beq.n	8008d20 <_printf_i+0x160>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	079b      	lsls	r3, r3, #30
 8008dc8:	d413      	bmi.n	8008df2 <_printf_i+0x232>
 8008dca:	68e0      	ldr	r0, [r4, #12]
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	4298      	cmp	r0, r3
 8008dd0:	bfb8      	it	lt
 8008dd2:	4618      	movlt	r0, r3
 8008dd4:	e7a6      	b.n	8008d24 <_printf_i+0x164>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4632      	mov	r2, r6
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4640      	mov	r0, r8
 8008dde:	47d0      	blx	sl
 8008de0:	3001      	adds	r0, #1
 8008de2:	d09d      	beq.n	8008d20 <_printf_i+0x160>
 8008de4:	3501      	adds	r5, #1
 8008de6:	68e3      	ldr	r3, [r4, #12]
 8008de8:	9903      	ldr	r1, [sp, #12]
 8008dea:	1a5b      	subs	r3, r3, r1
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dcf2      	bgt.n	8008dd6 <_printf_i+0x216>
 8008df0:	e7eb      	b.n	8008dca <_printf_i+0x20a>
 8008df2:	2500      	movs	r5, #0
 8008df4:	f104 0619 	add.w	r6, r4, #25
 8008df8:	e7f5      	b.n	8008de6 <_printf_i+0x226>
 8008dfa:	bf00      	nop
 8008dfc:	08009291 	.word	0x08009291
 8008e00:	080092a2 	.word	0x080092a2

08008e04 <__sflush_r>:
 8008e04:	898a      	ldrh	r2, [r1, #12]
 8008e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	0710      	lsls	r0, r2, #28
 8008e0e:	460c      	mov	r4, r1
 8008e10:	d458      	bmi.n	8008ec4 <__sflush_r+0xc0>
 8008e12:	684b      	ldr	r3, [r1, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	dc05      	bgt.n	8008e24 <__sflush_r+0x20>
 8008e18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dc02      	bgt.n	8008e24 <__sflush_r+0x20>
 8008e1e:	2000      	movs	r0, #0
 8008e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e26:	2e00      	cmp	r6, #0
 8008e28:	d0f9      	beq.n	8008e1e <__sflush_r+0x1a>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e30:	682f      	ldr	r7, [r5, #0]
 8008e32:	6a21      	ldr	r1, [r4, #32]
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	d032      	beq.n	8008e9e <__sflush_r+0x9a>
 8008e38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	075a      	lsls	r2, r3, #29
 8008e3e:	d505      	bpl.n	8008e4c <__sflush_r+0x48>
 8008e40:	6863      	ldr	r3, [r4, #4]
 8008e42:	1ac0      	subs	r0, r0, r3
 8008e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e46:	b10b      	cbz	r3, 8008e4c <__sflush_r+0x48>
 8008e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e4a:	1ac0      	subs	r0, r0, r3
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4602      	mov	r2, r0
 8008e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e52:	6a21      	ldr	r1, [r4, #32]
 8008e54:	4628      	mov	r0, r5
 8008e56:	47b0      	blx	r6
 8008e58:	1c43      	adds	r3, r0, #1
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	d106      	bne.n	8008e6c <__sflush_r+0x68>
 8008e5e:	6829      	ldr	r1, [r5, #0]
 8008e60:	291d      	cmp	r1, #29
 8008e62:	d82b      	bhi.n	8008ebc <__sflush_r+0xb8>
 8008e64:	4a29      	ldr	r2, [pc, #164]	; (8008f0c <__sflush_r+0x108>)
 8008e66:	410a      	asrs	r2, r1
 8008e68:	07d6      	lsls	r6, r2, #31
 8008e6a:	d427      	bmi.n	8008ebc <__sflush_r+0xb8>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	6062      	str	r2, [r4, #4]
 8008e70:	04d9      	lsls	r1, r3, #19
 8008e72:	6922      	ldr	r2, [r4, #16]
 8008e74:	6022      	str	r2, [r4, #0]
 8008e76:	d504      	bpl.n	8008e82 <__sflush_r+0x7e>
 8008e78:	1c42      	adds	r2, r0, #1
 8008e7a:	d101      	bne.n	8008e80 <__sflush_r+0x7c>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b903      	cbnz	r3, 8008e82 <__sflush_r+0x7e>
 8008e80:	6560      	str	r0, [r4, #84]	; 0x54
 8008e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e84:	602f      	str	r7, [r5, #0]
 8008e86:	2900      	cmp	r1, #0
 8008e88:	d0c9      	beq.n	8008e1e <__sflush_r+0x1a>
 8008e8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e8e:	4299      	cmp	r1, r3
 8008e90:	d002      	beq.n	8008e98 <__sflush_r+0x94>
 8008e92:	4628      	mov	r0, r5
 8008e94:	f7ff fbea 	bl	800866c <_free_r>
 8008e98:	2000      	movs	r0, #0
 8008e9a:	6360      	str	r0, [r4, #52]	; 0x34
 8008e9c:	e7c0      	b.n	8008e20 <__sflush_r+0x1c>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	47b0      	blx	r6
 8008ea4:	1c41      	adds	r1, r0, #1
 8008ea6:	d1c8      	bne.n	8008e3a <__sflush_r+0x36>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0c5      	beq.n	8008e3a <__sflush_r+0x36>
 8008eae:	2b1d      	cmp	r3, #29
 8008eb0:	d001      	beq.n	8008eb6 <__sflush_r+0xb2>
 8008eb2:	2b16      	cmp	r3, #22
 8008eb4:	d101      	bne.n	8008eba <__sflush_r+0xb6>
 8008eb6:	602f      	str	r7, [r5, #0]
 8008eb8:	e7b1      	b.n	8008e1e <__sflush_r+0x1a>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	e7ad      	b.n	8008e20 <__sflush_r+0x1c>
 8008ec4:	690f      	ldr	r7, [r1, #16]
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	d0a9      	beq.n	8008e1e <__sflush_r+0x1a>
 8008eca:	0793      	lsls	r3, r2, #30
 8008ecc:	680e      	ldr	r6, [r1, #0]
 8008ece:	bf08      	it	eq
 8008ed0:	694b      	ldreq	r3, [r1, #20]
 8008ed2:	600f      	str	r7, [r1, #0]
 8008ed4:	bf18      	it	ne
 8008ed6:	2300      	movne	r3, #0
 8008ed8:	eba6 0807 	sub.w	r8, r6, r7
 8008edc:	608b      	str	r3, [r1, #8]
 8008ede:	f1b8 0f00 	cmp.w	r8, #0
 8008ee2:	dd9c      	ble.n	8008e1e <__sflush_r+0x1a>
 8008ee4:	6a21      	ldr	r1, [r4, #32]
 8008ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ee8:	4643      	mov	r3, r8
 8008eea:	463a      	mov	r2, r7
 8008eec:	4628      	mov	r0, r5
 8008eee:	47b0      	blx	r6
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	dc06      	bgt.n	8008f02 <__sflush_r+0xfe>
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efa:	81a3      	strh	r3, [r4, #12]
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	e78e      	b.n	8008e20 <__sflush_r+0x1c>
 8008f02:	4407      	add	r7, r0
 8008f04:	eba8 0800 	sub.w	r8, r8, r0
 8008f08:	e7e9      	b.n	8008ede <__sflush_r+0xda>
 8008f0a:	bf00      	nop
 8008f0c:	dfbffffe 	.word	0xdfbffffe

08008f10 <_fflush_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	690b      	ldr	r3, [r1, #16]
 8008f14:	4605      	mov	r5, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	b913      	cbnz	r3, 8008f20 <_fflush_r+0x10>
 8008f1a:	2500      	movs	r5, #0
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	b118      	cbz	r0, 8008f2a <_fflush_r+0x1a>
 8008f22:	6a03      	ldr	r3, [r0, #32]
 8008f24:	b90b      	cbnz	r3, 8008f2a <_fflush_r+0x1a>
 8008f26:	f7ff f9ab 	bl	8008280 <__sinit>
 8008f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0f3      	beq.n	8008f1a <_fflush_r+0xa>
 8008f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f34:	07d0      	lsls	r0, r2, #31
 8008f36:	d404      	bmi.n	8008f42 <_fflush_r+0x32>
 8008f38:	0599      	lsls	r1, r3, #22
 8008f3a:	d402      	bmi.n	8008f42 <_fflush_r+0x32>
 8008f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f3e:	f7ff fb93 	bl	8008668 <__retarget_lock_acquire_recursive>
 8008f42:	4628      	mov	r0, r5
 8008f44:	4621      	mov	r1, r4
 8008f46:	f7ff ff5d 	bl	8008e04 <__sflush_r>
 8008f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f4c:	07da      	lsls	r2, r3, #31
 8008f4e:	4605      	mov	r5, r0
 8008f50:	d4e4      	bmi.n	8008f1c <_fflush_r+0xc>
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	059b      	lsls	r3, r3, #22
 8008f56:	d4e1      	bmi.n	8008f1c <_fflush_r+0xc>
 8008f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f5a:	f7ff fb86 	bl	800866a <__retarget_lock_release_recursive>
 8008f5e:	e7dd      	b.n	8008f1c <_fflush_r+0xc>

08008f60 <__swhatbuf_r>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	460c      	mov	r4, r1
 8008f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	b096      	sub	sp, #88	; 0x58
 8008f6c:	4615      	mov	r5, r2
 8008f6e:	461e      	mov	r6, r3
 8008f70:	da0d      	bge.n	8008f8e <__swhatbuf_r+0x2e>
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f78:	f04f 0100 	mov.w	r1, #0
 8008f7c:	bf0c      	ite	eq
 8008f7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f82:	2340      	movne	r3, #64	; 0x40
 8008f84:	2000      	movs	r0, #0
 8008f86:	6031      	str	r1, [r6, #0]
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	b016      	add	sp, #88	; 0x58
 8008f8c:	bd70      	pop	{r4, r5, r6, pc}
 8008f8e:	466a      	mov	r2, sp
 8008f90:	f000 f848 	bl	8009024 <_fstat_r>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	dbec      	blt.n	8008f72 <__swhatbuf_r+0x12>
 8008f98:	9901      	ldr	r1, [sp, #4]
 8008f9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008fa2:	4259      	negs	r1, r3
 8008fa4:	4159      	adcs	r1, r3
 8008fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008faa:	e7eb      	b.n	8008f84 <__swhatbuf_r+0x24>

08008fac <__smakebuf_r>:
 8008fac:	898b      	ldrh	r3, [r1, #12]
 8008fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fb0:	079d      	lsls	r5, r3, #30
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	d507      	bpl.n	8008fc8 <__smakebuf_r+0x1c>
 8008fb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	6163      	str	r3, [r4, #20]
 8008fc4:	b002      	add	sp, #8
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	ab01      	add	r3, sp, #4
 8008fca:	466a      	mov	r2, sp
 8008fcc:	f7ff ffc8 	bl	8008f60 <__swhatbuf_r>
 8008fd0:	9900      	ldr	r1, [sp, #0]
 8008fd2:	4605      	mov	r5, r0
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7ff fbb5 	bl	8008744 <_malloc_r>
 8008fda:	b948      	cbnz	r0, 8008ff0 <__smakebuf_r+0x44>
 8008fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe0:	059a      	lsls	r2, r3, #22
 8008fe2:	d4ef      	bmi.n	8008fc4 <__smakebuf_r+0x18>
 8008fe4:	f023 0303 	bic.w	r3, r3, #3
 8008fe8:	f043 0302 	orr.w	r3, r3, #2
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	e7e3      	b.n	8008fb8 <__smakebuf_r+0xc>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	6020      	str	r0, [r4, #0]
 8008ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff8:	81a3      	strh	r3, [r4, #12]
 8008ffa:	9b00      	ldr	r3, [sp, #0]
 8008ffc:	6163      	str	r3, [r4, #20]
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	6120      	str	r0, [r4, #16]
 8009002:	b15b      	cbz	r3, 800901c <__smakebuf_r+0x70>
 8009004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009008:	4630      	mov	r0, r6
 800900a:	f000 f81d 	bl	8009048 <_isatty_r>
 800900e:	b128      	cbz	r0, 800901c <__smakebuf_r+0x70>
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	f023 0303 	bic.w	r3, r3, #3
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	431d      	orrs	r5, r3
 8009020:	81a5      	strh	r5, [r4, #12]
 8009022:	e7cf      	b.n	8008fc4 <__smakebuf_r+0x18>

08009024 <_fstat_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d07      	ldr	r5, [pc, #28]	; (8009044 <_fstat_r+0x20>)
 8009028:	2300      	movs	r3, #0
 800902a:	4604      	mov	r4, r0
 800902c:	4608      	mov	r0, r1
 800902e:	4611      	mov	r1, r2
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	f7f7 feb6 	bl	8000da2 <_fstat>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	d102      	bne.n	8009040 <_fstat_r+0x1c>
 800903a:	682b      	ldr	r3, [r5, #0]
 800903c:	b103      	cbz	r3, 8009040 <_fstat_r+0x1c>
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	bd38      	pop	{r3, r4, r5, pc}
 8009042:	bf00      	nop
 8009044:	20001ef4 	.word	0x20001ef4

08009048 <_isatty_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d06      	ldr	r5, [pc, #24]	; (8009064 <_isatty_r+0x1c>)
 800904c:	2300      	movs	r3, #0
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	602b      	str	r3, [r5, #0]
 8009054:	f7f7 feb5 	bl	8000dc2 <_isatty>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_isatty_r+0x1a>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_isatty_r+0x1a>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	20001ef4 	.word	0x20001ef4

08009068 <_sbrk_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d06      	ldr	r5, [pc, #24]	; (8009084 <_sbrk_r+0x1c>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	f7f7 febe 	bl	8000df4 <_sbrk>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d102      	bne.n	8009082 <_sbrk_r+0x1a>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	b103      	cbz	r3, 8009082 <_sbrk_r+0x1a>
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	20001ef4 	.word	0x20001ef4

08009088 <_init>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	bf00      	nop
 800908c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908e:	bc08      	pop	{r3}
 8009090:	469e      	mov	lr, r3
 8009092:	4770      	bx	lr

08009094 <_fini>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	bf00      	nop
 8009098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909a:	bc08      	pop	{r3}
 800909c:	469e      	mov	lr, r3
 800909e:	4770      	bx	lr
